;
; File generated by cc65 v 2.16 - Git N/A
;
	.fopt		compiler,"cc65 v 2.16 - Git N/A"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_ppu_wait_frame
	.import		_ppu_on_all
	.import		_oam_meta_spr
	.import		_pad_poll
	.import		_vram_adr
	.import		_vram_unrle
	.export		_test_nam
	.export		_test_nam_coll_rle
	.import		_memcpy
	.export		_oam_off
	.export		_testColl
	.export		_X1_Right_Side
	.export		_X1_Left_Side
	.export		_Y1_Bottom
	.export		_Y1_Top
	.export		_corner
	.export		_enemyData
	.import		_paldat
	.export		_playerFrames
	.export		_enemyFrames
	.export		_playerSpriteData
	.export		_enemySpriteDataTemplate
	.export		_enemySpriteData
	.export		_palSprites
	.export		_palBG
	.export		_setFrame
	.export		_setPalette
	.export		_flipSprite
	.export		_unrleCollision
	.export		_four_Sides
	.export		_getCollisionIndex
	.export		_collideCheckVertical
	.export		_collideCheckHorizontal
	.export		_bgVertCollideCheck
	.export		_bgHorizCollideCheck
	.export		_updateEnemies
	.export		_playerEnemyCollideCheck
	.export		_main

.segment	"DATA"

.segment	"ZEROPAGE"
.segment	"DATA"
_enemyInitX:
	.byte	$96
_enemyInitY:
	.byte	$32
_enemyData:
	.byte	$96
	.byte	$32
	.byte	$00
	.byte	$00
	.byte	$32
	.byte	$96
	.byte	$32
	.byte	$40
	.byte	$4B
	.byte	$4B
	.byte	$01
	.byte	$00
	.byte	$19
	.byte	$4B
	.byte	$4B
	.byte	$80
	.byte	$64
	.byte	$64
	.byte	$01
	.byte	$00
	.byte	$1E
	.byte	$64
	.byte	$64
	.byte	$40
	.byte	$C8
	.byte	$C8
	.byte	$00
	.byte	$00
	.byte	$3C
	.byte	$C8
	.byte	$C8
	.byte	$40
_playerSpriteData:
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$05
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$14
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$15
	.byte	$02
	.byte	$80

.segment	"RODATA"

_test_nam:
	.byte	$01
	.byte	$40
	.byte	$01
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$0A
	.byte	$41
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$0D
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$0E
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$0E
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$0D
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$12
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$40
	.byte	$40
	.byte	$50
	.byte	$00
	.byte	$01
	.byte	$13
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$40
	.byte	$40
	.byte	$50
	.byte	$00
	.byte	$01
	.byte	$1C
	.byte	$40
	.byte	$40
	.byte	$50
	.byte	$00
	.byte	$01
	.byte	$1C
	.byte	$40
	.byte	$40
	.byte	$50
	.byte	$00
	.byte	$01
	.byte	$1C
	.byte	$40
	.byte	$40
	.byte	$50
	.byte	$00
	.byte	$01
	.byte	$1C
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$19
	.byte	$41
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1A
	.byte	$41
	.byte	$01
	.byte	$02
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$40
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$40
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$40
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$41
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$41
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$41
	.byte	$01
	.byte	$06
	.byte	$00
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$41
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$16
	.byte	$40
	.byte	$01
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$3E
	.byte	$00
	.byte	$01
	.byte	$00
_test_nam_coll_rle:
	.byte	$01
	.byte	$41
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$03
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$06
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$03
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$41
_playerFrames:
	.byte	$04
	.byte	$05
	.byte	$14
	.byte	$15
	.byte	$24
	.byte	$25
	.byte	$34
	.byte	$35
_enemyFrames:
	.byte	$06
	.byte	$07
	.byte	$16
	.byte	$17
	.byte	$26
	.byte	$27
	.byte	$36
	.byte	$37
_enemySpriteDataTemplate:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$00
	.byte	$03
	.byte	$80

.segment	"BSS"

.segment	"ZEROPAGE"
.segment	"BSS"
.segment	"ZEROPAGE"
_oam_off:
	.res	1,$00
.segment	"BSS"
_player_x:
	.res	1,$00
.segment	"BSS"
_player_y:
	.res	1,$00
.segment	"BSS"
_playerDir:
	.res	1,$00
.segment	"BSS"
_enemy_x:
	.res	1,$00
.segment	"BSS"
_enemy_y:
	.res	1,$00
.segment	"BSS"
_leftSide:
	.res	1,$00
.segment	"BSS"
_rightSide:
	.res	1,$00
.segment	"BSS"
_topSide:
	.res	1,$00
.segment	"BSS"
_bottomSide:
	.res	1,$00
.segment	"BSS"
_testCorner:
	.res	2,$00
.segment	"BSS"
_i:
	.res	1,$00
.segment	"BSS"
_pad:
	.res	1,$00
.segment	"BSS"
_spr:
	.res	1,$00
.segment	"BSS"
_touch:
	.res	1,$00
.segment	"BSS"
_frame:
	.res	1,$00
.segment	"BSS"
_playerFrame:
	.res	1,$00
.segment	"BSS"
_playerEnemyColliding:
	.res	1,$00
.segment	"BSS"
_testColl:
	.res	960,$00
.segment	"BSS"
_X1_Right_Side:
	.res	1,$00
.segment	"BSS"
_X1_Left_Side:
	.res	1,$00
.segment	"BSS"
_Y1_Bottom:
	.res	1,$00
.segment	"BSS"
_Y1_Top:
	.res	1,$00
.segment	"BSS"
_corner:
	.res	2,$00
.segment	"BSS"
_enemySpriteData:
	.res	68,$00
.segment	"BSS"
_palSprites:
	.res	4,$00
.segment	"BSS"
_palBG:
	.res	4,$00

; ---------------------------------------------------------------
; void __near__ __fastcall__ setFrame (__near__ unsigned char *, __near__ const unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_setFrame: near

.segment	"CODE"

;
; void __fastcall__ setFrame(u8 *sprite, const u8 *frame) {
;
	jsr     pushax
;
; sprite[2] = frame[0];
;
	ldy     #$05
	jsr     pushwysp
	ldy     #$03
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	ldy     #$02
	jsr     staspidx
;
; sprite[6] = frame[1];
;
	ldy     #$05
	jsr     pushwysp
	ldy     #$03
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	dey
	lda     (ptr1),y
	ldy     #$06
	jsr     staspidx
;
; sprite[10] = frame[2];
;
	ldy     #$05
	jsr     pushwysp
	ldy     #$03
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     (ptr1),y
	ldy     #$0A
	jsr     staspidx
;
; sprite[14] = frame[3];
;
	ldy     #$05
	jsr     pushwysp
	ldy     #$03
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	iny
	lda     (ptr1),y
	ldy     #$0E
	jsr     staspidx
;
; }
;
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ setPalette (__near__ unsigned char *, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_setPalette: near

.segment	"CODE"

;
; void __fastcall__ setPalette(u8 *sprite, u8 palette) {
;
	jsr     pusha
;
; for ( i = 3; i <= 15; i = i + 4 ) {
;
	jsr     decsp1
	lda     #$03
	ldy     #$00
L03F4:	sta     (sp),y
	cmp     #$10
	bcs     L01C9
;
; sprite[i] &= ~(0x3);
;
	lda     (sp),y
	clc
	ldy     #$02
	adc     (sp),y
	sta     ptr1
	lda     #$00
	iny
	adc     (sp),y
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	and     #$FC
	sta     (ptr1),y
;
; sprite[i] |= palette;
;
	lda     (sp),y
	clc
	ldy     #$02
	adc     (sp),y
	pha
	lda     #$00
	iny
	adc     (sp),y
	tax
	pla
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     ptr1
	ldy     #$03
	lda     (sp),y
	ora     ptr1
	ldy     #$00
	jsr     staspidx
;
; for ( i = 3; i <= 15; i = i + 4 ) {
;
	ldy     #$00
	lda     (sp),y
	clc
	adc     #$04
	jmp     L03F4
;
; }
;
L01C9:	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ flipSprite (__near__ unsigned char *, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_flipSprite: near

.segment	"CODE"

;
; void __fastcall__ flipSprite(u8 *sprite, u8 flip) {
;
	jsr     pusha
;
; if ( flip ) {
;
	ldy     #$00
	lda     (sp),y
	jeq     L01DA
;
; sprite[0] = 8;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     #$08
	dey
	sta     (ptr1),y
;
; sprite[3] |= OAM_FLIP_H;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$03
	lda     (ptr1),y
	ora     #$40
	sta     (ptr1),y
;
; sprite[4] = 0;
;
	dey
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     #$00
	ldy     #$04
	sta     (ptr1),y
;
; sprite[7] |= OAM_FLIP_H;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$07
	lda     (ptr1),y
	ora     #$40
	sta     (ptr1),y
;
; sprite[8] = 8;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     #$08
	tay
	sta     (ptr1),y
;
; sprite[11] |= OAM_FLIP_H;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$0B
	lda     (ptr1),y
	ora     #$40
	sta     (ptr1),y
;
; sprite[12] = 0;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     #$00
	ldy     #$0C
	sta     (ptr1),y
;
; sprite[15] |= OAM_FLIP_H;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$0F
	lda     (ptr1),y
	ora     #$40
;
; } else {
;
	jmp     L03F5
;
; sprite[0] = 0;
;
L01DA:	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     #$00
	dey
	sta     (ptr1),y
;
; sprite[3] &= ~OAM_FLIP_H;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$03
	lda     (ptr1),y
	and     #$BF
	sta     (ptr1),y
;
; sprite[4] = 8;
;
	dey
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     #$08
	ldy     #$04
	sta     (ptr1),y
;
; sprite[7] &= ~OAM_FLIP_H;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$07
	lda     (ptr1),y
	and     #$BF
	sta     (ptr1),y
;
; sprite[8] = 0;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     #$00
	ldy     #$08
	sta     (ptr1),y
;
; sprite[11] &= ~OAM_FLIP_H;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$0B
	lda     (ptr1),y
	and     #$BF
	sta     (ptr1),y
;
; sprite[12] = 8;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     #$08
	ldy     #$0C
	sta     (ptr1),y
;
; sprite[15] &= ~OAM_FLIP_H;  
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$0F
	lda     (ptr1),y
	and     #$BF
L03F5:	sta     (ptr1),y
;
; }
;
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ unrleCollision (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_unrleCollision: near

.segment	"CODE"

;
; u8 i = 0;
;
	lda     #$00
	jsr     pusha
;
; u8 j = 0;
;
	jsr     pusha
;
; u16 size = sizeof(test_nam_coll_rle); 
;
	lda     #$76
	jsr     pusha0
;
; u16 outPointer = 0;
;
	jsr     decsp2
	jsr     push0
;
; while ( i <= size ) {
;
	jmp     L0215
;
; currentByte = test_nam_coll_rle[i];
;
L0213:	ldy     #$07
	lda     (sp),y
	tay
	lda     _test_nam_coll_rle,y
	ldy     #$03
	sta     (sp),y
;
; ++i;
;
	ldy     #$07
	clc
	lda     #$01
	adc     (sp),y
	sta     (sp),y
;
; byteCount = test_nam_coll_rle[i];
;
	tay
	lda     _test_nam_coll_rle,y
	ldy     #$02
	sta     (sp),y
;
; ++i;
;
	ldy     #$07
	clc
	lda     #$01
	adc     (sp),y
	sta     (sp),y
;
; for ( j = 0; j < byteCount; ++j ) {
;
	lda     #$00
	dey
L03F6:	sta     (sp),y
	ldx     #$00
	lda     (sp),y
	ldy     #$02
	cmp     (sp),y
	bcs     L0215
;
; testColl[outPointer] = currentByte;
;
	lda     #<(_testColl)
	ldy     #$00
	clc
	adc     (sp),y
	sta     ptr1
	lda     #>(_testColl)
	iny
	adc     (sp),y
	sta     ptr1+1
	ldy     #$03
	lda     (sp),y
	ldy     #$00
	sta     (ptr1),y
;
; ++outPointer;
;
	lda     #$01
	jsr     addeq0sp
;
; for ( j = 0; j < byteCount; ++j ) {
;
	ldy     #$06
	clc
	lda     #$01
	adc     (sp),y
	jmp     L03F6
;
; while ( i <= size ) {
;
L0215:	ldy     #$07
	lda     (sp),y
	sec
	ldy     #$04
	sbc     (sp),y
	sta     tmp1
	txa
	iny
	sbc     (sp),y
	ora     tmp1
	bcc     L0213
	beq     L0213
;
; }
;
	jmp     incsp8

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ four_Sides (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_four_Sides: near

.segment	"CODE"

;
; void __fastcall__ four_Sides(u8 originX, u8 originY) {
;
	jsr     pusha
;
; if (originX < (255 - 1)){ // find the left side
;
	ldy     #$01
	lda     (sp),y
	cmp     #$FE
	bcs     L03FA
;
; X1_Left_Side = originX + 1;
;
	clc
	adc     #$01
;
; else {
;
	jmp     L03F7
;
; X1_Left_Side = 255;
;
L03FA:	lda     #$FF
L03F7:	sta     _X1_Left_Side
;
; if (originX < (255 - 15)){ // find the right side
;
	lda     (sp),y
	cmp     #$F0
	bcs     L03FB
;
; X1_Right_Side = originX + 15;
;
	clc
	adc     #$0F
;
; else {
;
	jmp     L03F8
;
; X1_Right_Side = 255;
;
L03FB:	lda     #$FF
L03F8:	sta     _X1_Right_Side
;
; Y1_Top = originY + 1; // our top is the same as the master Y
;
	dey
	lda     (sp),y
	clc
	adc     #$01
	sta     _Y1_Top
;
; if (originY < (255)){ // find the bottom side
;
	lda     (sp),y
	cmp     #$FF
	bcs     L03FC
;
; Y1_Bottom = originY + 16;
;
	clc
	adc     #$10
;
; else {
;
	jmp     L03F9
;
; Y1_Bottom = 255;
;
L03FC:	lda     #$FF
L03F9:	sta     _Y1_Bottom
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; unsigned int __near__ __fastcall__ getCollisionIndex (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_getCollisionIndex: near

.segment	"CODE"

;
; u16 __fastcall__ getCollisionIndex(u8 screenX, u8 screenY) {
;
	jsr     pusha
;
; return ((u16) screenX >> 3) + (((u16) screenY >> 3) << 5);
;
	ldy     #$01
	lda     (sp),y
	ldx     #$00
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	stx     ptr1+1
	lda     (sp,x)
	lsr     a
	lsr     a
	lsr     a
	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     ptr1
	pha
	lda     tmp1
	adc     ptr1+1
	tax
	pla
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ __fastcall__ collideCheckVertical (unsigned char, unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_collideCheckVertical: near

.segment	"CODE"

;
; u8 __fastcall__ collideCheckVertical(u8 originX, u8 originY, u8 direction) {
;
	jsr     pusha
;
; leftSide = originX + 1;
;
	ldy     #$02
	lda     (sp),y
	clc
	adc     #$01
	sta     _leftSide
;
; rightSide = originX + 15;
;
	lda     (sp),y
	clc
	adc     #$0F
	sta     _rightSide
;
; topSide = originY + 1;
;
	dey
	lda     (sp),y
	clc
	adc     #$01
	sta     _topSide
;
; bottomSide = originY + 16;
;
	lda     (sp),y
	clc
	adc     #$10
	sta     _bottomSide
;
; if ( ( (direction & PAD_UP) != 0) ) {
;
	dey
	lda     (sp),y
	and     #$10
	beq     L03FF
;
; testCorner = getCollisionIndex(rightSide, topSide);
;
	lda     _rightSide
	jsr     pusha
	lda     _topSide
	jsr     _getCollisionIndex
	sta     _testCorner
	stx     _testCorner+1
;
; if ( testColl[testCorner] == 0 ) {
;
	lda     #<(_testColl)
	sta     ptr1
	lda     #>(_testColl)
	clc
	adc     _testCorner+1
	sta     ptr1+1
	ldy     _testCorner
	lda     (ptr1),y
	bne     L026E
;
; testCorner = getCollisionIndex(leftSide, topSide);
;
	lda     _leftSide
	jsr     pusha
	lda     _topSide
;
; } else if ( (direction & PAD_DOWN) != 0 ) {
;
	jmp     L0401
L03FF:	lda     (sp),y
	and     #$20
	beq     L026E
;
; testCorner = getCollisionIndex(rightSide, bottomSide);
;
	lda     _rightSide
	jsr     pusha
	lda     _bottomSide
	jsr     _getCollisionIndex
	sta     _testCorner
	stx     _testCorner+1
;
; if ( testColl[testCorner] == 0 ) {
;
	lda     #<(_testColl)
	sta     ptr1
	lda     #>(_testColl)
	clc
	adc     _testCorner+1
	sta     ptr1+1
	ldy     _testCorner
	lda     (ptr1),y
	bne     L026E
;
; testCorner = getCollisionIndex(leftSide, bottomSide);
;
	lda     _leftSide
	jsr     pusha
	lda     _bottomSide
L0401:	jsr     _getCollisionIndex
	sta     _testCorner
	stx     _testCorner+1
;
; return testColl[testCorner];
;
L026E:	lda     #<(_testColl)
	sta     ptr1
	lda     #>(_testColl)
	clc
	adc     _testCorner+1
	sta     ptr1+1
	ldy     _testCorner
	ldx     #$00
	lda     (ptr1),y
;
; }
;
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ __fastcall__ collideCheckHorizontal (unsigned char, unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_collideCheckHorizontal: near

.segment	"CODE"

;
; u8 __fastcall__ collideCheckHorizontal(u8 originX, u8 originY, u8 direction) {
;
	jsr     pusha
;
; leftSide = originX + 1;
;
	ldy     #$02
	lda     (sp),y
	clc
	adc     #$01
	sta     _leftSide
;
; rightSide = originX + 15;
;
	lda     (sp),y
	clc
	adc     #$0F
	sta     _rightSide
;
; topSide = originY + 1;
;
	dey
	lda     (sp),y
	clc
	adc     #$01
	sta     _topSide
;
; bottomSide = originY + 16;
;
	lda     (sp),y
	clc
	adc     #$10
	sta     _bottomSide
;
; if ( ( (direction & PAD_LEFT) != 0 ) ) {
;
	dey
	lda     (sp),y
	and     #$40
	beq     L0404
;
; testCorner = getCollisionIndex(leftSide, topSide);
;
	lda     _leftSide
	jsr     pusha
	lda     _topSide
	jsr     _getCollisionIndex
	sta     _testCorner
	stx     _testCorner+1
;
; if ( testColl[testCorner] == 0 ) {
;
	lda     #<(_testColl)
	sta     ptr1
	lda     #>(_testColl)
	clc
	adc     _testCorner+1
	sta     ptr1+1
	ldy     _testCorner
	lda     (ptr1),y
	bne     L029D
;
; testCorner = getCollisionIndex(leftSide, bottomSide);
;
	lda     _leftSide
;
; } else if ( (direction & PAD_RIGHT) != 0 ) {
;
	jmp     L0408
L0404:	lda     (sp),y
	and     #$80
	beq     L029D
;
; testCorner = getCollisionIndex(rightSide, topSide);
;
	lda     _rightSide
	jsr     pusha
	lda     _topSide
	jsr     _getCollisionIndex
	sta     _testCorner
	stx     _testCorner+1
;
; if ( testColl[testCorner] == 0 ) {
;
	lda     #<(_testColl)
	sta     ptr1
	lda     #>(_testColl)
	clc
	adc     _testCorner+1
	sta     ptr1+1
	ldy     _testCorner
	lda     (ptr1),y
	bne     L029D
;
; testCorner = getCollisionIndex(rightSide, bottomSide);
;
	lda     _rightSide
L0408:	jsr     pusha
	lda     _bottomSide
	jsr     _getCollisionIndex
	sta     _testCorner
	stx     _testCorner+1
;
; return testColl[testCorner];
;
L029D:	lda     #<(_testColl)
	sta     ptr1
	lda     #>(_testColl)
	clc
	adc     _testCorner+1
	sta     ptr1+1
	ldy     _testCorner
	ldx     #$00
	lda     (ptr1),y
;
; }
;
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ bgVertCollideCheck (__near__ unsigned char *, __near__ unsigned char *, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bgVertCollideCheck: near

.segment	"CODE"

;
; void __fastcall__ bgVertCollideCheck(u8 *x, u8 *y, u8 dir) {
;
	jsr     pusha
;
; u8 colliding = collideCheckVertical(*x, *y, dir);
;
	jsr     decsp2
	ldy     #$06
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	iny
	sta     (sp),y
	ldy     #$04
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	sta     (sp),y
	ldy     #$02
	lda     (sp),y
	jsr     _collideCheckVertical
	jsr     pusha
;
; if ( colliding == 1 ) {
;
	ldy     #$00
	lda     (sp),y
	cmp     #$01
	bne     L02BD
;
; if ( dir & PAD_UP ) {
;
	iny
	lda     (sp),y
	and     #$10
	beq     L040B
;
; *y = (*y & 0xf8) + 7;
;
	ldy     #$05
	jsr     pushwysp
	ldy     #$05
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	and     #$F8
	clc
	adc     #$07
;
; } else if ( dir & PAD_DOWN ) {
;
	jmp     L0409
L040B:	lda     (sp),y
	and     #$20
	beq     L02BD
;
; *y = (*y & 0xf8) - 1;
;
	ldy     #$05
	jsr     pushwysp
	ldy     #$05
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	and     #$F8
	sec
	sbc     #$01
L0409:	jsr     staspidx
;
; }
;
L02BD:	jmp     incsp6

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ bgHorizCollideCheck (__near__ unsigned char *, __near__ unsigned char *, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bgHorizCollideCheck: near

.segment	"CODE"

;
; void __fastcall__ bgHorizCollideCheck(u8 *x, u8 *y, u8 dir) {
;
	jsr     pusha
;
; u8 colliding = collideCheckHorizontal(*x, *y, dir);
;
	jsr     decsp2
	ldy     #$06
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	iny
	sta     (sp),y
	ldy     #$04
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	sta     (sp),y
	ldy     #$02
	lda     (sp),y
	jsr     _collideCheckHorizontal
	jsr     pusha
;
; if ( colliding == 1 ) {
;
	ldy     #$00
	lda     (sp),y
	cmp     #$01
	bne     L02D1
;
; if ( dir & PAD_LEFT ) {
;
	iny
	lda     (sp),y
	and     #$40
	beq     L040E
;
; *x = (*x & 0xf8) + 8;
;
	ldy     #$07
	jsr     pushwysp
	ldy     #$07
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	and     #$F8
	clc
	adc     #$08
;
; } else if ( dir & PAD_RIGHT ) {
;
	jmp     L040C
L040E:	lda     (sp),y
	and     #$80
	beq     L02D1
;
; *x = (*x & 0xf8);
;
	ldy     #$07
	jsr     pushwysp
	ldy     #$07
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	and     #$F8
L040C:	jsr     staspidx
;
; }
;
L02D1:	jmp     incsp6

.endproc

; ---------------------------------------------------------------
; void __near__ updateEnemies (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updateEnemies: near

.segment	"CODE"

;
; for ( i = 0; i < NUM_ENEMIES; i++ ) {
;
	jsr     decsp1
	lda     #$00
	tay
L0413:	sta     (sp),y
	cmp     #$04
	bcc     L0414
;
; }
;
	jmp     incsp1
;
; if ( enemyData[i].direction == PAD_RIGHT ) {
;
L0414:	ldx     #$00
	lda     (sp),y
	jsr     aslax3
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	ldy     #$03
	lda     (ptr1),y
	cmp     #$80
	jne     L02DF
;
; enemyData[i].x += 1;
;
	ldy     #$00
	ldx     #$00
	lda     (sp),y
	jsr     aslax3
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	lda     (ptr1),y
	clc
	adc     #$01
	sta     (ptr1),y
;
; if ( collideCheckHorizontal(enemyData[i].x, enemyData[i].y, PAD_RIGHT) ) {
;
	jsr     decsp2
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	jsr     aslax3
	sta     ptr1
	txa
	clc
	adc     #>(_enemyData)
	sta     ptr1+1
	ldy     #<(_enemyData)
	lda     (ptr1),y
	ldy     #$01
	sta     (sp),y
	iny
	ldx     #$00
	lda     (sp),y
	jsr     aslax3
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	dey
	lda     (ptr1),y
	dey
	sta     (sp),y
	lda     #$80
	jsr     _collideCheckHorizontal
	tax
	jeq     L02D9
;
; flipSprite(enemySpriteData[i], 0);
;
	ldx     #$00
	lda     (sp,x)
	jsr     pusha0
	lda     #$11
	jsr     tosmula0
	clc
	adc     #<(_enemySpriteData)
	tay
	txa
	adc     #>(_enemySpriteData)
	tax
	tya
	jsr     pushax
	lda     #$00
	jsr     _flipSprite
;
; enemyData[i].direction = PAD_LEFT;
;
	ldx     #$00
	lda     (sp,x)
	jsr     aslax3
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	lda     #$40
;
; } else {
;
	jmp     L0412
;
; enemyData[i].x -= 1;
;
L02DF:	ldy     #$00
	ldx     #$00
	lda     (sp),y
	jsr     aslax3
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; if ( collideCheckHorizontal(enemyData[i].x, enemyData[i].y, PAD_LEFT) ) {
;
	jsr     decsp2
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	jsr     aslax3
	sta     ptr1
	txa
	clc
	adc     #>(_enemyData)
	sta     ptr1+1
	ldy     #<(_enemyData)
	lda     (ptr1),y
	ldy     #$01
	sta     (sp),y
	iny
	ldx     #$00
	lda     (sp),y
	jsr     aslax3
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	dey
	lda     (ptr1),y
	dey
	sta     (sp),y
	lda     #$40
	jsr     _collideCheckHorizontal
	tax
	beq     L02D9
;
; flipSprite(enemySpriteData[i], 1);
;
	ldx     #$00
	lda     (sp,x)
	jsr     pusha0
	lda     #$11
	jsr     tosmula0
	clc
	adc     #<(_enemySpriteData)
	tay
	txa
	adc     #>(_enemySpriteData)
	tax
	tya
	jsr     pushax
	lda     #$01
	jsr     _flipSprite
;
; enemyData[i].direction = PAD_RIGHT;
;
	ldx     #$00
	lda     (sp,x)
	jsr     aslax3
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	lda     #$80
L0412:	ldy     #$03
	sta     (ptr1),y
;
; for ( i = 0; i < NUM_ENEMIES; i++ ) {
;
L02D9:	ldy     #$00
	lda     (sp),y
	clc
	adc     #$01
	jmp     L0413

.endproc

; ---------------------------------------------------------------
; void __near__ playerEnemyCollideCheck (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_playerEnemyCollideCheck: near

.segment	"CODE"

;
; playerEnemyColliding = 0;
;
	jsr     decsp5
	lda     #$00
	sta     _playerEnemyColliding
;
; for ( j = 0; j < NUM_ENEMIES; ++j ) {
;
	tay
L0415:	sta     (sp),y
	cmp     #$04
	bcc     L0417
;
; }
;
	jmp     incsp5
;
; enemyTop = enemyData[j].y + 2;
;
L0417:	ldx     #$00
	lda     (sp),y
	jsr     aslax3
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	clc
	adc     #$02
	ldy     #$04
	sta     (sp),y
;
; enemyBottom = enemyData[j].y + 14;
;
	ldx     #$00
	lda     (sp,x)
	jsr     aslax3
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	clc
	adc     #$0E
	ldy     #$03
	sta     (sp),y
;
; enemyLeft = enemyData[j].x + 2;
;
	ldx     #$00
	lda     (sp,x)
	jsr     aslax3
	sta     ptr1
	txa
	clc
	adc     #>(_enemyData)
	sta     ptr1+1
	ldy     #<(_enemyData)
	lda     (ptr1),y
	clc
	adc     #$02
	ldy     #$02
	sta     (sp),y
;
; enemyRight = enemyData[j].x + 14;
;
	ldx     #$00
	lda     (sp,x)
	jsr     aslax3
	sta     ptr1
	txa
	clc
	adc     #>(_enemyData)
	sta     ptr1+1
	ldy     #<(_enemyData)
	lda     (ptr1),y
	clc
	adc     #$0E
	ldy     #$01
	sta     (sp),y
;
; if ( !( X1_Right_Side < enemyLeft  || 
;
	lda     _X1_Right_Side
	iny
	cmp     (sp),y
	bcc     L0416
;
; X1_Left_Side >= enemyRight || 
;
	lda     _X1_Left_Side
	dey
	cmp     (sp),y
	bcs     L0416
;
; Y1_Bottom <  enemyTop || 
;
	lda     _Y1_Bottom
	ldy     #$04
	cmp     (sp),y
	bcc     L0416
;
; Y1_Top    >= enemyBottom ) ) {
;
	lda     _Y1_Top
	dey
	cmp     (sp),y
	bcs     L0416
	lda     #$00
	jmp     L0323
L0416:	lda     #$01
L0323:	jsr     bnega
	beq     L030A
;
; playerEnemyColliding = 1;
;
	lda     #$01
	sta     _playerEnemyColliding
;
; for ( j = 0; j < NUM_ENEMIES; ++j ) {
;
L030A:	ldy     #$00
	clc
	lda     #$01
	adc     (sp),y
	jmp     L0415

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; memcpy(palSprites, paldat, 16);
;
	jsr     decsp1
	ldy     #$0F
L032B:	lda     _paldat,y
	sta     _palSprites,y
	dey
	bpl     L032B
;
; memcpy(palBG, paldat, 4);
;
	ldy     #$03
L0330:	lda     _paldat,y
	sta     _palBG,y
	dey
	bpl     L0330
;
; unrleCollision();
;
	jsr     _unrleCollision
;
; pal_spr(palSprites);
;
	lda     #<(_palSprites)
	ldx     #>(_palSprites)
	jsr     _pal_spr
;
; pal_bg(palBG);
;
	lda     #<(_palBG)
	ldx     #>(_palBG)
	jsr     _pal_bg
;
; vram_adr(NAMETABLE_A); //unpack nametable into VRAM
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(test_nam); 
;
	lda     #<(_test_nam)
	ldx     #>(_test_nam)
	jsr     _vram_unrle
;
; ppu_on_all(); //enable rendering
;
	jsr     _ppu_on_all
;
; player_x = 52;
;
	lda     #$34
	sta     _player_x
;
; player_y = 100;
;
	lda     #$64
	sta     _player_y
;
; playerDir = PAD_RIGHT;
;
	lda     #$80
	sta     _playerDir
;
; enemy_x = enemyInitX;
;
	lda     _enemyInitX
	sta     _enemy_x
;
; enemy_y = enemyInitY;
;
	lda     _enemyInitY
	sta     _enemy_y
;
; touch = 0; // collision flag
;
	lda     #$00
	sta     _touch
;
; frame = 0; // frame counter
;
	sta     _frame
;
; playerFrame = 0;
;
	sta     _playerFrame
;
; setFrame(playerSpriteData, playerFrames[playerFrame]);
;
	lda     #<(_playerSpriteData)
	ldx     #>(_playerSpriteData)
	jsr     pushax
	ldx     #$00
	lda     _playerFrame
	jsr     aslax2
	clc
	adc     #<(_playerFrames)
	tay
	txa
	adc     #>(_playerFrames)
	tax
	tya
	jsr     _setFrame
;
; for ( i = 0; i < NUM_ENEMIES; ++i ) {
;
	lda     #$00
	sta     _i
L041C:	lda     _i
	cmp     #$04
	jcs     L037E
;
; enemyData[i].x = enemyData[i].initX;
;
	ldx     #$00
	lda     _i
	jsr     aslax3
	clc
	adc     #<(_enemyData)
	sta     sreg
	txa
	adc     #>(_enemyData)
	sta     sreg+1
	ldx     #$00
	lda     _i
	jsr     aslax3
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	ldy     #$05
	lda     (ptr1),y
	ldy     #$00
	sta     (sreg),y
;
; enemyData[i].y = enemyData[i].initY;
;
	ldx     #$00
	lda     _i
	jsr     aslax3
	clc
	adc     #<(_enemyData)
	sta     sreg
	txa
	adc     #>(_enemyData)
	sta     sreg+1
	ldx     #$00
	lda     _i
	jsr     aslax3
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	ldy     #$06
	lda     (ptr1),y
	ldy     #$01
	sta     (sreg),y
;
; enemyData[i].direction = enemyData[i].initDir;
;
	ldx     #$00
	lda     _i
	jsr     aslax3
	clc
	adc     #<(_enemyData)
	sta     sreg
	txa
	adc     #>(_enemyData)
	sta     sreg+1
	ldx     #$00
	lda     _i
	jsr     aslax3
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	ldy     #$07
	lda     (ptr1),y
	ldy     #$03
	sta     (sreg),y
;
; for ( j = 0; j < ENEMY_DATA_SIZE; ++j ) {
;
	lda     #$00
	tay
L0419:	sta     (sp),y
	ldx     #$00
	lda     (sp),y
	cmp     #$11
	bcs     L041D
;
; enemySpriteData[i][j] = enemySpriteDataTemplate[j];
;
	lda     _i
	jsr     pusha0
	lda     #$11
	jsr     tosmula0
	clc
	adc     #<(_enemySpriteData)
	sta     ptr1
	txa
	adc     #>(_enemySpriteData)
	sta     ptr1+1
	ldy     #$00
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0418
	inx
L0418:	jsr     pushax
	ldy     #$02
	lda     (sp),y
	tay
	lda     _enemySpriteDataTemplate,y
	ldy     #$00
	jsr     staspidx
;
; for ( j = 0; j < ENEMY_DATA_SIZE; ++j ) {
;
	ldy     #$00
	clc
	lda     #$01
	adc     (sp),y
	jmp     L0419
;
; if ( enemyData[i].direction == PAD_RIGHT ) {
;
L041D:	lda     _i
	jsr     aslax3
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	ldy     #$03
	lda     (ptr1),y
	cmp     #$80
	bne     L041E
;
; flipSprite(enemySpriteData[i], PAD_RIGHT);
;
	lda     _i
	jsr     pusha0
	lda     #$11
	jsr     tosmula0
	clc
	adc     #<(_enemySpriteData)
	tay
	txa
	adc     #>(_enemySpriteData)
	tax
	tya
	jsr     pushax
	lda     #$80
	jsr     _flipSprite
;
; setFrame(enemySpriteData[i], enemyFrames[enemyData[i].frame]);
;
L041E:	lda     _i
	jsr     pusha0
	lda     #$11
	jsr     tosmula0
	clc
	adc     #<(_enemySpriteData)
	tay
	txa
	adc     #>(_enemySpriteData)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _i
	jsr     aslax3
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	ldy     #$02
	ldx     #$00
	lda     (ptr1),y
	jsr     aslax2
	clc
	adc     #<(_enemyFrames)
	tay
	txa
	adc     #>(_enemyFrames)
	tax
	tya
	jsr     _setFrame
;
; for ( i = 0; i < NUM_ENEMIES; ++i ) {
;
	inc     _i
	jmp     L041C
;
; ppu_wait_frame(); // wait for next TV frame
;
L037E:	jsr     _ppu_wait_frame
;
; spr = 0;
;
	lda     #$00
	sta     _spr
;
; i = 0;
;
	sta     _i
;
; pad = pad_poll(i);
;
	jsr     _pad_poll
	sta     _pad
;
; if ( pad & PAD_RIGHT ) {
;
	and     #$80
	beq     L041F
;
; flipSprite(playerSpriteData, 1);
;
	lda     #<(_playerSpriteData)
	ldx     #>(_playerSpriteData)
	jsr     pushax
	lda     #$01
;
; } else if ( pad & PAD_LEFT ) {
;
	jmp     L041A
L041F:	lda     _pad
	and     #$40
	beq     L0420
;
; flipSprite(playerSpriteData, 0);
;
	lda     #<(_playerSpriteData)
	ldx     #>(_playerSpriteData)
	jsr     pushax
	lda     #$00
L041A:	jsr     _flipSprite
;
; if ( ( frame & 0x0F ) == 0x0F ) {
;
L0420:	lda     _frame
	and     #$0F
	cmp     #$0F
	bne     L0395
;
; playerFrame ^= 1;
;
	lda     _playerFrame
	eor     #$01
	sta     _playerFrame
;
; setFrame(playerSpriteData, playerFrames[playerFrame]);
;
	lda     #<(_playerSpriteData)
	ldx     #>(_playerSpriteData)
	jsr     pushax
	ldx     #$00
	lda     _playerFrame
	jsr     aslax2
	clc
	adc     #<(_playerFrames)
	tay
	txa
	adc     #>(_playerFrames)
	tax
	tya
	jsr     _setFrame
;
; spr = oam_meta_spr(player_x, player_y, spr, playerSpriteData);
;
L0395:	jsr     decsp3
	lda     _player_x
	ldy     #$02
	sta     (sp),y
	lda     _player_y
	dey
	sta     (sp),y
	lda     _spr
	dey
	sta     (sp),y
	lda     #<(_playerSpriteData)
	ldx     #>(_playerSpriteData)
	jsr     _oam_meta_spr
	sta     _spr
;
; for ( i = 0; i < NUM_ENEMIES; ++i ) {
;
	lda     #$00
	sta     _i
L0421:	lda     _i
	cmp     #$04
	jcs     L03A6
;
; if ( ( frame & 0x0F ) == 0x0F ) {
;
	lda     _frame
	and     #$0F
	cmp     #$0F
	bne     L03AD
;
; enemyData[i].frame ^= 1;
;
	ldx     #$00
	lda     _i
	jsr     aslax3
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	eor     #$01
	sta     (ptr1),y
;
; setFrame(enemySpriteData[i], enemyFrames[enemyData[i].frame]);
;
	lda     _i
	jsr     pusha0
	lda     #$11
	jsr     tosmula0
	clc
	adc     #<(_enemySpriteData)
	tay
	txa
	adc     #>(_enemySpriteData)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _i
	jsr     aslax3
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	ldy     #$02
	ldx     #$00
	lda     (ptr1),y
	jsr     aslax2
	clc
	adc     #<(_enemyFrames)
	tay
	txa
	adc     #>(_enemyFrames)
	tax
	tya
	jsr     _setFrame
;
; spr = oam_meta_spr(enemyData[i].x, enemyData[i].y, spr, enemySpriteData[i]); 
;
L03AD:	jsr     decsp3
	ldx     #$00
	lda     _i
	jsr     aslax3
	sta     ptr1
	txa
	clc
	adc     #>(_enemyData)
	sta     ptr1+1
	ldy     #<(_enemyData)
	lda     (ptr1),y
	ldy     #$02
	sta     (sp),y
	ldx     #$00
	lda     _i
	jsr     aslax3
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	dey
	lda     (ptr1),y
	sta     (sp),y
	lda     _spr
	dey
	sta     (sp),y
	lda     _i
	jsr     pusha0
	lda     #$11
	jsr     tosmula0
	clc
	adc     #<(_enemySpriteData)
	tay
	txa
	adc     #>(_enemySpriteData)
	tax
	tya
	jsr     _oam_meta_spr
	sta     _spr
;
; for ( i = 0; i < NUM_ENEMIES; ++i ) {
;
	inc     _i
	jmp     L0421
;
; updateEnemies();
;
L03A6:	jsr     _updateEnemies
;
; playerDir = pad;
;
	lda     _pad
	sta     _playerDir
;
; if ( pad&PAD_LEFT  && player_x > 0 ) {
;
	lda     _pad
	and     #$40
	beq     L0425
	lda     _player_x
	beq     L0425
;
; player_x -= 2;
;
	sec
	sbc     #$02
	sta     _player_x
;
; if ( pad&PAD_RIGHT && player_x < 240 ) {
;
L0425:	lda     _pad
	and     #$80
	beq     L03CC
	lda     _player_x
	cmp     #$F0
	bcs     L03CC
;
; player_x += 2;
;
	lda     #$02
	clc
	adc     _player_x
	sta     _player_x
;
; bgHorizCollideCheck(&player_x, &player_y, playerDir);
;
L03CC:	jsr     decsp4
	lda     #<(_player_x)
	ldy     #$02
	sta     (sp),y
	iny
	lda     #>(_player_x)
	sta     (sp),y
	lda     #<(_player_y)
	ldy     #$00
	sta     (sp),y
	iny
	lda     #>(_player_y)
	sta     (sp),y
	lda     _playerDir
	jsr     _bgHorizCollideCheck
;
; if ( pad&PAD_UP    && player_y > 0 ) { 
;
	lda     _pad
	and     #$10
	beq     L042C
	lda     _player_y
	beq     L042C
;
; player_y -= 2;
;
	sec
	sbc     #$02
	sta     _player_y
;
; if ( pad&PAD_DOWN  && player_y < 220 ) {
;
L042C:	lda     _pad
	and     #$20
	beq     L03DC
	lda     _player_y
	cmp     #$DC
	bcs     L03DC
;
; player_y += 2;
;
	lda     #$02
	clc
	adc     _player_y
	sta     _player_y
;
; bgVertCollideCheck(&player_x, &player_y, playerDir);
;
L03DC:	jsr     decsp4
	lda     #<(_player_x)
	ldy     #$02
	sta     (sp),y
	iny
	lda     #>(_player_x)
	sta     (sp),y
	lda     #<(_player_y)
	ldy     #$00
	sta     (sp),y
	iny
	lda     #>(_player_y)
	sta     (sp),y
	lda     _playerDir
	jsr     _bgVertCollideCheck
;
; four_Sides(player_x, player_y); 
;
	lda     _player_x
	jsr     pusha
	lda     _player_y
	jsr     _four_Sides
;
; playerEnemyCollideCheck();
;
	jsr     _playerEnemyCollideCheck
;
; if ( playerEnemyColliding ) {
;
	lda     _playerEnemyColliding
	beq     L03EA
;
; setPalette(playerSpriteData, 0x0);
;
	lda     #<(_playerSpriteData)
	ldx     #>(_playerSpriteData)
	jsr     pushax
	lda     #$00
;
; } else {
;
	jmp     L041B
;
; setPalette(playerSpriteData, 0x2);
;
L03EA:	lda     #<(_playerSpriteData)
	ldx     #>(_playerSpriteData)
	jsr     pushax
	lda     #$02
L041B:	jsr     _setPalette
;
; ++frame;
;
	inc     _frame
;
; while ( 1 )
;
	jmp     L037E

.endproc

