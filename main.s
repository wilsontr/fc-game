;
; File generated by cc65 v 2.16 - Git N/A
;
	.fopt		compiler,"cc65 v 2.16 - Git N/A"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_ppu_wait_frame
	.import		_ppu_on_all
	.import		_oam_meta_spr
	.import		_pad_poll
	.import		_vram_adr
	.import		_vram_unrle
	.export		_test_nam
	.export		_test_nam_coll_rle
	.export		_oam_off
	.export		_testColl
	.export		_X1_Right_Side
	.export		_X1_Left_Side
	.export		_Y1_Bottom
	.export		_Y1_Top
	.export		_corner
	.export		_testSprite
	.export		_palSprites
	.export		_palSpritesAlt
	.export		_palBG
	.export		_unrleCollision
	.export		_four_Sides
	.export		_getCollisionIndex
	.export		_collide_Check_LR
	.export		_collide_Check_UD
	.export		_checkCollision
	.export		_main

.segment	"DATA"

.segment	"ZEROPAGE"
.segment	"DATA"

.segment	"RODATA"

_test_nam:
	.byte	$01
	.byte	$40
	.byte	$01
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$0A
	.byte	$41
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$0D
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$0E
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$0E
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$0D
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$12
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$40
	.byte	$40
	.byte	$50
	.byte	$00
	.byte	$01
	.byte	$13
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$40
	.byte	$40
	.byte	$50
	.byte	$00
	.byte	$01
	.byte	$1C
	.byte	$40
	.byte	$40
	.byte	$50
	.byte	$00
	.byte	$01
	.byte	$1C
	.byte	$40
	.byte	$40
	.byte	$50
	.byte	$00
	.byte	$01
	.byte	$1C
	.byte	$40
	.byte	$40
	.byte	$50
	.byte	$00
	.byte	$01
	.byte	$1C
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$19
	.byte	$41
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1A
	.byte	$41
	.byte	$01
	.byte	$02
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$40
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$40
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$40
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$41
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$41
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$41
	.byte	$01
	.byte	$06
	.byte	$00
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$41
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$16
	.byte	$40
	.byte	$01
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$3E
	.byte	$00
	.byte	$01
	.byte	$00
_test_nam_coll_rle:
	.byte	$01
	.byte	$41
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$03
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$06
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$03
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1E
_testSprite:
	.byte	$00
	.byte	$00
	.byte	$20
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$21
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$22
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$23
	.byte	$00
	.byte	$80
_palSprites:
	.byte	$0F
	.byte	$22
	.byte	$25
	.byte	$24
_palSpritesAlt:
	.byte	$0F
	.byte	$1B
	.byte	$19
	.byte	$29
_palBG:
	.byte	$0F
	.byte	$06
	.byte	$17
	.byte	$16

.segment	"BSS"

.segment	"ZEROPAGE"
.segment	"BSS"
.segment	"ZEROPAGE"
_oam_off:
	.res	1,$00
.segment	"BSS"
_player_x:
	.res	1,$00
.segment	"BSS"
_player_y:
	.res	1,$00
.segment	"BSS"
_colliding:
	.res	1,$00
.segment	"BSS"
_i:
	.res	1,$00
.segment	"BSS"
_pad:
	.res	1,$00
.segment	"BSS"
_spr:
	.res	1,$00
.segment	"BSS"
_touch:
	.res	1,$00
.segment	"BSS"
_frame:
	.res	1,$00
.segment	"BSS"
_testColl:
	.res	960,$00
.segment	"BSS"
_X1_Right_Side:
	.res	1,$00
.segment	"BSS"
_X1_Left_Side:
	.res	1,$00
.segment	"BSS"
_Y1_Bottom:
	.res	1,$00
.segment	"BSS"
_Y1_Top:
	.res	1,$00
.segment	"BSS"
_corner:
	.res	2,$00

; ---------------------------------------------------------------
; void __near__ unrleCollision (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_unrleCollision: near

.segment	"CODE"

;
; u8 i = 0;
;
	lda     #$00
	jsr     pusha
;
; u8 j = 0;
;
	jsr     pusha
;
; u8 size = sizeof(test_nam_coll_rle);
;
	lda     #$74
	jsr     pusha
;
; u16 outPointer = 0;
;
	jsr     decsp2
	jsr     push0
;
; while ( i < size ) {
;
	jmp     L017D
;
; currentByte = test_nam_coll_rle[i];
;
L017B:	ldy     #$06
	lda     (sp),y
	tay
	lda     _test_nam_coll_rle,y
	ldy     #$03
	sta     (sp),y
;
; ++i;
;
	ldy     #$06
	clc
	lda     #$01
	adc     (sp),y
	sta     (sp),y
;
; byteCount = test_nam_coll_rle[i];
;
	tay
	lda     _test_nam_coll_rle,y
	ldy     #$02
	sta     (sp),y
;
; ++i;
;
	ldy     #$06
	clc
	lda     #$01
	adc     (sp),y
	sta     (sp),y
;
; for ( j = 0; j < byteCount; ++j ) {
;
	lda     #$00
	dey
L0275:	sta     (sp),y
	ldy     #$02
	cmp     (sp),y
	bcs     L017D
;
; testColl[outPointer] = currentByte;
;
	lda     #<(_testColl)
	ldy     #$00
	clc
	adc     (sp),y
	sta     ptr1
	lda     #>(_testColl)
	iny
	adc     (sp),y
	sta     ptr1+1
	ldy     #$03
	lda     (sp),y
	ldy     #$00
	sta     (ptr1),y
;
; ++outPointer;
;
	ldx     #$00
	lda     #$01
	jsr     addeq0sp
;
; for ( j = 0; j < byteCount; ++j ) {
;
	ldy     #$05
	clc
	lda     #$01
	adc     (sp),y
	jmp     L0275
;
; while ( i < size ) {
;
L017D:	ldy     #$06
	lda     (sp),y
	ldy     #$04
	cmp     (sp),y
	bcc     L017B
;
; }
;
	jmp     incsp7

.endproc

; ---------------------------------------------------------------
; void __near__ four_Sides (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_four_Sides: near

.segment	"CODE"

;
; if (player_x < (255 - 1)){ // find the left side
;
	lda     _player_x
	cmp     #$FE
	bcs     L0279
;
; X1_Left_Side = player_x + 1;
;
	clc
	adc     #$01
;
; else {
;
	jmp     L0276
;
; X1_Left_Side = 255;
;
L0279:	lda     #$FF
L0276:	sta     _X1_Left_Side
;
; if (player_x < (255 - 13)){ // find the right side
;
	lda     _player_x
	cmp     #$F2
	bcs     L027A
;
; X1_Right_Side = player_x + 13;
;
	clc
	adc     #$0D
;
; else {
;
	jmp     L0277
;
; X1_Right_Side = 255;
;
L027A:	lda     #$FF
L0277:	sta     _X1_Right_Side
;
; Y1_Top = player_y + 1; // our top is the same as the master Y
;
	lda     _player_y
	clc
	adc     #$01
	sta     _Y1_Top
;
; if (player_y < (255)){ // find the bottom side
;
	lda     _player_y
	cmp     #$FF
	bcs     L027B
;
; Y1_Bottom = player_y + 15;
;
	clc
	adc     #$0F
;
; else {
;
	jmp     L0278
;
; Y1_Bottom = 255;
;
L027B:	lda     #$FF
L0278:	sta     _Y1_Bottom
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; unsigned int __near__ __fastcall__ getCollisionIndex (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_getCollisionIndex: near

.segment	"CODE"

;
; u16 __fastcall__ getCollisionIndex(u8 screenX, u8 screenY) {
;
	jsr     pusha
;
; return ((u16) screenX >> 3) + (((u16) screenY >> 3) << 5);
;
	ldy     #$01
	lda     (sp),y
	ldx     #$00
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	stx     ptr1+1
	lda     (sp,x)
	lsr     a
	lsr     a
	lsr     a
	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     ptr1
	pha
	lda     tmp1
	adc     ptr1+1
	tax
	pla
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ collide_Check_LR (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_collide_Check_LR: near

.segment	"CODE"

;
; four_Sides(); // set the L R bottom top variables
;
	jsr     _four_Sides
;
; if ((pad & PAD_RIGHT) != 0){  // first check right
;
	lda     _pad
	and     #$80
	beq     L027D
;
; corner = getCollisionIndex(X1_Right_Side, Y1_Top); // top right
;
	lda     _X1_Right_Side
	jsr     pusha
	lda     _Y1_Top
	jsr     _getCollisionIndex
	sta     _corner
	stx     _corner+1
;
; if (testColl[corner] != 0)
;
	lda     #<(_testColl)
	sta     ptr1
	lda     #>(_testColl)
	clc
	adc     _corner+1
	sta     ptr1+1
	ldy     _corner
	lda     (ptr1),y
	beq     L01C3
;
; player_x = (player_x & 0xf8) + 1; // if collision, realign
;
	lda     _player_x
	and     #$F8
	clc
	adc     #$01
	sta     _player_x
;
; corner = getCollisionIndex(X1_Right_Side, Y1_Bottom); // bottom right
;
L01C3:	lda     _X1_Right_Side
	jsr     pusha
	lda     _Y1_Bottom
	jsr     _getCollisionIndex
	sta     _corner
	stx     _corner+1
;
; if (testColl[corner] != 0)
;
	lda     #<(_testColl)
	sta     ptr1
	lda     #>(_testColl)
	clc
	adc     _corner+1
	sta     ptr1+1
	ldy     _corner
	lda     (ptr1),y
	beq     L01E9
;
; player_x = (player_x & 0xf8) + 1; // if collision, realign
;
	lda     _player_x
	and     #$F8
	clc
	adc     #$01
;
; else if ((pad & PAD_LEFT) != 0){ // check left
;
	jmp     L027C
L027D:	lda     _pad
	and     #$40
	beq     L01E9
;
; corner = getCollisionIndex(X1_Left_Side, Y1_Top); // top left
;
	lda     _X1_Left_Side
	jsr     pusha
	lda     _Y1_Top
	jsr     _getCollisionIndex
	sta     _corner
	stx     _corner+1
;
; if (testColl[corner] != 0)
;
	lda     #<(_testColl)
	sta     ptr1
	lda     #>(_testColl)
	clc
	adc     _corner+1
	sta     ptr1+1
	ldy     _corner
	lda     (ptr1),y
	beq     L01DE
;
; player_x = (player_x & 0xf8) + 7; // if collision, realign
;
	lda     _player_x
	and     #$F8
	clc
	adc     #$07
	sta     _player_x
;
; corner = getCollisionIndex(X1_Left_Side, Y1_Bottom); // bottom left
;
L01DE:	lda     _X1_Left_Side
	jsr     pusha
	lda     _Y1_Bottom
	jsr     _getCollisionIndex
	sta     _corner
	stx     _corner+1
;
; if (testColl[corner] != 0)
;
	lda     #<(_testColl)
	sta     ptr1
	lda     #>(_testColl)
	clc
	adc     _corner+1
	sta     ptr1+1
	ldy     _corner
	lda     (ptr1),y
	beq     L01E9
;
; player_x = (player_x & 0xf8) + 7; // if collision, realign
;
	lda     _player_x
	and     #$F8
	clc
	adc     #$07
L027C:	sta     _player_x
;
; }
;
L01E9:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ collide_Check_UD (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_collide_Check_UD: near

.segment	"CODE"

;
; four_Sides();
;
	jsr     _four_Sides
;
; if ((pad & PAD_DOWN) != 0){ // down first
;
	lda     _pad
	and     #$20
	beq     L027F
;
; corner = getCollisionIndex(X1_Right_Side, Y1_Bottom); // bottom right
;
	lda     _X1_Right_Side
	jsr     pusha
	lda     _Y1_Bottom
	jsr     _getCollisionIndex
	sta     _corner
	stx     _corner+1
;
; if (testColl[corner] != 0)
;
	lda     #<(_testColl)
	sta     ptr1
	lda     #>(_testColl)
	clc
	adc     _corner+1
	sta     ptr1+1
	ldy     _corner
	lda     (ptr1),y
	beq     L01FA
;
; player_y = (player_y & 0xf8); // if collision, realign
;
	lda     _player_y
	and     #$F8
	sta     _player_y
;
; corner = getCollisionIndex(X1_Left_Side, Y1_Bottom); // bottom left
;
L01FA:	lda     _X1_Left_Side
	jsr     pusha
	lda     _Y1_Bottom
	jsr     _getCollisionIndex
	sta     _corner
	stx     _corner+1
;
; if (testColl[corner] != 0)
;
	lda     #<(_testColl)
	sta     ptr1
	lda     #>(_testColl)
	clc
	adc     _corner+1
	sta     ptr1+1
	ldy     _corner
	lda     (ptr1),y
	beq     L021E
;
; player_y = (player_y & 0xf8); // if collision, realign
;
	lda     _player_y
	and     #$F8
;
; else if ((pad & PAD_UP) != 0) { //or up
;
	jmp     L027E
L027F:	lda     _pad
	and     #$10
	beq     L021E
;
; corner = getCollisionIndex(X1_Right_Side, Y1_Top); // top right
;
	lda     _X1_Right_Side
	jsr     pusha
	lda     _Y1_Top
	jsr     _getCollisionIndex
	sta     _corner
	stx     _corner+1
;
; if (testColl[corner] != 0)
;
	lda     #<(_testColl)
	sta     ptr1
	lda     #>(_testColl)
	clc
	adc     _corner+1
	sta     ptr1+1
	ldy     _corner
	lda     (ptr1),y
	beq     L0213
;
; player_y = (player_y & 0xf8) + 7; // if collision, realign
;
	lda     _player_y
	and     #$F8
	clc
	adc     #$07
	sta     _player_y
;
; corner = getCollisionIndex(X1_Left_Side, Y1_Top);  // top left
;
L0213:	lda     _X1_Left_Side
	jsr     pusha
	lda     _Y1_Top
	jsr     _getCollisionIndex
	sta     _corner
	stx     _corner+1
;
; if (testColl[corner] != 0)
;
	lda     #<(_testColl)
	sta     ptr1
	lda     #>(_testColl)
	clc
	adc     _corner+1
	sta     ptr1+1
	ldy     _corner
	lda     (ptr1),y
	beq     L021E
;
; player_y = (player_y & 0xf8) + 7; // if collision, realign
;
	lda     _player_y
	and     #$F8
	clc
	adc     #$07
L027E:	sta     _player_y
;
; }
;
L021E:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ checkCollision (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_checkCollision: near

.segment	"CODE"

;
; u8 collIndex = ((player_y >> 3) << 3) | ( player_x >> 3);
;
	lda     _player_y
	lsr     a
	lsr     a
	lsr     a
	asl     a
	asl     a
	asl     a
	sta     ptr1
	lda     _player_x
	lsr     a
	lsr     a
	lsr     a
	ora     ptr1
	jsr     pusha
;
; if ( testColl[collIndex] ) {
;
	ldy     #$00
	lda     (sp),y
	tay
	lda     _testColl,y
	beq     L0280
;
; colliding = 1;
;
	lda     #$01
;
; colliding = 0;
;
L0280:	sta     _colliding
;
; }
;
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; unrleCollision();
;
	jsr     _unrleCollision
;
; colliding = 0;
;
	lda     #$00
	sta     _colliding
;
; pal_bg(palBG);
;
	lda     #<(_palBG)
	ldx     #>(_palBG)
	jsr     _pal_bg
;
; vram_adr(NAMETABLE_A); //unpack nametable into VRAM
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(test_nam); 
;
	lda     #<(_test_nam)
	ldx     #>(_test_nam)
	jsr     _vram_unrle
;
; ppu_on_all(); //enable rendering
;
	jsr     _ppu_on_all
;
; player_x = 52;
;
	lda     #$34
	sta     _player_x
;
; player_y = 100;
;
	lda     #$64
	sta     _player_y
;
; touch = 0; // collision flag
;
	lda     #$00
	sta     _touch
;
; frame = 0; // frame counter
;
	sta     _frame
;
; pal_spr(palSprites);
;
	lda     #<(_palSprites)
	ldx     #>(_palSprites)
	jsr     _pal_spr
;
; ppu_wait_frame(); // wait for next TV frame
;
L0248:	jsr     _ppu_wait_frame
;
; spr = 0;
;
	lda     #$00
	sta     _spr
;
; i = 0;
;
	sta     _i
;
; spr = oam_meta_spr(player_x, player_y, spr, testSprite);
;
	jsr     decsp3
	lda     _player_x
	ldy     #$02
	sta     (sp),y
	lda     _player_y
	dey
	sta     (sp),y
	lda     _spr
	dey
	sta     (sp),y
	lda     #<(_testSprite)
	ldx     #>(_testSprite)
	jsr     _oam_meta_spr
	sta     _spr
;
; pad = pad_poll(i);
;
	lda     _i
	jsr     _pad_poll
	sta     _pad
;
; if(pad&PAD_LEFT  && player_x >  0)  player_x -= 2;
;
	and     #$40
	beq     L0285
	lda     _player_x
	beq     L0285
	sec
	sbc     #$02
	sta     _player_x
;
; if(pad&PAD_RIGHT && player_x < 240) player_x += 2;
;
L0285:	lda     _pad
	and     #$80
	beq     L0260
	lda     _player_x
	cmp     #$F0
	bcs     L0260
	lda     #$02
	clc
	adc     _player_x
	sta     _player_x
;
; collide_Check_LR();
;
L0260:	jsr     _collide_Check_LR
;
; if(pad&PAD_UP    && player_y > 0)   player_y -= 2;
;
	lda     _pad
	and     #$10
	beq     L028C
	lda     _player_y
	beq     L028C
	sec
	sbc     #$02
	sta     _player_y
;
; if(pad&PAD_DOWN  && player_y < 220) player_y += 2;
;
L028C:	lda     _pad
	and     #$20
	beq     L026D
	lda     _player_y
	cmp     #$DC
	bcs     L026D
	lda     #$02
	clc
	adc     _player_y
	sta     _player_y
;
; collide_Check_UD();
;
L026D:	jsr     _collide_Check_UD
;
; ++frame;
;
	inc     _frame
;
; while(1)
;
	jmp     L0248

.endproc

