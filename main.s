;
; File generated by cc65 v 2.16 - Git N/A
;
	.fopt		compiler,"cc65 v 2.16 - Git N/A"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_memcpy
	.import		_pal_bg
	.import		_pal_spr
	.import		_ppu_wait_frame
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_oam_meta_spr
	.import		_oam_hide_rest
	.import		_sfx_play
	.import		_pad_poll
	.import		_set_vram_update
	.import		_vram_adr
	.import		_vram_put
	.import		_vram_unrle
	.import		_delay
	.export		_newmap
	.export		_newmap_coll
	.export		_map3
	.export		_map3_coll
	.export		_oam_off
	.import		_paldat
	.export		_bgPalette
	.export		_currentCollisionData
	.export		_playerFrames
	.export		_glueFrames
	.export		_glueSpriteDataTemplate
	.export		_platformSpriteDataTemplate
	.export		_enemyData
	.export		_enemyFrames
	.export		_emptyFrame
	.export		_fruitFrame
	.export		_jewelFrame
	.export		_enemySpriteDataTemplate
	.export		_tileUpdateListInit
	.export		_tileUpdateList
	.export		_setupMap
	.export		_killPlayer
	.export		_setSpriteFrame
	.export		_setSpritePalette
	.export		_updateMapTile
	.export		_putMapTile
	.export		_putStr
	.export		_setSpritePriority
	.export		_flipSprite
	.export		_spriteCount
	.export		_updateEnemySprites
	.export		_updateGlueSprites
	.export		_updatePlatformSprites
	.export		_updatePlayerSprite
	.export		_drawScoreboard
	.export		_updateScoreboard
	.export		_addScore
	.export		_four_Sides
	.export		_glueFourSides
	.export		_four_SidesSmall
	.export		_getCollisionIndex
	.export		_collideCheckVertical
	.export		_collideCheckHorizontal
	.export		_collideCheckHorizontalFull
	.export		_bgHorizCollideCheck
	.export		_checkPlayerLadderCollision
	.export		_playerEnemyCollideCheck
	.export		_genericEnemyCollideCheck
	.export		_glueEnemyCollideCheck
	.export		_glueCollideCheck
	.export		_updateEnemyMovement
	.export		_updatePlatforms
	.export		_checkPlayerGetItems
	.export		_updatePlayerJumpFall
	.export		_updatePlayerClimbing
	.export		_updatePlayerVerticalMovement
	.export		_updatePlayerHorizontalMovement
	.export		_updatePlayerGlue
	.export		_updatePlayerState
	.export		_updateGlues
	.export		_main

.segment	"DATA"

.segment	"ZEROPAGE"
_playerX:
	.byte	$00
_playerY:
	.byte	$00
_enemyIndex:
	.byte	$00
.segment	"DATA"
_spriteFlickerIndex:
	.byte	$00
_sprPriorityToggle:
	.byte	$00
_playerScore:
	.word	$0000
_playerFrame:
	.byte	$00
_playerJumpCounter:
	.byte	$00
_playerState:
	.byte	$00
_playerVertVel:
	.byte	$00
_jumpButtonReset:
	.byte	$01
_glueButtonReset:
	.byte	$01
_playerSittingOnSprite:
	.byte	$00
_playerSpriteData:
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$09
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$19
	.byte	$03
	.byte	$80
_platformPointer:
	.word	$0000
_playerPlatformStuck:
	.byte	$00
_enemySpriteCount:
	.byte	$00
_enemyCollidedIndex:
	.byte	$00
_scoreUpdateListData:
	.byte	$60
	.byte	$63
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$FF
_scoreUpdateList:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_digitsArray:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_scoreChanged:
	.byte	$00

.segment	"RODATA"

_newmap:
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$05
	.byte	$0D
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$11
	.byte	$00
	.byte	$05
	.byte	$10
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$05
	.byte	$07
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$11
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$05
	.byte	$09
	.byte	$20
	.byte	$21
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$05
	.byte	$03
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$12
	.byte	$13
	.byte	$00
	.byte	$05
	.byte	$09
	.byte	$30
	.byte	$31
	.byte	$10
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$52
	.byte	$53
	.byte	$00
	.byte	$00
	.byte	$12
	.byte	$13
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$05
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$22
	.byte	$23
	.byte	$02
	.byte	$05
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$12
	.byte	$13
	.byte	$00
	.byte	$05
	.byte	$03
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$10
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$32
	.byte	$33
	.byte	$12
	.byte	$05
	.byte	$02
	.byte	$13
	.byte	$00
	.byte	$00
	.byte	$12
	.byte	$13
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$05
	.byte	$06
	.byte	$01
	.byte	$00
	.byte	$05
	.byte	$0B
	.byte	$22
	.byte	$23
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$12
	.byte	$13
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$10
	.byte	$11
	.byte	$00
	.byte	$05
	.byte	$0B
	.byte	$32
	.byte	$33
	.byte	$00
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$10
	.byte	$11
	.byte	$12
	.byte	$13
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$22
	.byte	$23
	.byte	$00
	.byte	$05
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$02
	.byte	$03
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$32
	.byte	$33
	.byte	$00
	.byte	$05
	.byte	$03
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$12
	.byte	$13
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$05
	.byte	$09
	.byte	$22
	.byte	$23
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$05
	.byte	$07
	.byte	$02
	.byte	$03
	.byte	$12
	.byte	$13
	.byte	$00
	.byte	$05
	.byte	$09
	.byte	$32
	.byte	$33
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$12
	.byte	$13
	.byte	$00
	.byte	$05
	.byte	$07
	.byte	$12
	.byte	$13
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$20
	.byte	$21
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$22
	.byte	$23
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$05
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$05
	.byte	$02
	.byte	$12
	.byte	$13
	.byte	$00
	.byte	$00
	.byte	$30
	.byte	$31
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$32
	.byte	$33
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$00
	.byte	$05
	.byte	$03
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$05
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$05
	.byte	$07
	.byte	$22
	.byte	$23
	.byte	$00
	.byte	$05
	.byte	$0B
	.byte	$02
	.byte	$03
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$10
	.byte	$11
	.byte	$00
	.byte	$05
	.byte	$07
	.byte	$32
	.byte	$33
	.byte	$00
	.byte	$05
	.byte	$0B
	.byte	$12
	.byte	$13
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$22
	.byte	$23
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$05
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$12
	.byte	$13
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$32
	.byte	$33
	.byte	$12
	.byte	$13
	.byte	$00
	.byte	$05
	.byte	$03
	.byte	$12
	.byte	$13
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$05
	.byte	$09
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$22
	.byte	$23
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$05
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$12
	.byte	$13
	.byte	$00
	.byte	$05
	.byte	$09
	.byte	$12
	.byte	$13
	.byte	$10
	.byte	$11
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$32
	.byte	$33
	.byte	$10
	.byte	$11
	.byte	$00
	.byte	$05
	.byte	$03
	.byte	$12
	.byte	$13
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$05
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$05
	.byte	$07
	.byte	$22
	.byte	$23
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$02
	.byte	$03
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$00
	.byte	$05
	.byte	$03
	.byte	$12
	.byte	$13
	.byte	$00
	.byte	$05
	.byte	$07
	.byte	$32
	.byte	$33
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$12
	.byte	$13
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$05
	.byte	$09
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$22
	.byte	$23
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$05
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$12
	.byte	$13
	.byte	$00
	.byte	$05
	.byte	$09
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$32
	.byte	$33
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$00
	.byte	$05
	.byte	$03
	.byte	$12
	.byte	$13
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$05
	.byte	$0D
	.byte	$22
	.byte	$23
	.byte	$00
	.byte	$05
	.byte	$0B
	.byte	$02
	.byte	$03
	.byte	$12
	.byte	$13
	.byte	$00
	.byte	$05
	.byte	$0D
	.byte	$32
	.byte	$33
	.byte	$00
	.byte	$05
	.byte	$0B
	.byte	$12
	.byte	$13
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$00
	.byte	$05
	.byte	$0A
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$05
	.byte	$09
	.byte	$20
	.byte	$00
	.byte	$05
	.byte	$24
	.byte	$00
	.byte	$05
	.byte	$00
_newmap_coll:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$08
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$07
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$07
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$07
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$07
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$09
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_map3:
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$05
	.byte	$0B
	.byte	$01
	.byte	$00
	.byte	$05
	.byte	$08
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$11
	.byte	$11
	.byte	$00
	.byte	$10
	.byte	$11
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$10
	.byte	$05
	.byte	$03
	.byte	$00
	.byte	$10
	.byte	$11
	.byte	$00
	.byte	$05
	.byte	$03
	.byte	$11
	.byte	$10
	.byte	$11
	.byte	$11
	.byte	$10
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$05
	.byte	$04
	.byte	$01
	.byte	$00
	.byte	$05
	.byte	$04
	.byte	$01
	.byte	$00
	.byte	$05
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$11
	.byte	$00
	.byte	$05
	.byte	$02
	.byte	$10
	.byte	$10
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$11
	.byte	$01
	.byte	$01
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$11
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$05
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$05
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$05
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$05
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$11
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$00
	.byte	$05
	.byte	$04
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$10
	.byte	$11
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$05
	.byte	$02
	.byte	$01
	.byte	$20
	.byte	$21
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$2F
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$52
	.byte	$53
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$11
	.byte	$1C
	.byte	$0C
	.byte	$11
	.byte	$00
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$11
	.byte	$30
	.byte	$31
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$11
	.byte	$3F
	.byte	$10
	.byte	$11
	.byte	$4B
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$22
	.byte	$23
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$05
	.byte	$02
	.byte	$03
	.byte	$22
	.byte	$23
	.byte	$10
	.byte	$5B
	.byte	$10
	.byte	$11
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$11
	.byte	$12
	.byte	$13
	.byte	$32
	.byte	$33
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$05
	.byte	$02
	.byte	$13
	.byte	$32
	.byte	$33
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$05
	.byte	$04
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$4A
	.byte	$4A
	.byte	$4B
	.byte	$0C
	.byte	$0D
	.byte	$0E
	.byte	$22
	.byte	$23
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$69
	.byte	$6A
	.byte	$6B
	.byte	$00
	.byte	$05
	.byte	$02
	.byte	$22
	.byte	$23
	.byte	$7A
	.byte	$10
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$05
	.byte	$04
	.byte	$11
	.byte	$10
	.byte	$11
	.byte	$5A
	.byte	$4A
	.byte	$4B
	.byte	$1C
	.byte	$1D
	.byte	$1E
	.byte	$32
	.byte	$33
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$11
	.byte	$79
	.byte	$7A
	.byte	$00
	.byte	$7C
	.byte	$10
	.byte	$10
	.byte	$32
	.byte	$33
	.byte	$8A
	.byte	$8B
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$20
	.byte	$21
	.byte	$68
	.byte	$68
	.byte	$69
	.byte	$4A
	.byte	$4B
	.byte	$2C
	.byte	$2D
	.byte	$2E
	.byte	$22
	.byte	$23
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$89
	.byte	$8A
	.byte	$00
	.byte	$8C
	.byte	$8D
	.byte	$8E
	.byte	$22
	.byte	$23
	.byte	$00
	.byte	$9B
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$11
	.byte	$30
	.byte	$31
	.byte	$78
	.byte	$68
	.byte	$69
	.byte	$4A
	.byte	$4B
	.byte	$3C
	.byte	$3D
	.byte	$3E
	.byte	$32
	.byte	$33
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$11
	.byte	$99
	.byte	$9A
	.byte	$00
	.byte	$9C
	.byte	$9D
	.byte	$9E
	.byte	$32
	.byte	$33
	.byte	$AA
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$22
	.byte	$23
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$22
	.byte	$23
	.byte	$02
	.byte	$03
	.byte	$BA
	.byte	$BB
	.byte	$10
	.byte	$11
	.byte	$12
	.byte	$13
	.byte	$32
	.byte	$33
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$11
	.byte	$12
	.byte	$13
	.byte	$32
	.byte	$33
	.byte	$12
	.byte	$13
	.byte	$CA
	.byte	$CB
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$32
	.byte	$33
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$05
	.byte	$04
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$05
	.byte	$04
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$32
	.byte	$33
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$11
	.byte	$32
	.byte	$33
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$05
	.byte	$04
	.byte	$11
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$05
	.byte	$04
	.byte	$11
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$10
	.byte	$32
	.byte	$33
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$11
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$32
	.byte	$33
	.byte	$01
	.byte	$86
	.byte	$87
	.byte	$88
	.byte	$20
	.byte	$21
	.byte	$0C
	.byte	$0D
	.byte	$00
	.byte	$01
	.byte	$4F
	.byte	$CF
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$20
	.byte	$21
	.byte	$32
	.byte	$33
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$10
	.byte	$32
	.byte	$33
	.byte	$11
	.byte	$A6
	.byte	$A7
	.byte	$98
	.byte	$30
	.byte	$31
	.byte	$1C
	.byte	$1D
	.byte	$10
	.byte	$11
	.byte	$5F
	.byte	$DF
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$11
	.byte	$00
	.byte	$01
	.byte	$30
	.byte	$31
	.byte	$32
	.byte	$33
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$11
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$22
	.byte	$23
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$A2
	.byte	$A3
	.byte	$02
	.byte	$03
	.byte	$22
	.byte	$23
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$05
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$32
	.byte	$33
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$11
	.byte	$B2
	.byte	$B3
	.byte	$12
	.byte	$13
	.byte	$32
	.byte	$33
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$05
	.byte	$03
	.byte	$10
	.byte	$11
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$11
	.byte	$11
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$22
	.byte	$23
	.byte	$00
	.byte	$05
	.byte	$04
	.byte	$01
	.byte	$8F
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$22
	.byte	$23
	.byte	$FB
	.byte	$FC
	.byte	$00
	.byte	$01
	.byte	$FF
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$10
	.byte	$32
	.byte	$33
	.byte	$10
	.byte	$05
	.byte	$04
	.byte	$11
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$11
	.byte	$32
	.byte	$33
	.byte	$FC
	.byte	$FD
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$05
	.byte	$02
	.byte	$01
	.byte	$10
	.byte	$11
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$32
	.byte	$33
	.byte	$4A
	.byte	$4B
	.byte	$00
	.byte	$01
	.byte	$1E
	.byte	$00
	.byte	$20
	.byte	$21
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$22
	.byte	$23
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$05
	.byte	$04
	.byte	$01
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$11
	.byte	$32
	.byte	$33
	.byte	$4A
	.byte	$4B
	.byte	$10
	.byte	$11
	.byte	$2E
	.byte	$10
	.byte	$30
	.byte	$31
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$11
	.byte	$32
	.byte	$33
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$11
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$11
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$00
	.byte	$01
	.byte	$80
	.byte	$05
	.byte	$1F
	.byte	$90
	.byte	$05
	.byte	$1F
	.byte	$C0
	.byte	$F0
	.byte	$30
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$10
	.byte	$00
	.byte	$05
	.byte	$02
	.byte	$A0
	.byte	$00
	.byte	$05
	.byte	$03
	.byte	$04
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$08
	.byte	$00
	.byte	$05
	.byte	$02
	.byte	$40
	.byte	$00
	.byte	$05
	.byte	$03
	.byte	$80
	.byte	$00
	.byte	$05
	.byte	$02
	.byte	$20
	.byte	$00
	.byte	$05
	.byte	$04
	.byte	$04
	.byte	$00
	.byte	$80
	.byte	$00
	.byte	$05
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$05
	.byte	$07
	.byte	$00
	.byte	$05
	.byte	$00
_map3_coll:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$0C
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$0D
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$06
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$07
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$09
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$0B
	.byte	$0B
	.byte	$0B
	.byte	$0B
	.byte	$0B
	.byte	$0B
	.byte	$0B
	.byte	$0B
	.byte	$0B
	.byte	$0B
	.byte	$0B
	.byte	$0B
	.byte	$0B
	.byte	$0B
	.byte	$0B
	.byte	$0B
_bgPalette:
	.byte	$0F
	.byte	$11
	.byte	$21
	.byte	$30
	.byte	$0F
	.byte	$04
	.byte	$14
	.byte	$34
	.byte	$0F
	.byte	$16
	.byte	$29
	.byte	$30
	.byte	$0F
	.byte	$20
	.byte	$28
	.byte	$21
_playerFrames:
	.byte	$08
	.byte	$09
	.byte	$18
	.byte	$19
	.byte	$28
	.byte	$29
	.byte	$38
	.byte	$39
	.byte	$0A
	.byte	$0B
	.byte	$1A
	.byte	$1B
	.byte	$48
	.byte	$49
	.byte	$58
	.byte	$59
	.byte	$2A
	.byte	$2B
	.byte	$3A
	.byte	$3B
_glueFrames:
	.byte	$46
	.byte	$47
	.byte	$56
	.byte	$57
	.byte	$66
	.byte	$67
	.byte	$76
	.byte	$77
	.byte	$86
	.byte	$87
	.byte	$96
	.byte	$97
_glueSpriteDataTemplate:
	.byte	$00
	.byte	$00
	.byte	$46
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$47
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$56
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$57
	.byte	$00
	.byte	$80
_platformSpriteDataTemplate:
	.byte	$00
	.byte	$00
	.byte	$82
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$83
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$92
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$93
	.byte	$01
	.byte	$80
_enemyFrames:
	.byte	$06
	.byte	$07
	.byte	$16
	.byte	$17
	.byte	$26
	.byte	$27
	.byte	$36
	.byte	$37
_emptyFrame:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_fruitFrame:
	.byte	$20
	.byte	$21
	.byte	$30
	.byte	$31
_jewelFrame:
	.byte	$42
	.byte	$43
	.byte	$52
	.byte	$53
_enemySpriteDataTemplate:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$00
	.byte	$03
	.byte	$80
_tileUpdateListInit:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$FF
L0C05:
	.byte	$30,$30,$30,$30,$30,$30,$00

.segment	"BSS"

.segment	"ZEROPAGE"
.segment	"BSS"
.segment	"ZEROPAGE"
_oam_off:
	.res	1,$00
.segment	"ZEROPAGE"
_frameCount:
	.res	1,$00
.segment	"ZEROPAGE"
_i:
	.res	1,$00
.segment	"ZEROPAGE"
_collisionIndex:
	.res	2,$00
.segment	"ZEROPAGE"
_leftSide:
	.res	1,$00
.segment	"ZEROPAGE"
_rightSide:
	.res	1,$00
.segment	"ZEROPAGE"
_topSide:
	.res	1,$00
.segment	"ZEROPAGE"
_bottomSide:
	.res	1,$00
.segment	"ZEROPAGE"
_pad:
	.res	1,$00
.segment	"ZEROPAGE"
_oamSpriteIndex:
	.res	1,$00
.segment	"ZEROPAGE"
_horizontalCollideCheck:
	.res	1,$00
.segment	"ZEROPAGE"
_verticalCollideCheck:
	.res	1,$00
.segment	"ZEROPAGE"
_collideBottom:
	.res	1,$00
.segment	"ZEROPAGE"
_enemyColliding:
	.res	1,$00
.segment	"ZEROPAGE"
_playerStartX:
	.res	1,$00
.segment	"ZEROPAGE"
_playerStartY:
	.res	1,$00
.segment	"ZEROPAGE"
_levelComplete:
	.res	1,$00
.segment	"BSS"
_collisionMap:
	.res	240,$00
.segment	"BSS"
_currentCollisionData:
	.res	2,$00
.segment	"BSS"
_touch:
	.res	1,$00
.segment	"BSS"
_palSprites:
	.res	4,$00
.segment	"BSS"
_collisionLeft:
	.res	1,$00
.segment	"BSS"
_collisionRight:
	.res	1,$00
.segment	"BSS"
_playerDir:
	.res	1,$00
.segment	"BSS"
_playerEnemyColliding:
	.res	1,$00
.segment	"BSS"
_playerLives:
	.res	1,$00
.segment	"BSS"
_playerAnimationCounter:
	.res	1,$00
.segment	"BSS"
_nametableUpdateList:
	.res	2,$00
.segment	"BSS"
_glueData:
	.res	23,$00
.segment	"BSS"
_gluePointer:
	.res	2,$00
.segment	"BSS"
_glueIndex:
	.res	1,$00
.segment	"BSS"
_glueColliding:
	.res	1,$00
.segment	"BSS"
_glueCollidedIndex:
	.res	1,$00
.segment	"BSS"
_glueTop:
	.res	1,$00
.segment	"BSS"
_glueLeft:
	.res	1,$00
.segment	"BSS"
_glueRight:
	.res	1,$00
.segment	"BSS"
_glueBottom:
	.res	1,$00
.segment	"BSS"
_platformData:
	.res	15,$00
.segment	"BSS"
_platformIndex:
	.res	1,$00
.segment	"BSS"
_platformTop:
	.res	1,$00
.segment	"BSS"
_platformBottom:
	.res	1,$00
.segment	"BSS"
_platformLeft:
	.res	1,$00
.segment	"BSS"
_platformRight:
	.res	1,$00
.segment	"BSS"
_numEnemies:
	.res	1,$00
.segment	"BSS"
_enemyTop:
	.res	1,$00
.segment	"BSS"
_enemyBottom:
	.res	1,$00
.segment	"BSS"
_enemyLeft:
	.res	1,$00
.segment	"BSS"
_enemyRight:
	.res	1,$00
.segment	"BSS"
_enemyData:
	.res	30,$00
.segment	"BSS"
_enemySpriteData:
	.res	170,$00
.segment	"BSS"
_currentEnemy:
	.res	2,$00
.segment	"BSS"
_tileUpdateList:
	.res	28,$00
.segment	"BSS"
_decadeCount:
	.res	1,$00
.segment	"BSS"
_valueToConvert:
	.res	2,$00
.segment	"BSS"
_sSpriteIndex:
	.res	1,$00
.segment	"BSS"
_sFrameIndex:
	.res	1,$00

; ---------------------------------------------------------------
; void __near__ setupMap (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_setupMap: near

.segment	"RODATA"

L0942:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$40
	.res	2,$00
L0948:
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$40
	.byte	$00

.segment	"CODE"

;
; u8 mapX = 0;
;
	jsr     decsp1
	lda     #$00
	jsr     pusha
;
; u8 mapY = 0;
;
	jsr     pusha
;
; u8 index = 0;
;
	jsr     pusha
;
; enemy newEnemy = { 0, 0, 0, PAD_LEFT };
;
	jsr     decsp6
	ldy     #$05
L0947:	lda     L0942,y
	sta     (sp),y
	dey
	bpl     L0947
;
; platform newPlatform = { 0, 0, 1, PAD_LEFT, 0 };
;
	jsr     decsp5
	ldy     #$04
L094E:	lda     L0948,y
	sta     (sp),y
	dey
	bpl     L094E
;
; memcpy(collisionMap, currentCollisionData, COLLISION_MAP_SIZE);
;
	lda     #<(_collisionMap)
	ldx     #>(_collisionMap)
	jsr     pushax
	lda     _currentCollisionData
	ldx     _currentCollisionData+1
	jsr     pushax
	ldx     #$00
	lda     #$F0
	jsr     _memcpy
;
; enemyIndex = 0;
;
	lda     #$00
	sta     _enemyIndex
;
; platformIndex = 0;
;
	sta     _platformIndex
;
; numEnemies = 0;
;
	sta     _numEnemies
;
; for ( index = 0; index < MAX_GLUE_COUNT; ++index ) {
;
	ldy     #$0B
L1117:	sta     (sp),y
	lda     (sp),y
	bne     L111B
;
; gluePointer = &(glueData[index]);
;
	lda     (sp),y
	jsr     pusha0
	lda     #$17
	jsr     tosmula0
	clc
	adc     #<(_glueData)
	tay
	txa
	adc     #>(_glueData)
	tax
	tya
	sta     _gluePointer
	stx     _gluePointer+1
;
; gluePointer->state = GLUE_STATE_INACTIVE;
;
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	ldy     #$04
	sta     (ptr1),y
;
; for ( index = 0; index < MAX_GLUE_COUNT; ++index ) {
;
	ldy     #$0B
	clc
	lda     #$01
	adc     (sp),y
	jmp     L1117
;
; for ( index = 0; index < MAX_PLATFORM_COUNT; ++index ) {
;
L111B:	lda     #$00
L1118:	sta     (sp),y
	cmp     #$03
	bcs     L111C
;
; platformPointer = &(platformData[index]);
;
	ldx     #$00
	lda     (sp),y
	jsr     mulax5
	clc
	adc     #<(_platformData)
	tay
	txa
	adc     #>(_platformData)
	tax
	tya
	sta     _platformPointer
	stx     _platformPointer+1
;
; platformPointer->isActive = 0;
;
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	ldy     #$02
	sta     (ptr1),y
;
; for ( index = 0; index < MAX_PLATFORM_COUNT; ++index ) {
;
	ldy     #$0B
	clc
	lda     #$01
	adc     (sp),y
	jmp     L1118
;
; for ( index = 0; index < COLLISION_MAP_SIZE; ++index ) {
;
L111C:	lda     #$00
L111A:	sta     (sp),y
	cmp     #$F0
	jcs     L112A
;
; collisionByte = collisionMap[index];
;
	lda     (sp),y
	tay
	lda     _collisionMap,y
	ldy     #$0E
	sta     (sp),y
;
; if ( collisionByte == TILE_PLAYER ) {  
;
	cmp     #$09
	bne     L111E
;
; playerStartX = mapX << 4;
;
	dey
	lda     (sp),y
	asl     a
	asl     a
	asl     a
	asl     a
	sta     _playerStartX
;
; playerStartY = (mapY << 4) - 1;
;
	dey
	lda     (sp),y
	asl     a
	asl     a
	asl     a
	asl     a
	sec
	sbc     #$01
	sta     _playerStartY
;
; } else if ( ( collisionByte == TILE_ENEMY1START_RIGHT ) || ( collisionByte == TILE_ENEMY1START_LEFT ) ) {
;
	jmp     L09DC
L111E:	lda     (sp),y
	cmp     #$05
	beq     L111F
	cmp     #$04
	jne     L1125
;
; if ( enemyIndex < MAX_ENEMY_COUNT ) {
;
L111F:	lda     _enemyIndex
	cmp     #$05
	jcs     L09DC
;
; enemyData[enemyIndex] = newEnemy;
;
	ldx     #$00
	lda     _enemyIndex
	jsr     mulax6
	clc
	adc     #<(_enemyData)
	tay
	txa
	adc     #>(_enemyData)
	tax
	tya
	jsr     pushax
	lda     sp
	ldx     sp+1
	clc
	adc     #$07
	bcc     L0994
	inx
L0994:	jsr     pushax
	ldx     #$00
	lda     #$06
	jsr     _memcpy
;
; enemyData[enemyIndex].x = mapX << 4;
;
	ldx     #$00
	lda     _enemyIndex
	jsr     mulax6
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	ldy     #$0D
	lda     (sp),y
	asl     a
	asl     a
	asl     a
	asl     a
	ldy     #$00
	sta     (ptr1),y
;
; enemyData[enemyIndex].y = (mapY << 4) - 1;
;
	ldx     #$00
	lda     _enemyIndex
	jsr     mulax6
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	ldy     #$0C
	lda     (sp),y
	asl     a
	asl     a
	asl     a
	asl     a
	sec
	sbc     #$01
	ldy     #$01
	sta     (ptr1),y
;
; enemyData[enemyIndex].direction = ( collisionByte == TILE_ENEMY1START_RIGHT ) ? PAD_RIGHT : PAD_LEFT;
;
	ldx     #$00
	lda     _enemyIndex
	jsr     mulax6
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	ldy     #$0E
	lda     (sp),y
	cmp     #$05
	bne     L1120
	lda     #$80
	jmp     L1121
L1120:	lda     #$40
L1121:	ldy     #$03
	sta     (ptr1),y
;
; enemyData[enemyIndex].state = ENEMY_STATE_NORMAL;
;
	ldx     #$00
	lda     _enemyIndex
	jsr     mulax6
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	lda     #$00
	iny
	sta     (ptr1),y
;
; for ( i = 0; i < ENEMY_DATA_SIZE; ++i ) {
;
	sta     _i
L1122:	lda     _i
	cmp     #$11
	bcs     L1123
;
; enemySpriteData[enemyIndex][i] = enemySpriteDataTemplate[i];
;
	lda     _enemyIndex
	jsr     pusha0
	lda     #$11
	jsr     tosmula0
	clc
	adc     #<(_enemySpriteData)
	tay
	txa
	adc     #>(_enemySpriteData)
	tax
	tya
	clc
	adc     _i
	bcc     L1116
	inx
L1116:	sta     ptr1
	stx     ptr1+1
	ldy     _i
	lda     _enemySpriteDataTemplate,y
	ldy     #$00
	sta     (ptr1),y
;
; for ( i = 0; i < ENEMY_DATA_SIZE; ++i ) {
;
	inc     _i
	jmp     L1122
;
; setSpriteFrame(enemySpriteData[enemyIndex], enemyFrames[0]);
;
L1123:	lda     _enemyIndex
	jsr     pusha0
	lda     #$11
	jsr     tosmula0
	clc
	adc     #<(_enemySpriteData)
	tay
	txa
	adc     #>(_enemySpriteData)
	tax
	tya
	jsr     pushax
	lda     #<(_enemyFrames)
	ldx     #>(_enemyFrames)
	jsr     _setSpriteFrame
;
; ++enemyIndex;    
;
	inc     _enemyIndex
;
; } else if ( collisionByte == TILE_PLATFORM ) {
;
	jmp     L09DC
L1125:	lda     (sp),y
	cmp     #$0D
	jne     L1127
;
; if ( platformIndex < MAX_PLATFORM_COUNT ) {
;
	lda     _platformIndex
	cmp     #$03
	jcs     L09DC
;
; platformData[platformIndex] = newPlatform;
;
	ldx     #$00
	lda     _platformIndex
	jsr     mulax5
	clc
	adc     #<(_platformData)
	tay
	txa
	adc     #>(_platformData)
	tax
	tya
	jsr     pushax
	lda     sp
	ldx     sp+1
	clc
	adc     #$02
	bcc     L09C4
	inx
L09C4:	jsr     pushax
	ldx     #$00
	lda     #$05
	jsr     _memcpy
;
; platformData[platformIndex].x = mapX << 4;
;
	ldx     #$00
	lda     _platformIndex
	jsr     mulax5
	clc
	adc     #<(_platformData)
	sta     ptr1
	txa
	adc     #>(_platformData)
	sta     ptr1+1
	ldy     #$0D
	lda     (sp),y
	asl     a
	asl     a
	asl     a
	asl     a
	ldy     #$00
	sta     (ptr1),y
;
; platformData[platformIndex].y = (mapY << 4) - 1;
;
	ldx     #$00
	lda     _platformIndex
	jsr     mulax5
	clc
	adc     #<(_platformData)
	sta     ptr1
	txa
	adc     #>(_platformData)
	sta     ptr1+1
	ldy     #$0C
	lda     (sp),y
	asl     a
	asl     a
	asl     a
	asl     a
	sec
	sbc     #$01
	ldy     #$01
	sta     (ptr1),y
;
; platformData[platformIndex].isActive = 1;
;
	ldx     #$00
	lda     _platformIndex
	jsr     mulax5
	clc
	adc     #<(_platformData)
	sta     ptr1
	txa
	adc     #>(_platformData)
	sta     ptr1+1
	tya
	iny
	sta     (ptr1),y
;
; platformData[platformIndex].direction = PAD_LEFT;
;
	ldx     #$00
	lda     _platformIndex
	jsr     mulax5
	clc
	adc     #<(_platformData)
	sta     ptr1
	txa
	adc     #>(_platformData)
	sta     ptr1+1
	lda     #$40
	iny
	sta     (ptr1),y
;
; ++platformIndex;
;
	inc     _platformIndex
;
; } else if ( collisionByte == TILE_FRUIT ) {
;
	jmp     L09DC
L1127:	lda     (sp),y
	cmp     #$08
	bne     L1129
;
; putMapTile(mapX << 1, mapY << 1, fruitFrame);
;
	jsr     decsp2
	iny
	lda     (sp),y
	asl     a
	ldy     #$01
	sta     (sp),y
	ldy     #$0E
	lda     (sp),y
	asl     a
	ldy     #$00
	sta     (sp),y
	lda     #<(_fruitFrame)
	ldx     #>(_fruitFrame)
;
; } else if ( collisionByte == TILE_JEWEL ) {
;
	jmp     L1119
L1129:	lda     (sp),y
	cmp     #$0C
	bne     L09DC
;
; putMapTile(mapX << 1, mapY << 1, jewelFrame);
;
	jsr     decsp2
	iny
	lda     (sp),y
	asl     a
	ldy     #$01
	sta     (sp),y
	ldy     #$0E
	lda     (sp),y
	asl     a
	ldy     #$00
	sta     (sp),y
	lda     #<(_jewelFrame)
	ldx     #>(_jewelFrame)
L1119:	jsr     _putMapTile
;
; ++mapX;
;
L09DC:	ldy     #$0D
	clc
	lda     #$01
	adc     (sp),y
	sta     (sp),y
;
; if ( mapX > 15 ) {
;
	cmp     #$10
	bcc     L0977
;
; mapX = 0;
;
	lda     #$00
	sta     (sp),y
;
; ++mapY;
;
	dey
	clc
	lda     #$01
	adc     (sp),y
	sta     (sp),y
;
; for ( index = 0; index < COLLISION_MAP_SIZE; ++index ) {
;
L0977:	ldy     #$0B
	clc
	lda     #$01
	adc     (sp),y
	jmp     L111A
;
; playerX = playerStartX;
;
L112A:	lda     _playerStartX
	sta     _playerX
;
; playerY = playerStartY;
;
	lda     _playerStartY
	sta     _playerY
;
; numEnemies = enemyIndex;
;
	lda     _enemyIndex
	sta     _numEnemies
;
; }
;
	ldy     #$0F
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ killPlayer (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_killPlayer: near

.segment	"CODE"

;
; playerState = PLAYER_STATE_DEAD;
;
	lda     #$01
	sta     _playerState
;
; --playerLives;
;
	dec     _playerLives
;
; playerAnimationCounter = 0;
;
	lda     #$00
	sta     _playerAnimationCounter
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ setSpriteFrame (__near__ unsigned char *, __near__ const unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_setSpriteFrame: near

.segment	"CODE"

;
; void __fastcall__ setSpriteFrame(u8 *sprite, const u8 *frame) {
;
	jsr     pushax
;
; sSpriteIndex = 2;
;
	lda     #$02
	sta     _sSpriteIndex
;
; sFrameIndex = 0;
;
	lda     #$00
	sta     _sFrameIndex
;
; *(sprite + 2) = *(frame);
;
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     #$02
	bcc     L0A91
	inx
L0A91:	jsr     pushax
	ldy     #$03
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	jsr     staspidx
;
; *(sprite + 6) = *(frame + 1);
;
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     #$06
	bcc     L0A96
	inx
L0A96:	jsr     pushax
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	dey
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	dey
	jsr     staspidx
;
; *(sprite + 10) = *(frame + 2);
;
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     #$0A
	bcc     L0A9C
	inx
L0A9C:	jsr     pushax
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
;
; *(sprite + 14) = *(frame + 3);
;
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     #$0E
	bcc     L0AA2
	inx
L0AA2:	jsr     pushax
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	iny
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
;
; }
;
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ setSpritePalette (__near__ unsigned char *, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_setSpritePalette: near

.segment	"CODE"

;
; void __fastcall__ setSpritePalette(u8 *sprite, u8 palette) {
;
	jsr     pusha
;
; for ( i = 3; i <= 15; i = i + 4 ) {
;
	jsr     decsp1
	lda     #$03
	ldy     #$00
L112B:	sta     (sp),y
	cmp     #$10
	bcs     L0AA8
;
; sprite[i] &= ~(0x3);
;
	lda     (sp),y
	clc
	ldy     #$02
	adc     (sp),y
	sta     ptr1
	lda     #$00
	iny
	adc     (sp),y
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	and     #$FC
	sta     (ptr1),y
;
; sprite[i] |= palette;
;
	lda     (sp),y
	clc
	ldy     #$02
	adc     (sp),y
	pha
	lda     #$00
	iny
	adc     (sp),y
	tax
	pla
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     ptr1
	ldy     #$03
	lda     (sp),y
	ora     ptr1
	ldy     #$00
	jsr     staspidx
;
; for ( i = 3; i <= 15; i = i + 4 ) {
;
	ldy     #$00
	lda     (sp),y
	clc
	adc     #$04
	jmp     L112B
;
; }
;
L0AA8:	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ updateMapTile (unsigned char, unsigned char, __near__ const unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updateMapTile: near

.segment	"CODE"

;
; void __fastcall__ updateMapTile(u8 mapX, u8 mapY, const u8 * tileFrame) {
;
	jsr     pushax
;
; tileUpdateList[0] = MSB(NTADR_A(mapX, mapY));
;
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	iny
	lda     (sp),y
	ora     ptr1
	lda     tmp1
	ora     #$20
	sta     _tileUpdateList
;
; tileUpdateList[1] = LSB(NTADR_A(mapX, mapY));
;
	dey
	ldx     #$00
	lda     (sp),y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	iny
	lda     (sp),y
	ora     ptr1
	sta     _tileUpdateList+1
	lda     tmp1
	ora     #$20
;
; tileUpdateList[2] = tileFrame[0];
;
	ldy     #$01
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     (ptr1),y
	sta     _tileUpdateList+2
;
; tileUpdateList[3] = MSB(NTADR_A(mapX + 1, mapY));
;
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	iny
	lda     (sp),y
	clc
	adc     #$01
	bcc     L0A22
	inx
L0A22:	ora     ptr1
	txa
	ora     tmp1
	ora     #$20
	sta     _tileUpdateList+3
;
; tileUpdateList[4] = LSB(NTADR_A(mapX + 1, mapY));
;
	dey
	ldx     #$00
	lda     (sp),y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	iny
	lda     (sp),y
	clc
	adc     #$01
	bcc     L0A2E
	inx
L0A2E:	ora     ptr1
	sta     _tileUpdateList+4
	txa
	ora     tmp1
	ora     #$20
;
; tileUpdateList[5] = tileFrame[1];
;
	ldy     #$01
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	iny
	lda     (ptr1),y
	sta     _tileUpdateList+5
;
; tileUpdateList[6] = MSB(NTADR_A(mapX, mapY + 1));
;
	iny
	ldx     #$00
	lda     (sp),y
	clc
	adc     #$01
	bcc     L0A3D
	inx
L0A3D:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	iny
	lda     (sp),y
	ora     ptr1
	lda     tmp1
	ora     #$20
	sta     _tileUpdateList+6
;
; tileUpdateList[7] = LSB(NTADR_A(mapX, mapY + 1));
;
	dey
	ldx     #$00
	lda     (sp),y
	clc
	adc     #$01
	bcc     L0A49
	inx
L0A49:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	iny
	lda     (sp),y
	ora     ptr1
	sta     _tileUpdateList+7
	lda     tmp1
	ora     #$20
;
; tileUpdateList[8] = tileFrame[2];
;
	ldy     #$01
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$02
	lda     (ptr1),y
	sta     _tileUpdateList+8
;
; tileUpdateList[9] = MSB(NTADR_A(mapX + 1, mapY + 1));
;
	ldx     #$00
	lda     (sp),y
	clc
	adc     #$01
	bcc     L0A59
	inx
L0A59:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	iny
	lda     (sp),y
	clc
	adc     #$01
	bcc     L0A5B
	inx
L0A5B:	ora     ptr1
	txa
	ora     tmp1
	ora     #$20
	sta     _tileUpdateList+9
;
; tileUpdateList[10] = LSB(NTADR_A(mapX + 1, mapY + 1));
;
	dey
	ldx     #$00
	lda     (sp),y
	clc
	adc     #$01
	bcc     L0A66
	inx
L0A66:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	iny
	lda     (sp),y
	clc
	adc     #$01
	bcc     L0A68
	inx
L0A68:	ora     ptr1
	sta     _tileUpdateList+10
	txa
	ora     tmp1
	ora     #$20
;
; tileUpdateList[11] = tileFrame[3];
;
	ldy     #$01
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$03
	lda     (ptr1),y
	sta     _tileUpdateList+11
;
; set_vram_update(tileUpdateList); 
;
	lda     #<(_tileUpdateList)
	ldx     #>(_tileUpdateList)
	jsr     _set_vram_update
;
; }
;
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ putMapTile (unsigned char, unsigned char, __near__ const unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_putMapTile: near

.segment	"CODE"

;
; void __fastcall__ putMapTile(u8 mapX, u8 mapY, const u8 * tileFrame) {
;
	jsr     pushax
;
; vram_adr(NTADR_A(mapX, mapY++));
;
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	pha
	clc
	adc     #$01
	sta     (sp),y
	pla
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	iny
	lda     (sp),y
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _vram_adr
;
; vram_put(*tileFrame++);
;
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L0A79
	inx
L0A79:	jsr     stax0sp
	ldy     #$00
	lda     (regsave),y
	jsr     _vram_put
;
; vram_put(*tileFrame++);
;
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L0A7C
	inx
L0A7C:	jsr     stax0sp
	ldy     #$00
	lda     (regsave),y
	jsr     _vram_put
;
; vram_adr(NTADR_A(mapX, mapY));
;
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	iny
	lda     (sp),y
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _vram_adr
;
; vram_put(*tileFrame++);
;
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L0A86
	inx
L0A86:	jsr     stax0sp
	ldy     #$00
	lda     (regsave),y
	jsr     _vram_put
;
; vram_put(*tileFrame++);
;
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L0A89
	inx
L0A89:	jsr     stax0sp
	ldy     #$00
	lda     (regsave),y
	jsr     _vram_put
;
; }
;
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ putStr (unsigned int, __near__ const unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_putStr: near

.segment	"CODE"

;
; {
;
	jsr     pushax
;
; vram_adr(adr);
;
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     _vram_adr
;
; if(!*str) break;
;
L09F1:	ldy     #$01
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     (ptr1),y
	beq     L09F2
;
; vram_put((*str++) + 0xA0); // +0xA0 because ASCII code 0x20 is placed in tile C0 of the CHR
;
	iny
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L09FA
	inx
L09FA:	jsr     stax0sp
	ldy     #$00
	lda     (regsave),y
	clc
	adc     #$A0
	jsr     _vram_put
;
; while(1)
;
	jmp     L09F1
;
; }
;
L09F2:	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ setSpritePriority (__near__ unsigned char *, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_setSpritePriority: near

.segment	"CODE"

;
; void __fastcall__ setSpritePriority(u8 *sprite, u8 priority) {
;
	jsr     pusha
;
; if ( priority ) {
;
	ldy     #$00
	lda     (sp),y
	beq     L0AB9
;
; sprite[3] |= OAM_BEHIND;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$03
	lda     (ptr1),y
	ora     #$20
	sta     (ptr1),y
;
; sprite[7] |= OAM_BEHIND;
;
	dey
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$07
	lda     (ptr1),y
	ora     #$20
	sta     (ptr1),y
;
; sprite[11] |= OAM_BEHIND;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$0B
	lda     (ptr1),y
	ora     #$20
	sta     (ptr1),y
;
; sprite[15] |= OAM_BEHIND;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$0F
	lda     (ptr1),y
	ora     #$20
;
; } else {
;
	jmp     L112C
;
; sprite[3] &= ~OAM_BEHIND;
;
L0AB9:	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$03
	lda     (ptr1),y
	and     #$DF
	sta     (ptr1),y
;
; sprite[7] &= ~OAM_BEHIND;
;
	dey
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$07
	lda     (ptr1),y
	and     #$DF
	sta     (ptr1),y
;
; sprite[11] &= ~OAM_BEHIND;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$0B
	lda     (ptr1),y
	and     #$DF
	sta     (ptr1),y
;
; sprite[15] &= ~OAM_BEHIND;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$0F
	lda     (ptr1),y
	and     #$DF
L112C:	sta     (ptr1),y
;
; }
;
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ flipSprite (__near__ unsigned char *, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_flipSprite: near

.segment	"CODE"

;
; void __fastcall__ flipSprite(u8 *sprite, u8 flip) {
;
	jsr     pusha
;
; if ( flip ) {
;
	ldy     #$00
	lda     (sp),y
	jeq     L0AD5
;
; sprite[0] = 8;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     #$08
	dey
	sta     (ptr1),y
;
; sprite[3] |= OAM_FLIP_H;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$03
	lda     (ptr1),y
	ora     #$40
	sta     (ptr1),y
;
; sprite[4] = 0;
;
	dey
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     #$00
	ldy     #$04
	sta     (ptr1),y
;
; sprite[7] |= OAM_FLIP_H;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$07
	lda     (ptr1),y
	ora     #$40
	sta     (ptr1),y
;
; sprite[8] = 8;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     #$08
	tay
	sta     (ptr1),y
;
; sprite[11] |= OAM_FLIP_H;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$0B
	lda     (ptr1),y
	ora     #$40
	sta     (ptr1),y
;
; sprite[12] = 0;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     #$00
	ldy     #$0C
	sta     (ptr1),y
;
; sprite[15] |= OAM_FLIP_H;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$0F
	lda     (ptr1),y
	ora     #$40
;
; } else {
;
	jmp     L112D
;
; sprite[0] = 0;
;
L0AD5:	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     #$00
	dey
	sta     (ptr1),y
;
; sprite[3] &= ~OAM_FLIP_H;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$03
	lda     (ptr1),y
	and     #$BF
	sta     (ptr1),y
;
; sprite[4] = 8;
;
	dey
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     #$08
	ldy     #$04
	sta     (ptr1),y
;
; sprite[7] &= ~OAM_FLIP_H;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$07
	lda     (ptr1),y
	and     #$BF
	sta     (ptr1),y
;
; sprite[8] = 0;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     #$00
	ldy     #$08
	sta     (ptr1),y
;
; sprite[11] &= ~OAM_FLIP_H;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$0B
	lda     (ptr1),y
	and     #$BF
	sta     (ptr1),y
;
; sprite[12] = 8;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     #$08
	ldy     #$0C
	sta     (ptr1),y
;
; sprite[15] &= ~OAM_FLIP_H;  
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$0F
	lda     (ptr1),y
	and     #$BF
L112D:	sta     (ptr1),y
;
; }
;
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ spriteCount (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_spriteCount: near

.segment	"CODE"

;
; if ( ++enemySpriteCount >= numEnemies ) {
;
	inc     _enemySpriteCount
	lda     _enemySpriteCount
	cmp     _numEnemies
	bcc     L0B09
;
; enemySpriteCount = 0;
;
	lda     #$00
	sta     _enemySpriteCount
;
; }
;
L0B09:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ updateEnemySprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updateEnemySprites: near

.segment	"CODE"

;
; for ( i = 0; i < numEnemies; ++i ) {
;
	lda     #$00
	sta     _i
L112E:	lda     _i
	cmp     _numEnemies
	bcc     L1134
;
; }
;
	rts
;
; spriteCount();
;
L1134:	jsr     _spriteCount
;
; spriteFlickerIndex = enemySpriteCount;
;
	lda     _enemySpriteCount
	sta     _spriteFlickerIndex
;
; currentEnemy = &(enemyData[spriteFlickerIndex]);
;
	ldx     #$00
	lda     _spriteFlickerIndex
	jsr     mulax6
	clc
	adc     #<(_enemyData)
	tay
	txa
	adc     #>(_enemyData)
	tax
	tya
	sta     _currentEnemy
	stx     _currentEnemy+1
;
; if ( currentEnemy->state == ENEMY_STATE_NORMAL ) {
;
	sta     ptr1
	stx     ptr1+1
	ldy     #$04
	lda     (ptr1),y
	bne     L0B1D
;
; if ( ( frameCount & 0x0F ) == 0x0F ) {
;
	lda     _frameCount
	and     #$0F
	cmp     #$0F
	bne     L112F
;
; currentEnemy->frame ^= 1;
;
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	eor     #$01
	sta     (ptr1),y
;
; setSpriteFrame(enemySpriteData[spriteFlickerIndex], enemyFrames[currentEnemy->frame]);
;
	lda     _spriteFlickerIndex
	jsr     pusha0
	lda     #$11
	jsr     tosmula0
	clc
	adc     #<(_enemySpriteData)
	tay
	txa
	adc     #>(_enemySpriteData)
	tax
	tya
	jsr     pushax
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	ldy     #$02
	ldx     #$00
	lda     (ptr1),y
	jsr     aslax2
	clc
	adc     #<(_enemyFrames)
	tay
	txa
	adc     #>(_enemyFrames)
	tax
	tya
	jsr     _setSpriteFrame
;
; setSpritePalette(enemySpriteData[spriteFlickerIndex], 0x3);
;
L112F:	lda     _spriteFlickerIndex
	jsr     pusha0
	lda     #$11
	jsr     tosmula0
	clc
	adc     #<(_enemySpriteData)
	tay
	txa
	adc     #>(_enemySpriteData)
	tax
	tya
	jsr     pushax
	lda     #$03
	jsr     _setSpritePalette
;
; if ( ( currentEnemy->state == ENEMY_STATE_NORMAL ) || ( currentEnemy->state == ENEMY_STATE_GLUED ) ) {
;
L0B1D:	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	ldy     #$04
	lda     (ptr1),y
	beq     L1131
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	lda     (ptr1),y
	cmp     #$01
	bne     L1133
;
; oamSpriteIndex = oam_meta_spr(currentEnemy->x, currentEnemy->y, oamSpriteIndex, enemySpriteData[spriteFlickerIndex]);    
;
L1131:	jsr     decsp3
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	ldy     #$02
	sta     (sp),y
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	dey
	lda     (ptr1),y
	sta     (sp),y
	lda     _oamSpriteIndex
	dey
	sta     (sp),y
	lda     _spriteFlickerIndex
	jsr     pusha0
	lda     #$11
	jsr     tosmula0
	clc
	adc     #<(_enemySpriteData)
	tay
	txa
	adc     #>(_enemySpriteData)
	tax
	tya
	jsr     _oam_meta_spr
	sta     _oamSpriteIndex
;
; for ( i = 0; i < numEnemies; ++i ) {
;
L1133:	inc     _i
	jmp     L112E

.endproc

; ---------------------------------------------------------------
; void __near__ updateGlueSprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updateGlueSprites: near

.segment	"CODE"

;
; for ( i = 0; i < MAX_GLUE_COUNT; ++i ) {
;
	lda     #$00
	sta     _i
L1138:	lda     _i
	beq     L115A
;
; }
;
	rts
;
; gluePointer = &(glueData[i]);
;
L115A:	lda     _i
	jsr     pusha0
	lda     #$17
	jsr     tosmula0
	clc
	adc     #<(_glueData)
	tay
	txa
	adc     #>(_glueData)
	tax
	tya
	sta     _gluePointer
	stx     _gluePointer+1
;
; if ( gluePointer->state == GLUE_STATE_ACTIVE ) {
;
	sta     ptr1
	stx     ptr1+1
	ldy     #$04
	lda     (ptr1),y
	cmp     #$01
	jne     L0B47
;
; if ( ( frameCount & 0x1F ) == 0x1F ) {
;
	lda     _frameCount
	and     #$1F
	cmp     #$1F
	bne     L0B49
;
; gluePointer->frame ^= 1;
;
	lda     _gluePointer
	sta     ptr1
	lda     _gluePointer+1
	sta     ptr1+1
	dey
	lda     (ptr1),y
	eor     #$01
	sta     (ptr1),y
;
; flipSprite(gluePointer->spriteData, gluePointer->frame);
;
	lda     _gluePointer
	ldx     _gluePointer+1
	clc
	adc     #$06
	bcc     L0B51
	inx
L0B51:	jsr     pushax
	lda     _gluePointer
	sta     ptr1
	lda     _gluePointer+1
	sta     ptr1+1
	ldy     #$03
	lda     (ptr1),y
	jsr     _flipSprite
;
; if ( gluePointer->timeLeft < 60 ) {
;
L0B49:	lda     _gluePointer
	sta     ptr1
	lda     _gluePointer+1
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	cmp     #$3C
;
; } else if ( gluePointer->timeLeft < 120 ) {
;
	bcc     L0B72
	lda     _gluePointer
	sta     ptr1
	lda     _gluePointer+1
	sta     ptr1+1
	lda     (ptr1),y
	cmp     #$78
	bcs     L0B5B
;
; setSpriteFrame(gluePointer->spriteData, glueFrames[GLUE_FRAME_MEDIUM]);
;
	lda     _gluePointer
	ldx     _gluePointer+1
	clc
	adc     #$06
	bcc     L0B5F
	inx
L0B5F:	jsr     pushax
	lda     #<(_glueFrames+4)
	ldx     #>(_glueFrames+4)
;
; } else {
;
	jmp     L1137
;
; setSpriteFrame(gluePointer->spriteData, glueFrames[GLUE_FRAME_BIG]);
;
L0B5B:	lda     _gluePointer
	ldx     _gluePointer+1
	clc
	adc     #$06
	bcc     L0B65
	inx
L0B65:	jsr     pushax
	lda     #<(_glueFrames)
	ldx     #>(_glueFrames)
;
; } else if ( gluePointer->state == GLUE_STATE_FORMING ) {
;
	jmp     L1137
L0B47:	lda     _gluePointer
	sta     ptr1
	lda     _gluePointer+1
	sta     ptr1+1
	lda     (ptr1),y
	cmp     #$02
	bne     L1139
;
; if ( gluePointer->timeLeft < GLUE_FORMING_DURATION_HALF ) {
;
	lda     _gluePointer
	sta     ptr1
	lda     _gluePointer+1
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	cmp     #$08
	bcs     L0B72
;
; setSpriteFrame(gluePointer->spriteData, glueFrames[GLUE_FRAME_MEDIUM]);
;
	lda     _gluePointer
	ldx     _gluePointer+1
	clc
	adc     #$06
	bcc     L0B76
	inx
L0B76:	jsr     pushax
	lda     #<(_glueFrames+4)
	ldx     #>(_glueFrames+4)
;
; } else {
;
	jmp     L1137
;
; setSpriteFrame(gluePointer->spriteData, glueFrames[GLUE_FRAME_SMALL]);
;
L0B72:	lda     _gluePointer
	ldx     _gluePointer+1
	clc
	adc     #$06
	bcc     L0B7C
	inx
L0B7C:	jsr     pushax
	lda     #<(_glueFrames+8)
	ldx     #>(_glueFrames+8)
L1137:	jsr     _setSpriteFrame
;
; oamSpriteIndex = oam_meta_spr(gluePointer->x, gluePointer->y, oamSpriteIndex, gluePointer->spriteData); 
;
	jsr     decsp3
	lda     _gluePointer
	sta     ptr1
	lda     _gluePointer+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	ldy     #$02
	sta     (sp),y
	lda     _gluePointer
	sta     ptr1
	lda     _gluePointer+1
	sta     ptr1+1
	dey
	lda     (ptr1),y
	sta     (sp),y
	lda     _oamSpriteIndex
	dey
	sta     (sp),y
	lda     _gluePointer
	ldx     _gluePointer+1
	clc
	adc     #$06
	bcc     L0B85
	inx
L0B85:	jsr     _oam_meta_spr
	sta     _oamSpriteIndex
;
; for ( i = 0; i < MAX_GLUE_COUNT; ++i ) {
;
L1139:	inc     _i
	jmp     L1138

.endproc

; ---------------------------------------------------------------
; void __near__ updatePlatformSprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updatePlatformSprites: near

.segment	"CODE"

;
; for ( i = 0; i < MAX_PLATFORM_COUNT; ++i ) {
;
	lda     #$00
	sta     _i
L115B:	lda     _i
	cmp     #$03
	bcs     L0B88
;
; platformPointer = &(platformData[i]);
;
	ldx     #$00
	lda     _i
	jsr     mulax5
	clc
	adc     #<(_platformData)
	tay
	txa
	adc     #>(_platformData)
	tax
	tya
	sta     _platformPointer
	stx     _platformPointer+1
;
; if ( platformPointer->isActive == 1 ) {
;
	sta     ptr1
	stx     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	cmp     #$01
	bne     L115C
;
; oamSpriteIndex = oam_meta_spr(platformPointer->x, platformPointer->y, oamSpriteIndex, platformSpriteDataTemplate); 
;
	jsr     decsp3
	lda     _platformPointer
	sta     ptr1
	lda     _platformPointer+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	ldy     #$02
	sta     (sp),y
	lda     _platformPointer
	sta     ptr1
	lda     _platformPointer+1
	sta     ptr1+1
	dey
	lda     (ptr1),y
	sta     (sp),y
	lda     _oamSpriteIndex
	dey
	sta     (sp),y
	lda     #<(_platformSpriteDataTemplate)
	ldx     #>(_platformSpriteDataTemplate)
	jsr     _oam_meta_spr
	sta     _oamSpriteIndex
;
; for ( i = 0; i < MAX_PLATFORM_COUNT; ++i ) {
;
L115C:	inc     _i
	jmp     L115B
;
; }
;
L0B88:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ updatePlayerSprite (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updatePlayerSprite: near

.segment	"CODE"

;
; if ( ( playerState == PLAYER_STATE_NORMAL ) ) {
;
	lda     _playerState
	bne     L1165
;
; if ( ( pad & PAD_LEFT) || ( pad & PAD_RIGHT ) ) {
;
	lda     _pad
	and     #$40
	bne     L1161
	lda     _pad
	and     #$80
	beq     L115E
;
; if ( pad & PAD_RIGHT ) {
;
L1161:	lda     _pad
	and     #$80
	beq     L1162
;
; flipSprite(playerSpriteData, 1);
;
	lda     #<(_playerSpriteData)
	ldx     #>(_playerSpriteData)
	jsr     pushax
	lda     #$01
;
; } else if ( pad & PAD_LEFT ) {
;
	jmp     L115D
L1162:	lda     _pad
	and     #$40
	beq     L1163
;
; flipSprite(playerSpriteData, 0);
;
	lda     #<(_playerSpriteData)
	ldx     #>(_playerSpriteData)
	jsr     pushax
	lda     #$00
L115D:	jsr     _flipSprite
;
; if ( ( frameCount & PLAYER_WALK_ANIMATE_INTERVAL ) == PLAYER_WALK_ANIMATE_INTERVAL ) {
;
L1163:	lda     _frameCount
	and     #$07
	cmp     #$07
	bne     L0BB5
;
; playerFrame ^= 1;
;
	lda     _playerFrame
	eor     #$01
;
; playerFrame = PLAYER_FRAME_STANDING;
;
L115E:	sta     _playerFrame
;
; setSpriteFrame(playerSpriteData, playerFrames[playerFrame]);
;
L0BB5:	lda     #<(_playerSpriteData)
	ldx     #>(_playerSpriteData)
	jsr     pushax
	ldx     #$00
	lda     _playerFrame
	jsr     aslax2
	clc
	adc     #<(_playerFrames)
	tay
	txa
	adc     #>(_playerFrames)
	tax
	tya
;
; } else if ( playerState == PLAYER_STATE_GLUING ) {
;
	jmp     L115F
L1165:	lda     _playerState
	cmp     #$05
	bne     L1166
;
; playerFrame = PLAYER_FRAME_STANDING;
;
	lda     #$00
	sta     _playerFrame
;
; setSpriteFrame(playerSpriteData, playerFrames[playerFrame]);
;
	lda     #<(_playerSpriteData)
	ldx     #>(_playerSpriteData)
	jsr     pushax
	ldx     #$00
	lda     _playerFrame
	jsr     aslax2
	clc
	adc     #<(_playerFrames)
	tay
	txa
	adc     #>(_playerFrames)
	tax
	tya
;
; } else if ( playerState == PLAYER_STATE_JUMPING ) {
;
	jmp     L115F
L1166:	lda     _playerState
	cmp     #$03
	bne     L1168
;
; if ( pad & PAD_RIGHT ) {
;
	lda     _pad
	and     #$80
	beq     L1167
;
; flipSprite(playerSpriteData, 1);
;
	lda     #<(_playerSpriteData)
	ldx     #>(_playerSpriteData)
	jsr     pushax
	lda     #$01
;
; } else if ( pad & PAD_LEFT ) {
;
	jmp     L1160
L1167:	lda     _pad
	and     #$40
	beq     L0BCE
;
; flipSprite(playerSpriteData, 0);
;
	lda     #<(_playerSpriteData)
	ldx     #>(_playerSpriteData)
	jsr     pushax
	lda     #$00
L1160:	jsr     _flipSprite
;
; setSpriteFrame(playerSpriteData, playerFrames[PLAYER_FRAME_JUMPING]);
;
L0BCE:	lda     #<(_playerSpriteData)
	ldx     #>(_playerSpriteData)
	jsr     pushax
	lda     #<(_playerFrames+12)
	ldx     #>(_playerFrames+12)
;
; } else if ( playerState == PLAYER_STATE_CLIMBING ) {
;
	jmp     L115F
L1168:	lda     _playerState
	cmp     #$02
	bne     L1169
;
; if ( ( frameCount & PLAYER_WALK_ANIMATE_INTERVAL ) == PLAYER_WALK_ANIMATE_INTERVAL ) {
;
	lda     _frameCount
	and     #$07
	cmp     #$07
	bne     L0BDA
;
; playerFrame ^= 1;
;
	lda     _playerFrame
	eor     #$01
	sta     _playerFrame
;
; flipSprite(playerSpriteData, playerFrame);
;
	lda     #<(_playerSpriteData)
	ldx     #>(_playerSpriteData)
	jsr     pushax
	lda     _playerFrame
	jsr     _flipSprite
;
; setSpriteFrame(playerSpriteData, playerFrames[PLAYER_FRAME_CLIMBING]);
;
L0BDA:	lda     #<(_playerSpriteData)
	ldx     #>(_playerSpriteData)
	jsr     pushax
	lda     #<(_playerFrames+8)
	ldx     #>(_playerFrames+8)
;
; } else if ( playerState == PLAYER_STATE_DEAD ) {
;
	jmp     L115F
L1169:	lda     _playerState
	cmp     #$01
	bne     L0BE8
;
; setSpriteFrame(playerSpriteData, playerFrames[PLAYER_FRAME_DEAD]);
;
	lda     #<(_playerSpriteData)
	ldx     #>(_playerSpriteData)
	jsr     pushax
	lda     #<(_playerFrames+16)
	ldx     #>(_playerFrames+16)
L115F:	jsr     _setSpriteFrame
;
; oamSpriteIndex = oam_meta_spr(playerX, playerY, oamSpriteIndex, playerSpriteData); 
;
L0BE8:	jsr     decsp3
	lda     _playerX
	ldy     #$02
	sta     (sp),y
	lda     _playerY
	dey
	sta     (sp),y
	lda     _oamSpriteIndex
	dey
	sta     (sp),y
	lda     #<(_playerSpriteData)
	ldx     #>(_playerSpriteData)
	jsr     _oam_meta_spr
	sta     _oamSpriteIndex
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ drawScoreboard (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_drawScoreboard: near

.segment	"CODE"

;
; vram_adr(NTADR_A(2, 3));
;
	ldx     #$20
	lda     #$62
	jsr     _vram_adr
;
; vram_put(0xDD);
;
	lda     #$DD
	jsr     _vram_put
;
; putStr(NTADR_A(3, 3), "000000");
;
	ldx     #$20
	lda     #$63
	jsr     pushax
	lda     #<(L0C05)
	ldx     #>(L0C05)
	jmp     _putStr

.endproc

; ---------------------------------------------------------------
; void __near__ updateScoreboard (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updateScoreboard: near

.segment	"CODE"

;
; if ( !scoreChanged ) {
;
	lda     _scoreChanged
;
; return;
;
	bne     L116E
;
; }
;
	rts
;
; valueToConvert = playerScore;
;
L116E:	lda     _playerScore
	sta     _valueToConvert
	lda     _playerScore+1
	sta     _valueToConvert+1
;
; for ( i = 0; i < 4; ++i ) {
;
	lda     #$00
	sta     _i
L116B:	lda     _i
	cmp     #$04
	bcs     L116C
;
; digitsArray[i] = 0;
;
	ldy     _i
	lda     #$00
	sta     _digitsArray,y
;
; for ( i = 0; i < 4; ++i ) {
;
	inc     _i
	jmp     L116B
;
; decadeCount = 0;
;
L116C:	lda     #$00
	sta     _decadeCount
;
; while ( valueToConvert >= 1000 ) {
;
	jmp     L0C1C
;
; valueToConvert -= 1000;
;
L0C1A:	lda     _valueToConvert
	sec
	sbc     #$E8
	sta     _valueToConvert
	lda     _valueToConvert+1
	sbc     #$03
	sta     _valueToConvert+1
;
; ++decadeCount;
;
	inc     _decadeCount
;
; while ( valueToConvert >= 1000 ) {
;
L0C1C:	lda     _valueToConvert
	cmp     #$E8
	lda     _valueToConvert+1
	sbc     #$03
	bcs     L0C1A
;
; digitsArray[0] = decadeCount;
;
	lda     _decadeCount
	sta     _digitsArray
;
; decadeCount = 0;
;
	lda     #$00
	sta     _decadeCount
;
; while ( valueToConvert >= 100 ) {
;
	jmp     L0C28
;
; valueToConvert -= 100;
;
L0C26:	lda     _valueToConvert
	sec
	sbc     #$64
	sta     _valueToConvert
	bcs     L0C2C
	dec     _valueToConvert+1
;
; ++decadeCount;
;
L0C2C:	inc     _decadeCount
;
; while ( valueToConvert >= 100 ) {
;
L0C28:	lda     _valueToConvert
	cmp     #$64
	lda     _valueToConvert+1
	sbc     #$00
	bcs     L0C26
;
; digitsArray[1] = decadeCount;
;
	lda     _decadeCount
	sta     _digitsArray+1
;
; decadeCount = 0;
;
	lda     #$00
	sta     _decadeCount
;
; while ( valueToConvert >= 10 ) {
;
	jmp     L0C35
;
; valueToConvert -= 10;
;
L0C33:	lda     _valueToConvert
	sec
	sbc     #$0A
	sta     _valueToConvert
	bcs     L0C39
	dec     _valueToConvert+1
;
; ++decadeCount;
;
L0C39:	inc     _decadeCount
;
; while ( valueToConvert >= 10 ) {
;
L0C35:	lda     _valueToConvert
	cmp     #$0A
	lda     _valueToConvert+1
	sbc     #$00
	bcs     L0C33
;
; digitsArray[2] = decadeCount;
;
	lda     _decadeCount
	sta     _digitsArray+2
;
; digitsArray[3] = valueToConvert;
;
	lda     _valueToConvert
	sta     _digitsArray+3
;
; for ( i = 0; i < 4; ++i ) {
;
	lda     #$00
	sta     _i
L116D:	lda     _i
	cmp     #$04
	bcs     L0C42
;
; scoreUpdateList[3 + i] = digitsArray[i] + 0xD0;
;
	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L116A
	inx
	clc
L116A:	adc     #<(_scoreUpdateList)
	sta     ptr1
	txa
	adc     #>(_scoreUpdateList)
	sta     ptr1+1
	ldy     _i
	lda     _digitsArray,y
	clc
	adc     #$D0
	ldy     #$00
	sta     (ptr1),y
;
; for ( i = 0; i < 4; ++i ) {
;
	inc     _i
	jmp     L116D
;
; set_vram_update(scoreUpdateList);
;
L0C42:	lda     #<(_scoreUpdateList)
	ldx     #>(_scoreUpdateList)
	jsr     _set_vram_update
;
; scoreChanged = 0;
;
	lda     #$00
	sta     _scoreChanged
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ addScore (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_addScore: near

.segment	"CODE"

;
; void __fastcall__ addScore(u8 addValue) {
;
	jsr     pusha
;
; playerScore += addValue;
;
	ldy     #$00
	lda     (sp),y
	clc
	adc     _playerScore
	sta     _playerScore
	tya
	adc     _playerScore+1
	sta     _playerScore+1
;
; scoreChanged = 1;
;
	lda     #$01
	sta     _scoreChanged
;
; }
;
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ four_Sides (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_four_Sides: near

.segment	"CODE"

;
; void __fastcall__ four_Sides(u8 originX, u8 originY) {
;
	jsr     pusha
;
; leftSide = originX + 2;
;
	ldy     #$01
	lda     (sp),y
	clc
	adc     #$02
	sta     _leftSide
;
; rightSide = originX + 14;
;
	lda     (sp),y
	clc
	adc     #$0E
	sta     _rightSide
;
; topSide = originY + 4;
;
	dey
	lda     (sp),y
	clc
	adc     #$04
	sta     _topSide
;
; bottomSide = originY + 15;
;
	lda     (sp),y
	clc
	adc     #$0F
	sta     _bottomSide
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ glueFourSides (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_glueFourSides: near

.segment	"CODE"

;
; void __fastcall__ glueFourSides(u8 originX, u8 originY) {
;
	jsr     pusha
;
; leftSide = originX + 6;
;
	ldy     #$01
	lda     (sp),y
	clc
	adc     #$06
	sta     _leftSide
;
; rightSide = originX + 9;
;
	lda     (sp),y
	clc
	adc     #$09
	sta     _rightSide
;
; topSide = originY + 6;
;
	dey
	lda     (sp),y
	clc
	adc     #$06
	sta     _topSide
;
; bottomSide = originY + 14;
;
	lda     (sp),y
	clc
	adc     #$0E
	sta     _bottomSide
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ four_SidesSmall (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_four_SidesSmall: near

.segment	"CODE"

;
; void __fastcall__ four_SidesSmall(u8 originX, u8 originY) {
;
	jsr     pusha
;
; leftSide = originX + 1;
;
	ldy     #$01
	lda     (sp),y
	clc
	adc     #$01
	sta     _leftSide
;
; rightSide = originX + 7;
;
	lda     (sp),y
	clc
	adc     #$07
	sta     _rightSide
;
; topSide = originY;
;
	dey
	lda     (sp),y
	sta     _topSide
;
; bottomSide = originY + 7;
;
	lda     (sp),y
	clc
	adc     #$07
	sta     _bottomSide
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ getCollisionIndex (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_getCollisionIndex: near

.segment	"CODE"

;
; void __fastcall__ getCollisionIndex(u8 screenX, u8 screenY) {
;
	jsr     pusha
;
; collisionIndex = ((screenX & 0xf0) >> 4) + (screenY & 0xf0);
;
	ldy     #$01
	lda     (sp),y
	ldx     #$00
	and     #$F0
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     (sp,x)
	and     #$F0
	clc
	adc     ptr1
	bcc     L116F
	inx
L116F:	sta     _collisionIndex
	stx     _collisionIndex+1
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ collideCheckVertical (unsigned char, unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_collideCheckVertical: near

.segment	"CODE"

;
; void __fastcall__ collideCheckVertical(u8 originX, u8 originY, u8 direction) {
;
	jsr     pusha
;
; leftSide = originX + 3;
;
	ldy     #$02
	lda     (sp),y
	clc
	adc     #$03
	sta     _leftSide
;
; rightSide = originX + 13;
;
	lda     (sp),y
	clc
	adc     #$0D
	sta     _rightSide
;
; topSide = originY + 10;
;
	dey
	lda     (sp),y
	clc
	adc     #$0A
	sta     _topSide
;
; bottomSide = originY + 16;
;
	lda     (sp),y
	clc
	adc     #$10
	sta     _bottomSide
;
; collisionIndex = 0;
;
	lda     #$00
	sta     _collisionIndex
	sta     _collisionIndex+1
;
; verticalCollideCheck = TILE_NOCOLLIDE;
;
	sta     _verticalCollideCheck
;
; if ( direction & PAD_UP ) {
;
	dey
	lda     (sp),y
	and     #$10
	beq     L1173
;
; getCollisionIndex(rightSide - 4, topSide);
;
	lda     _rightSide
	sec
	sbc     #$04
	jsr     pusha
	lda     _topSide
	jsr     _getCollisionIndex
;
; if ( collisionMap[collisionIndex] != TILE_ALLCOLLIDE )  {
;
	lda     #<(_collisionMap)
	sta     ptr1
	lda     #>(_collisionMap)
	clc
	adc     _collisionIndex+1
	sta     ptr1+1
	ldy     _collisionIndex
	lda     (ptr1),y
	cmp     #$01
	beq     L0C9C
;
; getCollisionIndex(leftSide + 4, topSide);
;
	lda     _leftSide
	clc
	adc     #$04
	jsr     pusha
	lda     _topSide
	jsr     _getCollisionIndex
;
; verticalCollideCheck = collisionMap[collisionIndex]; 
;
L0C9C:	lda     #<(_collisionMap)
	sta     ptr1
	lda     #>(_collisionMap)
	clc
	adc     _collisionIndex+1
	sta     ptr1+1
	ldy     _collisionIndex
	lda     (ptr1),y
	sta     _verticalCollideCheck
;
; } else if ( direction & PAD_DOWN ) {
;
	jmp     incsp3
L1173:	lda     (sp),y
	and     #$20
	bne     L117A
;
; }
;
	jmp     incsp3
;
; getCollisionIndex(rightSide, bottomSide);
;
L117A:	lda     _rightSide
	jsr     pusha
	lda     _bottomSide
	jsr     _getCollisionIndex
;
; if ( collisionMap[collisionIndex] != TILE_ALLCOLLIDE ) {
;
	lda     #<(_collisionMap)
	sta     ptr1
	lda     #>(_collisionMap)
	clc
	adc     _collisionIndex+1
	sta     ptr1+1
	ldy     _collisionIndex
	lda     (ptr1),y
	cmp     #$01
	beq     L0CAC
;
; getCollisionIndex(leftSide, bottomSide);
;
	lda     _leftSide
	jsr     pusha
	lda     _bottomSide
	jsr     _getCollisionIndex
;
; verticalCollideCheck = collisionMap[collisionIndex];   
;
L0CAC:	lda     #<(_collisionMap)
	sta     ptr1
	lda     #>(_collisionMap)
	clc
	adc     _collisionIndex+1
	sta     ptr1+1
	ldy     _collisionIndex
	lda     (ptr1),y
	sta     _verticalCollideCheck
;
; if ( collisionMap[collisionIndex] != TILE_ALLCOLLIDE ) {
;
	lda     #<(_collisionMap)
	sta     ptr1
	lda     #>(_collisionMap)
	clc
	adc     _collisionIndex+1
	sta     ptr1+1
	ldy     _collisionIndex
	lda     (ptr1),y
	cmp     #$01
	bne     L117B
;
; }
;
	jmp     incsp3
;
; for ( platformIndex = 0; platformIndex < MAX_PLATFORM_COUNT; ++platformIndex ) {
;
L117B:	lda     #$00
	sta     _platformIndex
L1174:	lda     _platformIndex
	cmp     #$03
	bcc     L117C
;
; }
;
	jmp     incsp3
;
; platformPointer = &(platformData[platformIndex]);
;
L117C:	ldx     #$00
	lda     _platformIndex
	jsr     mulax5
	clc
	adc     #<(_platformData)
	tay
	txa
	adc     #>(_platformData)
	tax
	tya
	sta     _platformPointer
	stx     _platformPointer+1
;
; if ( platformPointer->isActive == 1 ) {
;
	sta     ptr1
	stx     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	cmp     #$01
	jne     L1179
;
; platformTop = platformPointer->y;
;
	lda     _platformPointer
	sta     ptr1
	lda     _platformPointer+1
	sta     ptr1+1
	dey
	lda     (ptr1),y
	sta     _platformTop
;
; platformBottom = platformPointer->y + 16;
;
	lda     _platformPointer
	sta     ptr1
	lda     _platformPointer+1
	sta     ptr1+1
	lda     (ptr1),y
	clc
	adc     #$10
	sta     _platformBottom
;
; platformLeft = platformPointer->x;
;
	lda     _platformPointer
	sta     ptr1
	lda     _platformPointer+1
	sta     ptr1+1
	dey
	lda     (ptr1),y
	sta     _platformLeft
;
; platformRight = platformPointer->x + 16;
;
	lda     _platformPointer
	sta     ptr1
	lda     _platformPointer+1
	sta     ptr1+1
	lda     (ptr1),y
	clc
	adc     #$10
	sta     _platformRight
;
; if ( !( rightSide  <  platformLeft || 
;
	lda     _rightSide
	cmp     _platformLeft
	bcc     L1178
;
; leftSide   > platformRight || 
;
	lda     _leftSide
	sec
	sbc     _platformRight
	sta     tmp1
	lda     tmp1
	beq     L1175
	bcs     L1178
;
; bottomSide <  platformTop  ||
;
L1175:	lda     _bottomSide
	cmp     _platformTop
	bcc     L1178
;
; topSide    > platformBottom ) ) {
;
	lda     _topSide
	sec
	sbc     _platformBottom
	sta     tmp1
	lda     tmp1
	beq     L0CD3
	bcs     L1178
	tya
	jmp     L0CD3
L1178:	lda     #$01
L0CD3:	jsr     bnega
	beq     L0CD0
;
; verticalCollideCheck = TILE_PLATFORM;
;
	lda     #$0D
	sta     _verticalCollideCheck
;
; platformPointer->playerColliding = 1;
;
	lda     _platformPointer
	sta     ptr1
	lda     _platformPointer+1
	sta     ptr1+1
	lda     #$01
	ldy     #$04
	sta     (ptr1),y
;
; playerPlatformStuck = 1;
;
	sta     _playerPlatformStuck
;
; } else {
;
	jmp     L1179
;
; platformPointer->playerColliding = 0;
;
L0CD0:	lda     _platformPointer
	sta     ptr1
	lda     _platformPointer+1
	sta     ptr1+1
	tya
	ldy     #$04
	sta     (ptr1),y
;
; for ( platformIndex = 0; platformIndex < MAX_PLATFORM_COUNT; ++platformIndex ) {
;
L1179:	inc     _platformIndex
	jmp     L1174

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ collideCheckHorizontal (unsigned char, unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_collideCheckHorizontal: near

.segment	"CODE"

;
; void __fastcall__ collideCheckHorizontal(u8 originX, u8 originY, u8 direction) {
;
	jsr     pusha
;
; leftSide = originX + 3;
;
	ldy     #$02
	lda     (sp),y
	clc
	adc     #$03
	sta     _leftSide
;
; rightSide = originX + 13;
;
	lda     (sp),y
	clc
	adc     #$0D
	sta     _rightSide
;
; topSide = originY + 10;
;
	dey
	lda     (sp),y
	clc
	adc     #$0A
	sta     _topSide
;
; bottomSide = originY + 16;
;
	lda     (sp),y
	clc
	adc     #$10
	sta     _bottomSide
;
; if ( direction & PAD_LEFT ) {
;
	dey
	lda     (sp),y
	and     #$40
	beq     L117F
;
; getCollisionIndex(leftSide, topSide);
;
	lda     _leftSide
	jsr     pusha
	lda     _topSide
	jsr     _getCollisionIndex
;
; if ( collisionMap[collisionIndex] == TILE_NOCOLLIDE ) {
;
	lda     #<(_collisionMap)
	sta     ptr1
	lda     #>(_collisionMap)
	clc
	adc     _collisionIndex+1
	sta     ptr1+1
	ldy     _collisionIndex
	lda     (ptr1),y
	bne     L0CF5
;
; getCollisionIndex(leftSide, bottomSide);
;
	lda     _leftSide
;
; } else if ( direction & PAD_RIGHT ) {
;
	jmp     L1181
L117F:	lda     (sp),y
	and     #$80
	beq     L0CF5
;
; getCollisionIndex(rightSide, topSide);
;
	lda     _rightSide
	jsr     pusha
	lda     _topSide
	jsr     _getCollisionIndex
;
; if ( collisionMap[collisionIndex] == TILE_NOCOLLIDE ) {
;
	lda     #<(_collisionMap)
	sta     ptr1
	lda     #>(_collisionMap)
	clc
	adc     _collisionIndex+1
	sta     ptr1+1
	ldy     _collisionIndex
	lda     (ptr1),y
	bne     L0CF5
;
; getCollisionIndex(rightSide, bottomSide);
;
	lda     _rightSide
L1181:	jsr     pusha
	lda     _bottomSide
	jsr     _getCollisionIndex
;
; horizontalCollideCheck = collisionMap[collisionIndex];
;
L0CF5:	lda     #<(_collisionMap)
	sta     ptr1
	lda     #>(_collisionMap)
	clc
	adc     _collisionIndex+1
	sta     ptr1+1
	ldy     _collisionIndex
	lda     (ptr1),y
	sta     _horizontalCollideCheck
;
; }
;
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ collideCheckHorizontalFull (unsigned char, unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_collideCheckHorizontalFull: near

.segment	"CODE"

;
; void __fastcall__ collideCheckHorizontalFull(u8 originX, u8 originY, u8 direction) {
;
	jsr     pusha
;
; leftSide = originX;
;
	ldy     #$02
	lda     (sp),y
	sta     _leftSide
;
; rightSide = originX + 15;
;
	lda     (sp),y
	clc
	adc     #$0F
	sta     _rightSide
;
; topSide = originY + 8;
;
	dey
	lda     (sp),y
	clc
	adc     #$08
	sta     _topSide
;
; if ( direction & PAD_LEFT ) {
;
	dey
	lda     (sp),y
	and     #$40
	beq     L1184
;
; getCollisionIndex(leftSide, topSide);
;
	lda     _leftSide
;
; } else if ( direction & PAD_RIGHT ) {
;
	jmp     L1186
L1184:	lda     (sp),y
	and     #$80
	beq     L0D12
;
; getCollisionIndex(rightSide, topSide);
;
	lda     _rightSide
L1186:	jsr     pusha
	lda     _topSide
	jsr     _getCollisionIndex
;
; horizontalCollideCheck = collisionMap[collisionIndex];
;
L0D12:	lda     #<(_collisionMap)
	sta     ptr1
	lda     #>(_collisionMap)
	clc
	adc     _collisionIndex+1
	sta     ptr1+1
	ldy     _collisionIndex
	lda     (ptr1),y
	sta     _horizontalCollideCheck
;
; }
;
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ bgHorizCollideCheck (__near__ unsigned char *, __near__ unsigned char *, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bgHorizCollideCheck: near

.segment	"CODE"

;
; void __fastcall__ bgHorizCollideCheck(u8 *x, u8 *y, u8 dir) {
;
	jsr     pusha
;
; collideCheckHorizontal(*x, *y, dir);
;
	jsr     decsp2
	ldy     #$06
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	iny
	sta     (sp),y
	ldy     #$04
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	sta     (sp),y
	ldy     #$02
	lda     (sp),y
	jsr     _collideCheckHorizontal
;
; if ( horizontalCollideCheck == TILE_ALLCOLLIDE ) {
;
	lda     _horizontalCollideCheck
	cmp     #$01
	bne     L0D29
;
; if ( dir & PAD_LEFT ) {
;
	ldy     #$00
	lda     (sp),y
	and     #$40
	beq     L1189
;
; *x = (*x & 0xf0) + 13;
;
	ldy     #$06
	jsr     pushwysp
	ldy     #$06
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	and     #$F0
	clc
	adc     #$0D
;
; } else if ( dir & PAD_RIGHT ) {
;
	jmp     L1187
L1189:	lda     (sp),y
	and     #$80
	beq     L0D29
;
; *x = (*x & 0xf0) + 2;
;
	ldy     #$06
	jsr     pushwysp
	ldy     #$06
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	and     #$F0
	clc
	adc     #$02
L1187:	jsr     staspidx
;
; }
;
L0D29:	jmp     incsp5

.endproc

; ---------------------------------------------------------------
; void __near__ checkPlayerLadderCollision (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_checkPlayerLadderCollision: near

.segment	"CODE"

;
; leftSide = playerX + 6;
;
	lda     _playerX
	clc
	adc     #$06
	sta     _leftSide
;
; rightSide = playerX + 10;
;
	lda     _playerX
	clc
	adc     #$0A
	sta     _rightSide
;
; bottomSide = playerY + 15;
;
	lda     _playerY
	clc
	adc     #$0F
	sta     _bottomSide
;
; getCollisionIndex(leftSide, bottomSide);
;
	lda     _leftSide
	jsr     pusha
	lda     _bottomSide
	jsr     _getCollisionIndex
;
; collisionLeft = collisionMap[collisionIndex];
;
	lda     #<(_collisionMap)
	sta     ptr1
	lda     #>(_collisionMap)
	clc
	adc     _collisionIndex+1
	sta     ptr1+1
	ldy     _collisionIndex
	lda     (ptr1),y
	sta     _collisionLeft
;
; getCollisionIndex(rightSide, bottomSide);
;
	lda     _rightSide
	jsr     pusha
	lda     _bottomSide
	jsr     _getCollisionIndex
;
; collisionRight = collisionMap[collisionIndex];
;
	lda     #<(_collisionMap)
	sta     ptr1
	lda     #>(_collisionMap)
	clc
	adc     _collisionIndex+1
	sta     ptr1+1
	ldy     _collisionIndex
	lda     (ptr1),y
	sta     _collisionRight
;
; ( ( collisionLeft == TILE_LADDER ) || ( collisionLeft == TILE_LADDER_TOP ) ) &&
;
	lda     _collisionLeft
	cmp     #$06
	beq     L118A
	cmp     #$07
	beq     L118A
	lda     #$00
	jmp     L1195
;
; ( ( collisionRight == TILE_LADDER ) || ( collisionRight == TILE_LADDER_TOP ) ) 
;
L118A:	lda     _collisionRight
	cmp     #$06
	beq     L1190
	cmp     #$07
	beq     L1190
	lda     #$00
	jmp     L1195
;
; playerState = PLAYER_STATE_CLIMBING;
;
L1190:	lda     #$02
	sta     _playerState
;
; if ( ( collisionLeft == TILE_LADDER ) || ( collisionLeft == TILE_LADDER_TOP ) ) {
;
	lda     _collisionLeft
	cmp     #$06
	beq     L1191
	cmp     #$07
	bne     L1192
;
; playerX = ( playerX + 7 ) & 0xf0; 
;
L1191:	lda     _playerX
	clc
	adc     #$07
	and     #$F0
	sta     _playerX
;
; } else if ( ( collisionRight == TILE_LADDER )  || ( collisionRight == TILE_LADDER_TOP ) ) {
;
	rts
L1192:	lda     _collisionRight
	cmp     #$06
	beq     L1193
	cmp     #$07
	bne     L0D5D
;
; playerX = ( playerX + 11 ) & 0xf0;
;
L1193:	lda     _playerX
	clc
	adc     #$0B
	and     #$F0
	sta     _playerX
;
; } else {
;
L0D5D:	rts
;
; playerState = PLAYER_STATE_NORMAL;
;
L1195:	sta     _playerState
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ playerEnemyCollideCheck (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_playerEnemyCollideCheck: near

.segment	"CODE"

;
; enemyIndex = 0;
;
	lda     #$00
	sta     _enemyIndex
;
; enemyColliding = 0;
;
	sta     _enemyColliding
;
; enemyCollidedIndex = 0;
;
	sta     _enemyCollidedIndex
;
; playerSittingOnSprite = 0;
;
	sta     _playerSittingOnSprite
;
; while ( !enemyColliding && ( enemyIndex < numEnemies ) ) {
;
	jmp     L0D74
;
; currentEnemy = &(enemyData[enemyIndex]);
;
L1199:	lda     _enemyIndex
	jsr     mulax6
	clc
	adc     #<(_enemyData)
	tay
	txa
	adc     #>(_enemyData)
	tax
	tya
	sta     _currentEnemy
	stx     _currentEnemy+1
;
; enemyTop = currentEnemy->y + 3;
;
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	clc
	adc     #$03
	sta     _enemyTop
;
; enemyBottom = currentEnemy->y + 13;
;
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	lda     (ptr1),y
	clc
	adc     #$0D
	sta     _enemyBottom
;
; enemyLeft = currentEnemy->x + 2;
;
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	dey
	lda     (ptr1),y
	clc
	adc     #$02
	sta     _enemyLeft
;
; enemyRight = currentEnemy->x + 14;
;
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	lda     (ptr1),y
	clc
	adc     #$0E
	sta     _enemyRight
;
; if ( !( rightSide  <  enemyLeft  || 
;
	lda     _rightSide
	cmp     _enemyLeft
	bcc     L119D
;
; leftSide   > enemyRight || 
;
	lda     _leftSide
	sec
	sbc     _enemyRight
	sta     tmp1
	lda     tmp1
	beq     L119A
	bcs     L119D
;
; bottomSide <  enemyTop   || 
;
L119A:	lda     _bottomSide
	cmp     _enemyTop
	bcc     L119D
;
; topSide    > enemyBottom ) ) {
;
	lda     _topSide
	sec
	sbc     _enemyBottom
	sta     tmp1
	lda     tmp1
	beq     L0D8C
	bcs     L119D
	tya
	jmp     L0D8C
L119D:	lda     #$01
L0D8C:	jsr     bnega
	jeq     L11AA
;
; switch ( currentEnemy->state ) {
;
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	ldy     #$04
	lda     (ptr1),y
;
; }
;
	beq     L119E
	cmp     #$01
	beq     L119F
	cmp     #$03
	jeq     L11AA
	jmp     L11AA
;
; enemyCollidedIndex = enemyIndex;
;
L119E:	lda     _enemyIndex
	sta     _enemyCollidedIndex
;
; killPlayer();
;
	jsr     _killPlayer
;
; break;
;
	jmp     L11AA
;
; if ( ( bottomSide >= (enemyTop) ) && ( bottomSide <= ( enemyTop + 4 ) ) ) {
;
L119F:	lda     _bottomSide
	cmp     _enemyTop
	bcc     L11A4
	jsr     pusha0
	lda     _enemyTop
	clc
	adc     #$04
	bcc     L0D9E
	ldx     #$01
L0D9E:	jsr     tosicmp
	bcc     L0D98
	bne     L11A4
;
; if ( !( pad & PAD_UP ) && ( playerVertVel < 0 ) ) {
;
L0D98:	lda     _pad
	and     #$10
	bne     L11AA
	lda     _playerVertVel
	asl     a
	bcc     L11AA
;
; playerY = ( enemyTop - 15 );
;
	lda     _enemyTop
	sec
	sbc     #$0F
	sta     _playerY
;
; playerSittingOnSprite = 1;
;
	lda     #$01
	sta     _playerSittingOnSprite
;
; playerState = PLAYER_STATE_NORMAL;       
;
	lda     #$00
	sta     _playerState
;
; playerFrame = PLAYER_FRAME_STANDING;                         
;
	sta     _playerFrame
;
; } else if ( ( rightSide > enemyLeft ) && ( leftSide < enemyLeft ) && ( pad & PAD_RIGHT ) ) {
;
	jmp     L11AA
L11A4:	lda     _rightSide
	sec
	sbc     _enemyLeft
	bcc     L11A7
	beq     L11A7
	lda     _leftSide
	cmp     _enemyLeft
	bcs     L11A7
	lda     _pad
	and     #$80
	beq     L11A7
;
; playerX = ( enemyLeft - 13 );
;
	lda     _enemyLeft
	sec
	sbc     #$0D
;
; } else if ( ( leftSide < enemyRight ) && ( rightSide > enemyRight ) && ( pad & PAD_LEFT ) ) { 
;
	jmp     L11AD
L11A7:	lda     _leftSide
	cmp     _enemyRight
	bcs     L11AA
	lda     _rightSide
	sec
	sbc     _enemyRight
	bcc     L11AA
	beq     L11AA
	lda     _pad
	and     #$40
	beq     L11AA
;
; playerX = ( enemyRight - 3 );
;
	lda     _enemyRight
	sec
	sbc     #$03
L11AD:	sta     _playerX
;
; ++enemyIndex;
;
L11AA:	inc     _enemyIndex
;
; while ( !enemyColliding && ( enemyIndex < numEnemies ) ) {
;
L0D74:	lda     _enemyColliding
	bne     L11AB
	tax
	lda     _enemyIndex
	cmp     _numEnemies
	jcc     L1199
L11AB:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ genericEnemyCollideCheck (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_genericEnemyCollideCheck: near

.segment	"CODE"

;
; enemyIndex = 0;
;
	lda     #$00
	sta     _enemyIndex
;
; enemyColliding = 0;
;
	sta     _enemyColliding
;
; enemyCollidedIndex = 0;
;
	sta     _enemyCollidedIndex
;
; while ( !enemyColliding && ( enemyIndex < numEnemies ) ) {
;
	jmp     L0DD5
;
; currentEnemy = &(enemyData[enemyIndex]);
;
L11AF:	lda     _enemyIndex
	jsr     mulax6
	clc
	adc     #<(_enemyData)
	tay
	txa
	adc     #>(_enemyData)
	tax
	tya
	sta     _currentEnemy
	stx     _currentEnemy+1
;
; enemyTop = currentEnemy->y + 2;
;
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	clc
	adc     #$02
	sta     _enemyTop
;
; enemyBottom = currentEnemy->y + 14;
;
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	lda     (ptr1),y
	clc
	adc     #$0E
	sta     _enemyBottom
;
; enemyLeft = currentEnemy->x + 2;
;
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	dey
	lda     (ptr1),y
	clc
	adc     #$02
	sta     _enemyLeft
;
; enemyRight = currentEnemy->x + 14;
;
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	lda     (ptr1),y
	clc
	adc     #$0E
	sta     _enemyRight
;
; if ( !( rightSide  <  enemyLeft  || 
;
	lda     _rightSide
	cmp     _enemyLeft
	bcc     L11B0
;
; leftSide   >= enemyRight || 
;
	lda     _leftSide
	cmp     _enemyRight
	bcs     L11B0
;
; bottomSide <  enemyTop   || 
;
	lda     _bottomSide
	cmp     _enemyTop
	bcc     L11B0
;
; topSide    >= enemyBottom ) ) {
;
	lda     _topSide
	cmp     _enemyBottom
	bcs     L11B0
	tya
	jmp     L0DED
L11B0:	lda     #$01
L0DED:	jsr     bnega
	beq     L11B2
;
; switch ( currentEnemy->state ) {
;
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	ldy     #$04
	lda     (ptr1),y
;
; }
;
	beq     L11B1
	cmp     #$03
	beq     L11B2
	jmp     L11B2
;
; enemyColliding = 1;
;
L11B1:	lda     #$01
	sta     _enemyColliding
;
; enemyCollidedIndex = enemyIndex;
;
	lda     _enemyIndex
	sta     _enemyCollidedIndex
;
; ++enemyIndex;
;
L11B2:	inc     _enemyIndex
;
; while ( !enemyColliding && ( enemyIndex < numEnemies ) ) {
;
L0DD5:	lda     _enemyColliding
	bne     L11B3
	tax
	lda     _enemyIndex
	cmp     _numEnemies
	jcc     L11AF
L11B3:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ glueEnemyCollideCheck (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_glueEnemyCollideCheck: near

.segment	"CODE"

;
; for ( i = 0; i < MAX_GLUE_COUNT; ++i ) {
;
	lda     #$00
	sta     _i
L11B5:	lda     _i
	beq     L11B7
;
; }
;
	rts
;
; gluePointer = &(glueData[i]);
;
L11B7:	lda     _i
	jsr     pusha0
	lda     #$17
	jsr     tosmula0
	clc
	adc     #<(_glueData)
	tay
	txa
	adc     #>(_glueData)
	tax
	tya
	sta     _gluePointer
	stx     _gluePointer+1
;
; if ( gluePointer->state != GLUE_STATE_INACTIVE ) {
;
	sta     ptr1
	stx     ptr1+1
	ldy     #$04
	lda     (ptr1),y
	jeq     L11B6
;
; glueFourSides(gluePointer->x, gluePointer->y);
;
	lda     _gluePointer
	sta     ptr1
	lda     _gluePointer+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	jsr     pusha
	lda     _gluePointer
	sta     ptr1
	lda     _gluePointer+1
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	jsr     _glueFourSides
;
; genericEnemyCollideCheck();
;
	jsr     _genericEnemyCollideCheck
;
; if ( enemyColliding ) {
;
	lda     _enemyColliding
	beq     L11B6
;
; if ( gluePointer->state == GLUE_STATE_ACTIVE ) {
;
	lda     _gluePointer
	sta     ptr1
	lda     _gluePointer+1
	sta     ptr1+1
	ldy     #$04
	lda     (ptr1),y
	cmp     #$01
	bne     L0E0F
;
; currentEnemy = &(enemyData[enemyCollidedIndex]);
;
	ldx     #$00
	lda     _enemyCollidedIndex
	jsr     mulax6
	clc
	adc     #<(_enemyData)
	tay
	txa
	adc     #>(_enemyData)
	tax
	tya
	sta     _currentEnemy
	stx     _currentEnemy+1
;
; currentEnemy->state = ENEMY_STATE_GLUED;
;
	sta     ptr1
	stx     ptr1+1
	lda     #$01
	ldy     #$04
	sta     (ptr1),y
;
; currentEnemy->glueTimeLeft = GLUE_INIT_DURATION;
;
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	lda     #$FF
	iny
	sta     (ptr1),y
;
; sfx_play(SFX_GLUESTUCK, CHANNEL_SQUARE1);     
;
	lda     #$03
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; gluePointer->state = GLUE_STATE_INACTIVE;
;
L0E0F:	lda     _gluePointer
	sta     ptr1
	lda     _gluePointer+1
	sta     ptr1+1
	lda     #$00
	ldy     #$04
	sta     (ptr1),y
;
; gluePointer->x = 0;
;
	lda     _gluePointer
	sta     ptr1
	lda     _gluePointer+1
	sta     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
;
; gluePointer->y = 0;    
;
	lda     _gluePointer
	sta     ptr1
	lda     _gluePointer+1
	sta     ptr1+1
	tya
	iny
	sta     (ptr1),y
;
; for ( i = 0; i < MAX_GLUE_COUNT; ++i ) {
;
L11B6:	inc     _i
	jmp     L11B5

.endproc

; ---------------------------------------------------------------
; void __near__ glueCollideCheck (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_glueCollideCheck: near

.segment	"CODE"

;
; glueIndex = 0;
;
	lda     #$00
	sta     _glueIndex
;
; glueColliding = 0;
;
	sta     _glueColliding
;
; glueCollidedIndex = 0;
;
	sta     _glueCollidedIndex
;
; while ( !glueColliding && ( glueIndex < MAX_GLUE_COUNT ) ) {
;
	jmp     L0E2B
;
; gluePointer = &(glueData[glueIndex]);
;
L11B9:	lda     _glueIndex
	jsr     pushax
	lda     #$17
	jsr     tosmulax
	clc
	adc     #<(_glueData)
	tay
	txa
	adc     #>(_glueData)
	tax
	tya
	sta     _gluePointer
	stx     _gluePointer+1
;
; if ( gluePointer->state == GLUE_STATE_ACTIVE ) {
;
	sta     ptr1
	stx     ptr1+1
	ldy     #$04
	lda     (ptr1),y
	cmp     #$01
	jne     L11BB
;
; glueTop = gluePointer->y + 2;
;
	lda     _gluePointer
	sta     ptr1
	lda     _gluePointer+1
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	clc
	adc     #$02
	sta     _glueTop
;
; glueBottom = gluePointer->y + 14;
;
	lda     _gluePointer
	sta     ptr1
	lda     _gluePointer+1
	sta     ptr1+1
	lda     (ptr1),y
	clc
	adc     #$0E
	sta     _glueBottom
;
; glueLeft = gluePointer->x + 2;
;
	lda     _gluePointer
	sta     ptr1
	lda     _gluePointer+1
	sta     ptr1+1
	dey
	lda     (ptr1),y
	clc
	adc     #$02
	sta     _glueLeft
;
; glueRight = gluePointer->x + 14;
;
	lda     _gluePointer
	sta     ptr1
	lda     _gluePointer+1
	sta     ptr1+1
	lda     (ptr1),y
	clc
	adc     #$0E
	sta     _glueRight
;
; if ( !( rightSide  <  glueLeft  || 
;
	lda     _rightSide
	cmp     _glueLeft
	bcc     L11BA
;
; leftSide   >= glueRight || 
;
	lda     _leftSide
	cmp     _glueRight
	bcs     L11BA
;
; bottomSide <  glueTop   || 
;
	lda     _bottomSide
	cmp     _glueTop
	bcc     L11BA
;
; topSide    >= glueBottom ) ) {
;
	lda     _topSide
	cmp     _glueBottom
	bcs     L11BA
	tya
	jmp     L0E45
L11BA:	lda     #$01
L0E45:	jsr     bnega
	beq     L11BB
;
; glueColliding = 1;
;
	lda     #$01
	sta     _glueColliding
;
; glueCollidedIndex = glueIndex;    
;
	lda     _glueIndex
	sta     _glueCollidedIndex
;
; ++glueIndex;
;
L11BB:	inc     _glueIndex
;
; while ( !glueColliding && ( glueIndex < MAX_GLUE_COUNT ) ) {
;
L0E2B:	lda     _glueColliding
	bne     L11BC
	tax
	lda     _glueIndex
	jeq     L11B9
L11BC:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ updateEnemyMovement (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updateEnemyMovement: near

.segment	"CODE"

;
; for ( i = 0; i < numEnemies; i++ ) {
;
	lda     #$00
	sta     _i
	tax
L11BF:	lda     _i
	cmp     _numEnemies
	bcc     L11DD
;
; }
;
	rts
;
; currentEnemy = &(enemyData[i]);
;
L11DD:	jsr     mulax6
	clc
	adc     #<(_enemyData)
	tay
	txa
	adc     #>(_enemyData)
	tax
	tya
	sta     _currentEnemy
	stx     _currentEnemy+1
;
; if ( currentEnemy->state == ENEMY_STATE_GLUED ) {
;
	sta     ptr1
	stx     ptr1+1
	ldy     #$04
	lda     (ptr1),y
	cmp     #$01
	bne     L0E58
;
; --(currentEnemy->glueTimeLeft);
;
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; if ( currentEnemy->glueTimeLeft <= 0 ) {
;
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	ldx     #$00
	lda     (ptr1),y
	jne     L11C7
;
; currentEnemy->state = ENEMY_STATE_NORMAL;
;
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	txa
	dey
	sta     (ptr1),y
;
; continue;
;
	jmp     L11C7
;
; collideCheckVertical(currentEnemy->x, currentEnemy->y + 1, PAD_DOWN);
;
L0E58:	jsr     decsp2
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	iny
	sta     (sp),y
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	lda     (ptr1),y
	clc
	adc     #$01
	dey
	sta     (sp),y
	lda     #$20
	jsr     _collideCheckVertical
;
; if ( ( verticalCollideCheck != TILE_ALLCOLLIDE ) && ( verticalCollideCheck != TILE_LADDER_TOP ) ) {
;
	ldx     #$00
	lda     _verticalCollideCheck
	cmp     #$01
	beq     L11C2
	cmp     #$07
	beq     L11C2
;
; currentEnemy->y += 1;
;
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	clc
	adc     #$01
	sta     (ptr1),y
;
; } else {
;
	jmp     L11C7
;
; if ( playerX < currentEnemy->x ) {
;
L11C2:	lda     _playerX
	jsr     pusha0
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	lda     (ptr1,x)
	jsr     tosicmp0
	jcs     L0E6E
;
; currentEnemy->direction == PAD_LEFT;
;
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	ldy     #$03
	lda     (ptr1),y
	cmp     #$40
	jsr     booleq
;
; collideCheckHorizontal(currentEnemy->x, currentEnemy->y, PAD_LEFT);
;
	jsr     decsp2
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	lda     (ptr1,x)
	ldy     #$01
	sta     (sp),y
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	lda     (ptr1),y
	dey
	sta     (sp),y
	lda     #$40
	jsr     _collideCheckHorizontal
;
; if ( ( horizontalCollideCheck == TILE_ALLCOLLIDE ) || ( horizontalCollideCheck == TILE_ENEMYCOLLIDE ) ) {
;
	lda     _horizontalCollideCheck
	cmp     #$01
	beq     L11C4
	cmp     #$02
	bne     L0E75
;
; currentEnemy->direction == PAD_RIGHT;
;
L11C4:	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	ldy     #$03
	lda     (ptr1),y
	cmp     #$80
	jsr     booleq
;
; } else {
;
	jmp     L0E8E
;
; currentEnemy->x -= 1;
;
L0E75:	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; flipSprite(enemySpriteData[i], 0);
;
	lda     _i
	jsr     pusha0
	lda     #$11
	jsr     tosmula0
	clc
	adc     #<(_enemySpriteData)
	tay
	txa
	adc     #>(_enemySpriteData)
	tax
	tya
	jsr     pushax
	lda     #$00
;
; } else {
;
	jmp     L11BE
;
; currentEnemy->direction == PAD_RIGHT;
;
L0E6E:	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	ldy     #$03
	lda     (ptr1),y
	cmp     #$80
	jsr     booleq
;
; collideCheckHorizontal(currentEnemy->x, currentEnemy->y, PAD_RIGHT);
;
	jsr     decsp2
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	lda     (ptr1,x)
	ldy     #$01
	sta     (sp),y
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	lda     (ptr1),y
	dey
	sta     (sp),y
	lda     #$80
	jsr     _collideCheckHorizontal
;
; if ( ( horizontalCollideCheck == TILE_ALLCOLLIDE ) || ( horizontalCollideCheck == TILE_ENEMYCOLLIDE ) ) {
;
	lda     _horizontalCollideCheck
	cmp     #$01
	beq     L11C6
	cmp     #$02
	bne     L0E8E
;
; currentEnemy->direction == PAD_LEFT;
;
L11C6:	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	ldy     #$03
	lda     (ptr1),y
	cmp     #$40
	jsr     booleq
;
; currentEnemy->x -= 1;
;
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; flipSprite(enemySpriteData[i], 0);
;
	lda     _i
	jsr     pusha0
	lda     #$11
	jsr     tosmula0
	clc
	adc     #<(_enemySpriteData)
	tay
	txa
	adc     #>(_enemySpriteData)
	tax
	tya
	jsr     pushax
	lda     #$00
;
; } else {
;
	jmp     L11BE
;
; currentEnemy->x += 1;
;
L0E8E:	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	clc
	adc     #$01
	sta     (ptr1),y
;
; flipSprite(enemySpriteData[i], 1);
;
	lda     _i
	jsr     pusha0
	lda     #$11
	jsr     tosmula0
	clc
	adc     #<(_enemySpriteData)
	tay
	txa
	adc     #>(_enemySpriteData)
	tax
	tya
	jsr     pushax
	lda     #$01
L11BE:	jsr     _flipSprite
;
; for ( i = 0; i < numEnemies; i++ ) {
;
	ldx     #$00
L11C7:	lda     _i
	clc
	adc     #$01
	sta     _i
	jmp     L11BF

.endproc

; ---------------------------------------------------------------
; void __near__ updatePlatforms (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updatePlatforms: near

.segment	"CODE"

;
; for ( i = 0; i < MAX_PLATFORM_COUNT; i++ ) {
;
	lda     #$00
L11E4:	sta     _i
	cmp     #$03
	bcc     L11E5
;
; }
;
	rts
;
; platformPointer = &(platformData[i]);
;
L11E5:	ldx     #$00
	lda     _i
	jsr     mulax5
	clc
	adc     #<(_platformData)
	tay
	txa
	adc     #>(_platformData)
	tax
	tya
	sta     _platformPointer
	stx     _platformPointer+1
;
; if ( platformPointer->isActive == 1 ) {
;
	sta     ptr1
	stx     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	cmp     #$01
	jne     L11E2
;
; if ( ( frameCount & 0x01 ) == 0x01 ) {
;
	lda     _frameCount
	and     #$01
	cmp     #$01
	jne     L11E2
;
; if ( platformPointer->direction == PAD_RIGHT ) {
;
	lda     _platformPointer
	sta     ptr1
	lda     _platformPointer+1
	sta     ptr1+1
	iny
	lda     (ptr1),y
	cmp     #$80
	bne     L0EB4
;
; platformPointer->x += 1;
;
	lda     _platformPointer
	sta     ptr1
	lda     _platformPointer+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	clc
	adc     #$01
	sta     (ptr1),y
;
; if ( platformPointer->playerColliding || playerPlatformStuck ) {
;
	lda     _platformPointer
	sta     ptr1
	lda     _platformPointer+1
	sta     ptr1+1
	ldy     #$04
	lda     (ptr1),y
	bne     L11E0
	lda     _playerPlatformStuck
	beq     L0EB8
;
; playerX += 1;
;
L11E0:	inc     _playerX
;
; collideCheckHorizontalFull(platformPointer->x, platformPointer->y, PAD_RIGHT);
;
L0EB8:	jsr     decsp2
	lda     _platformPointer
	sta     ptr1
	lda     _platformPointer+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	iny
	sta     (sp),y
	lda     _platformPointer
	sta     ptr1
	lda     _platformPointer+1
	sta     ptr1+1
	lda     (ptr1),y
	dey
	sta     (sp),y
	lda     #$80
	jsr     _collideCheckHorizontalFull
;
; if ( ( horizontalCollideCheck == TILE_ALLCOLLIDE ) ) {
;
	lda     _horizontalCollideCheck
	cmp     #$01
	bne     L11E2
;
; platformPointer->direction = PAD_LEFT;
;
	lda     _platformPointer
	sta     ptr1
	lda     _platformPointer+1
	sta     ptr1+1
	lda     #$40
;
; } else {
;
	jmp     L11E3
;
; if ( platformPointer->playerColliding || playerPlatformStuck ) {
;
L0EB4:	lda     _platformPointer
	sta     ptr1
	lda     _platformPointer+1
	sta     ptr1+1
	iny
	lda     (ptr1),y
	bne     L11E1
	lda     _playerPlatformStuck
	beq     L0EC7
;
; playerX -= 1;
;
L11E1:	dec     _playerX
;
; platformPointer->x -= 1;
;
L0EC7:	lda     _platformPointer
	sta     ptr1
	lda     _platformPointer+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; collideCheckHorizontalFull(platformPointer->x, platformPointer->y, PAD_LEFT);
;
	jsr     decsp2
	lda     _platformPointer
	sta     ptr1
	lda     _platformPointer+1
	sta     ptr1+1
	lda     (ptr1),y
	iny
	sta     (sp),y
	lda     _platformPointer
	sta     ptr1
	lda     _platformPointer+1
	sta     ptr1+1
	lda     (ptr1),y
	dey
	sta     (sp),y
	lda     #$40
	jsr     _collideCheckHorizontalFull
;
; if ( ( horizontalCollideCheck == TILE_ALLCOLLIDE ) ) {
;
	lda     _horizontalCollideCheck
	cmp     #$01
	bne     L11E2
;
; platformPointer->direction = PAD_RIGHT;
;
	lda     _platformPointer
	sta     ptr1
	lda     _platformPointer+1
	sta     ptr1+1
	lda     #$80
L11E3:	ldy     #$03
	sta     (ptr1),y
;
; for ( i = 0; i < MAX_PLATFORM_COUNT; i++ ) {
;
L11E2:	lda     _i
	clc
	adc     #$01
	jmp     L11E4

.endproc

; ---------------------------------------------------------------
; void __near__ checkPlayerGetItems (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_checkPlayerGetItems: near

.segment	"CODE"

;
; getCollisionIndex(playerX + 8, playerY + 8);
;
	lda     _playerX
	clc
	adc     #$08
	jsr     pusha
	lda     _playerY
	clc
	adc     #$08
	jsr     _getCollisionIndex
;
; if ( collisionMap[collisionIndex] == TILE_FRUIT ) {
;
	lda     #<(_collisionMap)
	sta     ptr1
	lda     #>(_collisionMap)
	clc
	adc     _collisionIndex+1
	sta     ptr1+1
	ldy     _collisionIndex
	lda     (ptr1),y
	cmp     #$08
	bne     L0EDD
;
; addScore(SCORE_VALUE_FRUIT);
;
	jsr     _addScore
;
; collisionMap[collisionIndex] = TILE_NOCOLLIDE;
;
	lda     #<(_collisionMap)
	clc
	adc     _collisionIndex
	sta     ptr1
	lda     #>(_collisionMap)
	adc     _collisionIndex+1
	sta     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
;
; updateMapTile((((playerX + 8) & 0xf0) >> 3), (((playerY + 8) & 0xf0) >> 3), emptyFrame);
;
	jsr     decsp2
	lda     _playerX
	clc
	adc     #$08
	and     #$F0
	lsr     a
	lsr     a
	lsr     a
	iny
	sta     (sp),y
	lda     _playerY
	clc
	adc     #$08
	and     #$F0
	lsr     a
	lsr     a
	lsr     a
	dey
	sta     (sp),y
	lda     #<(_emptyFrame)
	ldx     #>(_emptyFrame)
	jsr     _updateMapTile
;
; sfx_play(SFX_BEEP, CHANNEL_SQUARE1);
;
	lda     #$02
	jsr     pusha
	lda     #$00
	jmp     _sfx_play
;
; } else if ( collisionMap[collisionIndex] == TILE_JEWEL ) {
;
L0EDD:	lda     #<(_collisionMap)
	sta     ptr1
	lda     #>(_collisionMap)
	clc
	adc     _collisionIndex+1
	sta     ptr1+1
	ldy     _collisionIndex
	lda     (ptr1),y
	cmp     #$0C
	bne     L0EF5
;
; addScore(SCORE_VALUE_JEWEL);
;
	lda     #$14
	jsr     _addScore
;
; collisionMap[collisionIndex] = TILE_NOCOLLIDE;
;
	lda     #<(_collisionMap)
	clc
	adc     _collisionIndex
	sta     ptr1
	lda     #>(_collisionMap)
	adc     _collisionIndex+1
	sta     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
;
; updateMapTile((((playerX + 8) & 0xf0) >> 3), (((playerY + 8) & 0xf0) >> 3), emptyFrame);  
;
	jsr     decsp2
	lda     _playerX
	clc
	adc     #$08
	and     #$F0
	lsr     a
	lsr     a
	lsr     a
	iny
	sta     (sp),y
	lda     _playerY
	clc
	adc     #$08
	and     #$F0
	lsr     a
	lsr     a
	lsr     a
	dey
	sta     (sp),y
	lda     #<(_emptyFrame)
	ldx     #>(_emptyFrame)
	jsr     _updateMapTile
;
; sfx_play(SFX_BEEP, CHANNEL_SQUARE1);
;
	lda     #$02
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; delay(180);
;
	lda     #$B4
	jsr     _delay
;
; levelComplete = 1;
;
	lda     #$01
	sta     _levelComplete
;
; } else if ( collisionMap[collisionIndex] == TILE_WATER ) {
;
	rts
L0EF5:	lda     #<(_collisionMap)
	sta     ptr1
	lda     #>(_collisionMap)
	clc
	adc     _collisionIndex+1
	sta     ptr1+1
	ldy     _collisionIndex
	lda     (ptr1),y
	cmp     #$0B
;
; killPlayer();  
;
	jeq     _killPlayer
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ updatePlayerJumpFall (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updatePlayerJumpFall: near

.segment	"CODE"

;
; collideBottom = 0;
;
	lda     #$00
	sta     _collideBottom
;
; if ( playerState == PLAYER_STATE_JUMPING ) {
;
	lda     _playerState
	cmp     #$03
	jne     L11F5
;
; playerY -= playerVertVel;
;
	lda     _playerVertVel
	eor     #$FF
	sec
	adc     _playerY
	sta     _playerY
;
; if ( playerVertVel > 0 ) {
;
	lda     _playerVertVel
	sec
	sbc     #$01
	bvs     L0F20
	eor     #$80
L0F20:	bpl     L0F1D
;
; collideCheckVertical(playerX, playerY, PAD_UP);
;
	jsr     decsp2
	lda     _playerX
	ldy     #$01
	sta     (sp),y
	lda     _playerY
	dey
	sta     (sp),y
	lda     #$10
	jsr     _collideCheckVertical
;
; if ( ( verticalCollideCheck == TILE_ALLCOLLIDE ) || ( verticalCollideCheck == TILE_LADDER_TOP ) ) { 
;
	lda     _verticalCollideCheck
	cmp     #$01
	beq     L11EB
	cmp     #$07
	bne     L11EF
;
; playerY = (playerY & 0xF0) + 6;
;
L11EB:	lda     _playerY
	and     #$F0
	clc
	adc     #$06
	sta     _playerY
;
; } else {
;
	jmp     L11EF
;
; collideCheckVertical(playerX, playerY + 2, PAD_DOWN);
;
L0F1D:	jsr     decsp2
	lda     _playerX
	ldy     #$01
	sta     (sp),y
	lda     _playerY
	clc
	adc     #$02
	dey
	sta     (sp),y
	lda     #$20
	jsr     _collideCheckVertical
;
; if ( ( verticalCollideCheck == TILE_ALLCOLLIDE ) || ( verticalCollideCheck == TILE_LADDER_TOP ) || ( verticalCollideCheck == TILE_PLATFORM ) ) { 
;
	lda     _verticalCollideCheck
	cmp     #$01
	beq     L11EE
	cmp     #$07
	beq     L11EE
	cmp     #$0D
	bne     L11EF
;
; playerY =  ( ( playerY + 8 ) & 0xF0 ) - 1;
;
L11EE:	lda     _playerY
	clc
	adc     #$08
	and     #$F0
	sec
	sbc     #$01
	sta     _playerY
;
; collideBottom = 1;
;
	lda     #$01
	sta     _collideBottom
;
; playerState = PLAYER_STATE_NORMAL;       
;
	lda     #$00
	sta     _playerState
;
; playerFrame = PLAYER_FRAME_STANDING;
;
	sta     _playerFrame
;
; if ( ( playerVertVel > MAX_PLAYER_VERT_VEL ) && ( playerJumpCounter == PLAYER_JUMP_COUNTER_INTERVAL ) ) {
;
L11EF:	lda     _playerVertVel
	sec
	sbc     #$FE
	bvs     L0F4A
	eor     #$80
L0F4A:	bpl     L11F4
	lda     _playerJumpCounter
	cmp     #$06
	bne     L11F4
;
; playerVertVel -= GRAVITY_ACCELERATION; 
;
	lda     _playerVertVel
	sec
	sbc     #$02
	sta     _playerVertVel
;
; playerJumpCounter = 0;
;
	lda     #$00
	sta     _playerJumpCounter
;
; ++playerJumpCounter;
;
L11F4:	inc     _playerJumpCounter
;
; } else if ( ( playerState == PLAYER_STATE_NORMAL ) || ( playerState == PLAYER_STATE_FALLING ) ) {
;
	jmp     L0F6F
L11F5:	lda     _playerState
	beq     L11F6
	cmp     #$04
	bne     L0F6F
;
; collideCheckVertical(playerX, playerY + 2, PAD_DOWN);
;
L11F6:	jsr     decsp2
	lda     _playerX
	ldy     #$01
	sta     (sp),y
	lda     _playerY
	clc
	adc     #$02
	dey
	sta     (sp),y
	lda     #$20
	jsr     _collideCheckVertical
;
; if ( ( verticalCollideCheck == TILE_ALLCOLLIDE ) || ( verticalCollideCheck == TILE_LADDER_TOP ) || ( verticalCollideCheck == TILE_PLATFORM ) ) { 
;
	lda     _verticalCollideCheck
	cmp     #$01
	beq     L11F9
	cmp     #$07
	beq     L11F9
	cmp     #$0D
	bne     L11FA
;
; playerY = ((playerY + 8) & 0xF0) - 1;
;
L11F9:	lda     _playerY
	clc
	adc     #$08
	and     #$F0
	sec
	sbc     #$01
	sta     _playerY
;
; collideBottom = 1;
;
	lda     #$01
	sta     _collideBottom
;
; playerState = PLAYER_STATE_NORMAL;   
;
	lda     #$00
;
; } else {
;
	jmp     L11E6
;
; playerY += PLAYER_FALL_SPEED;
;
L11FA:	lda     #$03
	clc
	adc     _playerY
	sta     _playerY
;
; collideBottom = 0;
;
	lda     #$00
	sta     _collideBottom
;
; playerState = PLAYER_STATE_FALLING;
;
	lda     #$04
L11E6:	sta     _playerState
;
; if ( collideBottom || playerSittingOnSprite ) {
;
L0F6F:	lda     _collideBottom
	bne     L11FB
	lda     _playerSittingOnSprite
	bne     L11FB
	rts
;
; if ( ( jumpButtonReset != 0 ) && ( pad & PAD_A ) ) {
;
L11FB:	lda     _jumpButtonReset
	beq     L11FF
	lda     _pad
	and     #$01
	beq     L11FF
;
; playerPlatformStuck = 0;
;
	lda     #$00
	sta     _playerPlatformStuck
;
; playerVertVel = PLAYER_INIT_JUMP_VEL;
;
	lda     #$03
	sta     _playerVertVel
;
; playerState = PLAYER_STATE_JUMPING;
;
	sta     _playerState
;
; playerJumpCounter = 0;
;
	lda     #$00
	sta     _playerJumpCounter
;
; jumpButtonReset = 0;
;
	sta     _jumpButtonReset
;
; sfx_play(SFX_JUMP, CHANNEL_SQUARE1);
;
	jsr     pusha
	jmp     _sfx_play
;
; } else if ( pad & PAD_UP ) {
;
L11FF:	lda     _pad
	and     #$10
	cmp     #$00
;
; checkPlayerLadderCollision();
;
	jne     _checkPlayerLadderCollision
;
; } else if ( ( pad & PAD_DOWN ) && ( verticalCollideCheck == TILE_LADDER_TOP ) ) {
;
	lda     _pad
	and     #$20
	beq     L1202
	lda     _verticalCollideCheck
	cmp     #$07
	beq     L1203
L1202:	rts
;
; playerY += 2;
;
L1203:	lda     #$02
	clc
	adc     _playerY
	sta     _playerY
;
; checkPlayerLadderCollision();
;
	jmp     _checkPlayerLadderCollision

.endproc

; ---------------------------------------------------------------
; void __near__ updatePlayerClimbing (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updatePlayerClimbing: near

.segment	"CODE"

;
; checkPlayerLadderCollision();
;
	jsr     _checkPlayerLadderCollision
;
; if ( pad & PAD_UP ) { 
;
	lda     _pad
	and     #$10
	beq     L1204
;
; --playerY;
;
	dec     _playerY
;
; playerPlatformStuck = 0;
;
	lda     #$00
	sta     _playerPlatformStuck
;
; } else if ( pad & PAD_DOWN ) {
;
	rts
L1204:	lda     _pad
	and     #$20
	beq     L0FAA
;
; ++playerY;
;
	inc     _playerY
;
; collideCheckVertical(playerX, playerY + 1, PAD_DOWN);
;
	jsr     decsp2
	lda     _playerX
	ldy     #$01
	sta     (sp),y
	lda     _playerY
	clc
	adc     #$01
	dey
	sta     (sp),y
	lda     #$20
	jsr     _collideCheckVertical
;
; if ( ( verticalCollideCheck == TILE_ALLCOLLIDE ) ) {  
;
	lda     _verticalCollideCheck
	cmp     #$01
	bne     L0FAA
;
; playerState = PLAYER_STATE_NORMAL;
;
	lda     #$00
	sta     _playerState
;
; }
;
L0FAA:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ updatePlayerVerticalMovement (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updatePlayerVerticalMovement: near

.segment	"CODE"

;
; if ( !( pad & PAD_A ) ) {
;
	lda     _pad
	and     #$01
	bne     L1205
;
; jumpButtonReset = 1;
;
	lda     #$01
	sta     _jumpButtonReset
;
; if ( playerState == PLAYER_STATE_CLIMBING ) {
;
L1205:	lda     _playerState
	cmp     #$02
;
; updatePlayerClimbing(); 
;
	jeq     _updatePlayerClimbing
;
; updatePlayerJumpFall();
;
	jmp     _updatePlayerJumpFall

.endproc

; ---------------------------------------------------------------
; void __near__ updatePlayerHorizontalMovement (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updatePlayerHorizontalMovement: near

.segment	"CODE"

;
; if ( ( playerState != PLAYER_STATE_NORMAL ) && ( playerState != PLAYER_STATE_JUMPING ) ) {
;
	lda     _playerState
	beq     L120A
	cmp     #$03
	beq     L120A
;
; return;
;
	rts
;
; if ( pad & PAD_LEFT ) {
;
L120A:	lda     _pad
	and     #$40
	beq     L120B
;
; playerDir = PAD_LEFT;
;
	lda     #$40
	sta     _playerDir
;
; playerPlatformStuck = 0;
;
	lda     #$00
	sta     _playerPlatformStuck
;
; if ( playerX > 0 ) {
;
	lda     _playerX
	beq     L120D
;
; playerX -= PLAYER_MOVE_VEL;
;
	dec     _playerX
;
; } else if ( pad & PAD_RIGHT ) {
;
	jmp     L120C
L120B:	lda     _pad
	and     #$80
	beq     L120D
;
; playerDir = PAD_RIGHT;
;
	lda     #$80
	sta     _playerDir
;
; playerPlatformStuck = 0;
;
	lda     #$00
	sta     _playerPlatformStuck
;
; if ( playerX < 240 ) {
;
	lda     _playerX
	cmp     #$F0
	bcs     L120C
;
; playerX += PLAYER_MOVE_VEL;
;
	inc     _playerX
;
; horizontalCollideCheck = TILE_NOCOLLIDE;
;
L120C:	lda     #$00
L120D:	sta     _horizontalCollideCheck
;
; bgHorizCollideCheck(&playerX, &playerY, pad);
;
	jsr     decsp4
	lda     #<(_playerX)
	ldy     #$02
	sta     (sp),y
	iny
	lda     #>(_playerX)
	sta     (sp),y
	lda     #<(_playerY)
	ldy     #$00
	sta     (sp),y
	iny
	lda     #>(_playerY)
	sta     (sp),y
	lda     _pad
	jsr     _bgHorizCollideCheck
;
; if ( horizontalCollideCheck != TILE_NOCOLLIDE ) {
;
	lda     _horizontalCollideCheck
	beq     L0FDC
;
; playerPlatformStuck = 0;
;
	lda     #$00
	sta     _playerPlatformStuck
;
; }
;
L0FDC:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ updatePlayerGlue (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updatePlayerGlue: near

.segment	"CODE"

;
; u8 newGlueIndex = 255;
;
	jsr     decsp2
	lda     #$FF
	jsr     pusha
;
; u8 duplicateFound = 0;
;
	lda     #$00
	jsr     pusha
;
; if ( ! ( pad & PAD_B ) ) {
;
	lda     _pad
	and     #$02
	bne     L1212
;
; glueButtonReset = 1;
;
	lda     #$01
	sta     _glueButtonReset
;
; if ( ( pad & PAD_B ) && ( glueButtonReset == 1 ) && ( playerState == PLAYER_STATE_NORMAL ) ) {
;
L1212:	lda     _pad
	and     #$02
	bne     L1220
;
; }
;
	jmp     incsp4
;
; if ( ( pad & PAD_B ) && ( glueButtonReset == 1 ) && ( playerState == PLAYER_STATE_NORMAL ) ) {
;
L1220:	lda     _glueButtonReset
	cmp     #$01
	beq     L1221
;
; }
;
	jmp     incsp4
;
; if ( ( pad & PAD_B ) && ( glueButtonReset == 1 ) && ( playerState == PLAYER_STATE_NORMAL ) ) {
;
L1221:	lda     _playerState
	jne     incsp4
;
; glueButtonReset = 0;
;
	sta     _glueButtonReset
;
; glueY = ((playerY + 1));
;
	lda     _playerY
	clc
	adc     #$01
	ldy     #$02
	sta     (sp),y
;
; if ( playerDir == PAD_RIGHT ) {
;
	lda     _playerDir
	cmp     #$80
	bne     L1216
;
; glueX = playerX + 16;
;
	lda     _playerX
	clc
	adc     #$10
;
; } else {
;
	jmp     L121E
;
; glueX = playerX - 16;
;
L1216:	lda     _playerX
	sec
	sbc     #$10
L121E:	iny
	sta     (sp),y
;
; getCollisionIndex(glueX + 8, glueY + 8);
;
	clc
	adc     #$08
	jsr     pusha
	ldy     #$03
	lda     (sp),y
	clc
	adc     #$08
	jsr     _getCollisionIndex
;
; if ( ( collisionMap[collisionIndex] != TILE_ALLCOLLIDE ) && 
;
	lda     #<(_collisionMap)
	sta     ptr1
	lda     #>(_collisionMap)
	clc
	adc     _collisionIndex+1
	sta     ptr1+1
	ldy     _collisionIndex
	lda     (ptr1),y
	cmp     #$01
	bne     L1222
;
; }
;
	jmp     incsp4
;
; ( collisionMap[collisionIndex] != TILE_LADDER_TOP ) ) {
;
L1222:	lda     #<(_collisionMap)
	sta     ptr1
	lda     #>(_collisionMap)
	clc
	adc     _collisionIndex+1
	sta     ptr1+1
	ldy     _collisionIndex
	lda     (ptr1),y
	cmp     #$07
	jeq     incsp4
;
; i = 0;
;
	lda     #$00
	sta     _i
;
; if ( glueData[i].state == GLUE_STATE_INACTIVE ) {
;
L1219:	lda     _i
	jsr     pusha0
	lda     #$17
	jsr     tosmula0
	clc
	adc     #<(_glueData)
	sta     ptr1
	txa
	adc     #>(_glueData)
	sta     ptr1+1
	ldy     #$04
	ldx     #$00
	lda     (ptr1),y
	bne     L121A
;
; newGlueIndex = i; 
;
	lda     _i
	ldy     #$01
;
; } else if ( glueData[i].collisionIndex == collisionIndex ) {
;
	jmp     L1211
L121A:	lda     _i
	jsr     pusha0
	lda     #$17
	jsr     tosmula0
	clc
	adc     #<(_glueData)
	sta     ptr1
	txa
	adc     #>(_glueData)
	sta     ptr1+1
	ldy     #$05
	ldx     #$00
	lda     (ptr1),y
	cpx     _collisionIndex+1
	bne     L121B
	cmp     _collisionIndex
	bne     L121B
;
; duplicateFound = 1;
;
	lda     #$01
	ldy     #$00
L1211:	sta     (sp),y
;
; ++i;
;
L121B:	inc     _i
;
; } while ( ( newGlueIndex == 255 ) && ( i < MAX_GLUE_COUNT ) && !duplicateFound );
;
	ldy     #$01
	lda     (sp),y
	cmp     #$FF
	bne     L121F
	lda     _i
	bne     L121F
	lda     (sp,x)
	beq     L1219
;
; if ( newGlueIndex < 255 ) {
;
	ldy     #$01
L121F:	lda     (sp),y
	cmp     #$FF
	bcc     L1223
;
; }
;
	jmp     incsp4
;
; gluePointer = &(glueData[newGlueIndex]);
;
L1223:	jsr     pusha0
	lda     #$17
	jsr     tosmula0
	clc
	adc     #<(_glueData)
	tay
	txa
	adc     #>(_glueData)
	tax
	tya
	sta     _gluePointer
	stx     _gluePointer+1
;
; gluePointer->x = glueX;
;
	sta     ptr1
	stx     ptr1+1
	ldy     #$03
	lda     (sp),y
	ldy     #$00
	sta     (ptr1),y
;
; gluePointer->y = glueY - 6;
;
	lda     _gluePointer
	sta     ptr1
	lda     _gluePointer+1
	sta     ptr1+1
	ldy     #$02
	lda     (sp),y
	sec
	sbc     #$06
	dey
	sta     (ptr1),y
;
; gluePointer->frame = 0;
;
	lda     _gluePointer
	sta     ptr1
	lda     _gluePointer+1
	sta     ptr1+1
	lda     #$00
	ldy     #$03
	sta     (ptr1),y
;
; playerState = PLAYER_STATE_GLUING;
;
	lda     #$05
	sta     _playerState
;
; gluePointer->state = GLUE_STATE_FORMING;
;
	lda     _gluePointer
	sta     ptr1
	lda     _gluePointer+1
	sta     ptr1+1
	lda     #$02
	iny
	sta     (ptr1),y
;
; gluePointer->timeLeft = GLUE_FORMING_DURATION;
;
	lda     _gluePointer
	sta     ptr1
	lda     _gluePointer+1
	sta     ptr1+1
	lda     #$0F
	ldy     #$02
	sta     (ptr1),y
;
; memcpy(gluePointer->spriteData, glueSpriteDataTemplate, sizeof(glueSpriteDataTemplate)); 
;
	lda     _gluePointer
	ldx     _gluePointer+1
	clc
	adc     #$06
	bcc     L1037
	inx
L1037:	jsr     pushax
	lda     #<(_glueSpriteDataTemplate)
	ldx     #>(_glueSpriteDataTemplate)
	jsr     pushax
	ldx     #$00
	lda     #$11
	jsr     _memcpy
;
; sfx_play(SFX_GLUEDROP, CHANNEL_SQUARE1); 
;
	lda     #$01
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; }
;
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ updatePlayerState (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updatePlayerState: near

.segment	"CODE"

;
; if ( playerState == PLAYER_STATE_DEAD ) {
;
	lda     _playerState
	cmp     #$01
	bne     L1045
;
; ++playerAnimationCounter;
;
	inc     _playerAnimationCounter
;
; if ( playerAnimationCounter == PLAYER_DEAD_INTERVAL ) {
;
	lda     _playerAnimationCounter
	cmp     #$5A
	bne     L1051
;
; ppu_off();
;
	jsr     _ppu_off
;
; setupMap();
;
	jsr     _setupMap
;
; ppu_on_all(); 
;
	jsr     _ppu_on_all
;
; playerState = PLAYER_STATE_NORMAL;
;
	lda     #$00
	sta     _playerState
;
; playerAnimationCounter = 0;
;
	sta     _playerAnimationCounter
;
; } else {
;
	rts
;
; updatePlayerHorizontalMovement();
;
L1045:	jsr     _updatePlayerHorizontalMovement
;
; updatePlayerVerticalMovement();
;
	jsr     _updatePlayerVerticalMovement
;
; updatePlayerGlue();  
;
	jmp     _updatePlayerGlue
;
; }
;
L1051:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ updateGlues (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updateGlues: near

.segment	"CODE"

;
; for ( i = 0; i < MAX_GLUE_COUNT; ++i ) {
;
	lda     #$00
	sta     _i
L1226:	lda     _i
	beq     L122B
;
; }
;
	rts
;
; gluePointer = &(glueData[i]);
;
L122B:	lda     _i
	jsr     pusha0
	lda     #$17
	jsr     tosmula0
	clc
	adc     #<(_glueData)
	tay
	txa
	adc     #>(_glueData)
	tax
	tya
	sta     _gluePointer
	stx     _gluePointer+1
;
; if ( gluePointer->state == GLUE_STATE_ACTIVE ) {
;
	sta     ptr1
	stx     ptr1+1
	ldy     #$04
	lda     (ptr1),y
	cmp     #$01
	jne     L1062
;
; --(gluePointer->timeLeft); 
;
	lda     _gluePointer
	sta     ptr1
	lda     _gluePointer+1
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; if ( gluePointer->timeLeft <= 0 ) {
;
	lda     _gluePointer
	sta     ptr1
	lda     _gluePointer+1
	sta     ptr1+1
	lda     (ptr1),y
	bne     L1066
;
; gluePointer->state = GLUE_STATE_INACTIVE;
;
	lda     _gluePointer
	sta     ptr1
	lda     _gluePointer+1
	sta     ptr1+1
	lda     #$00
	ldy     #$04
	sta     (ptr1),y
;
; gluePointer->collisionIndex = 0;
;
	lda     _gluePointer
	sta     ptr1
	lda     _gluePointer+1
	sta     ptr1+1
	lda     #$00
	iny
;
; } else {
;
	jmp     L1225
;
; getCollisionIndex(gluePointer->x + 8, gluePointer->y + 18);
;
L1066:	lda     _gluePointer
	sta     ptr1
	lda     _gluePointer+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	clc
	adc     #$08
	jsr     pusha
	lda     _gluePointer
	sta     ptr1
	lda     _gluePointer+1
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	clc
	adc     #$12
	jsr     _getCollisionIndex
;
; if ( ( collisionMap[collisionIndex] == TILE_ALLCOLLIDE ) || ( collisionMap[collisionIndex] == TILE_LADDER_TOP ) ) {
;
	lda     #<(_collisionMap)
	sta     ptr1
	lda     #>(_collisionMap)
	clc
	adc     _collisionIndex+1
	sta     ptr1+1
	ldy     _collisionIndex
	lda     (ptr1),y
	cmp     #$01
	beq     L1228
	lda     #<(_collisionMap)
	sta     ptr1
	lda     #>(_collisionMap)
	clc
	adc     _collisionIndex+1
	sta     ptr1+1
	ldy     _collisionIndex
	lda     (ptr1),y
	cmp     #$07
	bne     L1072
;
; gluePointer->collisionIndex = collisionIndex;
;
L1228:	lda     _gluePointer
	sta     ptr1
	lda     _gluePointer+1
	sta     ptr1+1
	lda     _collisionIndex
	ldy     #$05
	sta     (ptr1),y
;
; gluePointer->y = ((gluePointer->y + 8 ) & 0xF0) - 1;
;
	lda     _gluePointer
	sta     sreg
	lda     _gluePointer+1
	sta     sreg+1
	lda     _gluePointer
	sta     ptr1
	lda     _gluePointer+1
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	clc
	adc     #$08
	and     #$F0
	sec
	sbc     #$01
	sta     (sreg),y
;
; } else if ( collisionMap[collisionIndex] == TILE_WATER ) {
;
	jmp     L122A
L1072:	lda     #<(_collisionMap)
	sta     ptr1
	lda     #>(_collisionMap)
	clc
	adc     _collisionIndex+1
	sta     ptr1+1
	ldy     _collisionIndex
	lda     (ptr1),y
	cmp     #$0B
	bne     L1082
;
; gluePointer->state = GLUE_STATE_INACTIVE;
;
	lda     _gluePointer
	sta     ptr1
	lda     _gluePointer+1
	sta     ptr1+1
	lda     #$00
	ldy     #$04
;
; } else {
;
	jmp     L1225
;
; four_Sides(gluePointer->x, gluePointer->y + 2);
;
L1082:	lda     _gluePointer
	sta     ptr1
	lda     _gluePointer+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	jsr     pusha
	lda     _gluePointer
	sta     ptr1
	lda     _gluePointer+1
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	clc
	adc     #$02
	jsr     _four_Sides
;
; glueCollideCheck();
;
	jsr     _glueCollideCheck
;
; if ( glueColliding && ( glueCollidedIndex != i ) ) {
;
	lda     _glueColliding
	beq     L108D
	lda     _i
	cmp     _glueCollidedIndex
	beq     L108D
;
; gluePointer->state = GLUE_STATE_INACTIVE;
;
	lda     _gluePointer
	sta     ptr1
	lda     _gluePointer+1
	sta     ptr1+1
	lda     #$00
	ldy     #$04
	sta     (ptr1),y
;
; gluePointer->collisionIndex = 0;
;
	lda     _gluePointer
	sta     ptr1
	lda     _gluePointer+1
	sta     ptr1+1
	lda     #$00
	iny
;
; } else {
;
	jmp     L1225
;
; gluePointer->y += 2;
;
L108D:	lda     _gluePointer
	sta     ptr1
	lda     _gluePointer+1
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	clc
	adc     #$02
;
; } else if ( gluePointer->state == GLUE_STATE_FORMING ) {
;
	jmp     L1225
L1062:	lda     _gluePointer
	sta     ptr1
	lda     _gluePointer+1
	sta     ptr1+1
	lda     (ptr1),y
	cmp     #$02
	bne     L122A
;
; --(gluePointer->timeLeft);
;
	lda     _gluePointer
	sta     ptr1
	lda     _gluePointer+1
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; if ( gluePointer->timeLeft <= 0 ) {
;
	lda     _gluePointer
	sta     ptr1
	lda     _gluePointer+1
	sta     ptr1+1
	lda     (ptr1),y
	bne     L122A
;
; playerState = PLAYER_STATE_NORMAL;
;
	sta     _playerState
;
; gluePointer->state = GLUE_STATE_ACTIVE;
;
	lda     _gluePointer
	sta     ptr1
	lda     _gluePointer+1
	sta     ptr1+1
	lda     #$01
	ldy     #$04
	sta     (ptr1),y
;
; gluePointer->timeLeft = GLUE_INIT_LIFESPAN;    
;
	lda     _gluePointer
	sta     ptr1
	lda     _gluePointer+1
	sta     ptr1+1
	lda     #$F0
	ldy     #$02
L1225:	sta     (ptr1),y
;
; for ( i = 0; i < MAX_GLUE_COUNT; ++i ) {
;
L122A:	inc     _i
	jmp     L1226

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"RODATA"

L10A9:
	.addr	_map3
	.addr	_newmap
L10AE:
	.addr	_map3_coll
	.addr	_newmap_coll

.segment	"CODE"

;
; int currentLevel = 0;
;
	jsr     push0
;
; };
;
	jsr     decsp4
	ldy     #$03
L10AC:	lda     L10A9,y
	sta     (sp),y
	dey
	bpl     L10AC
;
; };
;
	jsr     decsp4
	ldy     #$03
L10B1:	lda     L10AE,y
	sta     (sp),y
	dey
	bpl     L10B1
;
; memcpy(tileUpdateList, tileUpdateListInit, sizeof(tileUpdateListInit));
;
	ldy     #$1B
L10B7:	lda     _tileUpdateListInit,y
	sta     _tileUpdateList,y
	dey
	bpl     L10B7
;
; memcpy(scoreUpdateList, scoreUpdateListData, sizeof(scoreUpdateListData)); 
;
	ldy     #$07
L10BD:	lda     _scoreUpdateListData,y
	sta     _scoreUpdateList,y
	dey
	bpl     L10BD
;
; memcpy(palSprites, paldat, 16);
;
	ldy     #$0F
L10C2:	lda     _paldat,y
	sta     _palSprites,y
	dey
	bpl     L10C2
;
; pal_spr(palSprites);
;
	lda     #<(_palSprites)
	ldx     #>(_palSprites)
	jsr     _pal_spr
;
; pal_bg(bgPalette);
;
	lda     #<(_bgPalette)
	ldx     #>(_bgPalette)
	jsr     _pal_bg
;
; playerDir = PAD_LEFT;
;
	lda     #$40
	sta     _playerDir
;
; touch = 0; // collision flag
;
	lda     #$00
	sta     _touch
;
; frameCount = 0; // frame counter
;
	sta     _frameCount
;
; playerFrame = 0;
;
	sta     _playerFrame
;
; setSpriteFrame(playerSpriteData, playerFrames[playerFrame]);
;
	lda     #<(_playerSpriteData)
	ldx     #>(_playerSpriteData)
	jsr     pushax
	ldx     #$00
	lda     _playerFrame
	jsr     aslax2
	clc
	adc     #<(_playerFrames)
	tay
	txa
	adc     #>(_playerFrames)
	tax
	tya
	jsr     _setSpriteFrame
;
; playerLives = PLAYER_INIT_LIVES;
;
	lda     #$03
	sta     _playerLives
;
; ppu_off();
;
L10D5:	jsr     _ppu_off
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(levels[currentLevel]);
;
	ldy     #$09
	lda     (sp),y
	sta     tmp1
	dey
	lda     (sp),y
	asl     a
	rol     tmp1
	ldx     tmp1
	clc
	adc     #$04
	bcc     L10DF
	inx
	clc
L10DF:	adc     sp
	sta     ptr1
	txa
	adc     sp+1
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _vram_unrle
;
; currentCollisionData = levelCollisions[currentLevel];
;
	ldy     #$09
	lda     (sp),y
	sta     tmp1
	dey
	lda     (sp),y
	asl     a
	rol     tmp1
	clc
	adc     sp
	sta     ptr1
	lda     tmp1
	adc     sp+1
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _currentCollisionData+1
	dey
	lda     (ptr1),y
	sta     _currentCollisionData
;
; setupMap(); 
;
	jsr     _setupMap
;
; ppu_off();
;
	jsr     _ppu_off
;
; drawScoreboard();
;
	jsr     _drawScoreboard
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; levelComplete = 0;
;
	lda     #$00
	sta     _levelComplete
;
; while ( !levelComplete )
;
	jmp     L10EB
;
; ppu_wait_frame(); // wait for next TV frame
;
L10E9:	jsr     _ppu_wait_frame
;
; updateScoreboard();
;
	jsr     _updateScoreboard
;
; oamSpriteIndex = 0;
;
	lda     #$00
	sta     _oamSpriteIndex
;
; i = 0;
;
	sta     _i
;
; sprPriorityToggle = frameCount & 0xFE;
;
	lda     _frameCount
	and     #$FE
	sta     _sprPriorityToggle
;
; pad = pad_poll(i);
;
	lda     _i
	jsr     _pad_poll
	sta     _pad
;
; updatePlayerSprite();
;
	jsr     _updatePlayerSprite
;
; updateEnemySprites();
;
	jsr     _updateEnemySprites
;
; updateGlueSprites();
;
	jsr     _updateGlueSprites
;
; updatePlatformSprites();
;
	jsr     _updatePlatformSprites
;
; spriteCount();
;
	jsr     _spriteCount
;
; updatePlayerState();
;
	jsr     _updatePlayerState
;
; if ( playerState != PLAYER_STATE_DEAD ) {
;
	lda     _playerState
	cmp     #$01
	beq     L10FE
;
; checkPlayerGetItems();
;
	jsr     _checkPlayerGetItems
;
; updateEnemyMovement(); 
;
	jsr     _updateEnemyMovement
;
; updateGlues();
;
	jsr     _updateGlues
;
; updatePlatforms();
;
	jsr     _updatePlatforms
;
; enemyColliding = 0;
;
	lda     #$00
	sta     _enemyColliding
;
; four_Sides(playerX, playerY);
;
	lda     _playerX
	jsr     pusha
	lda     _playerY
	jsr     _four_Sides
;
; playerEnemyCollideCheck();
;
	jsr     _playerEnemyCollideCheck
;
; playerEnemyColliding = enemyColliding;
;
	lda     _enemyColliding
	sta     _playerEnemyColliding
;
; glueEnemyCollideCheck();   
;
	jsr     _glueEnemyCollideCheck
;
; oam_hide_rest(oamSpriteIndex);
;
L10FE:	lda     _oamSpriteIndex
	jsr     _oam_hide_rest
;
; ++frameCount;
;
	inc     _frameCount
;
; while ( !levelComplete )
;
L10EB:	lda     _levelComplete
	beq     L10E9
;
; ++currentLevel;
;
	ldy     #$08
	ldx     #$00
	lda     #$01
	jsr     addeqysp
;
; if ( currentLevel > 1 ) {
;
	ldy     #$09
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	cmp     #$02
	txa
	sbc     #$00
	bvs     L1113
	eor     #$80
L1113:	jpl     L10D5
;
; currentLevel = 0;
;
	lda     #$00
	sta     (sp),y
	iny
	sta     (sp),y
;
; while ( 1 ) {
;
	jmp     L10D5

.endproc

