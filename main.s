;
; File generated by cc65 v 2.16 - Git N/A
;
	.fopt		compiler,"cc65 v 2.16 - Git N/A"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_ppu_wait_frame
	.import		_ppu_on_all
	.import		_oam_meta_spr
	.import		_pad_poll
	.import		_vram_adr
	.import		_vram_unrle
	.export		_test_nam
	.export		_test_nam_coll_rle
	.import		_memcpy
	.export		_oam_off
	.export		_testColl
	.export		_X1_Right_Side
	.export		_X1_Left_Side
	.export		_Y1_Bottom
	.export		_Y1_Top
	.export		_corner
	.import		_paldat
	.export		_playerFrames
	.export		_enemyFrames
	.export		_playerSpriteData
	.export		_enemySpriteData
	.export		_palSprites
	.export		_palBG
	.export		_setFrame
	.export		_setPalette
	.export		_flipSprite
	.export		_unrleCollision
	.export		_four_Sides
	.export		_getCollisionIndex
	.export		_collide_Check_LR
	.export		_collide_Check_UD
	.export		_updateEnemy
	.export		_playerEnemyCollideCheck
	.export		_main

.segment	"DATA"

.segment	"ZEROPAGE"
.segment	"DATA"
_enemyInitX:
	.byte	$96
_enemyInitY:
	.byte	$32
_playerSpriteData:
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$05
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$14
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$15
	.byte	$02
	.byte	$80
_enemySpriteData:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$00
	.byte	$03
	.byte	$80

.segment	"RODATA"

_test_nam:
	.byte	$01
	.byte	$40
	.byte	$01
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$0A
	.byte	$41
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$0D
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$0E
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$0E
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$0D
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$12
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$40
	.byte	$40
	.byte	$50
	.byte	$00
	.byte	$01
	.byte	$13
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$40
	.byte	$40
	.byte	$50
	.byte	$00
	.byte	$01
	.byte	$1C
	.byte	$40
	.byte	$40
	.byte	$50
	.byte	$00
	.byte	$01
	.byte	$1C
	.byte	$40
	.byte	$40
	.byte	$50
	.byte	$00
	.byte	$01
	.byte	$1C
	.byte	$40
	.byte	$40
	.byte	$50
	.byte	$00
	.byte	$01
	.byte	$1C
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$19
	.byte	$41
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1A
	.byte	$41
	.byte	$01
	.byte	$02
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$40
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$40
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$40
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$41
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$41
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$41
	.byte	$01
	.byte	$06
	.byte	$00
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$41
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$16
	.byte	$40
	.byte	$01
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$3E
	.byte	$00
	.byte	$01
	.byte	$00
_test_nam_coll_rle:
	.byte	$01
	.byte	$41
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$03
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$06
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$03
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$41
_playerFrames:
	.byte	$04
	.byte	$05
	.byte	$14
	.byte	$15
	.byte	$24
	.byte	$25
	.byte	$34
	.byte	$35
_enemyFrames:
	.byte	$06
	.byte	$07
	.byte	$16
	.byte	$17
	.byte	$26
	.byte	$27
	.byte	$36
	.byte	$37

.segment	"BSS"

.segment	"ZEROPAGE"
.segment	"BSS"
.segment	"ZEROPAGE"
_oam_off:
	.res	1,$00
.segment	"BSS"
_player_x:
	.res	1,$00
.segment	"BSS"
_player_y:
	.res	1,$00
.segment	"BSS"
_enemy_x:
	.res	1,$00
.segment	"BSS"
_enemy_y:
	.res	1,$00
.segment	"BSS"
_i:
	.res	1,$00
.segment	"BSS"
_pad:
	.res	1,$00
.segment	"BSS"
_spr:
	.res	1,$00
.segment	"BSS"
_touch:
	.res	1,$00
.segment	"BSS"
_frame:
	.res	1,$00
.segment	"BSS"
_playerFrame:
	.res	1,$00
.segment	"BSS"
_enemyFrame:
	.res	1,$00
.segment	"BSS"
_enemyDir:
	.res	1,$00
.segment	"BSS"
_playerEnemyColliding:
	.res	1,$00
.segment	"BSS"
_testColl:
	.res	960,$00
.segment	"BSS"
_X1_Right_Side:
	.res	1,$00
.segment	"BSS"
_X1_Left_Side:
	.res	1,$00
.segment	"BSS"
_Y1_Bottom:
	.res	1,$00
.segment	"BSS"
_Y1_Top:
	.res	1,$00
.segment	"BSS"
_corner:
	.res	2,$00
.segment	"BSS"
_palSprites:
	.res	4,$00
.segment	"BSS"
_palBG:
	.res	4,$00

; ---------------------------------------------------------------
; void __near__ __fastcall__ setFrame (__near__ unsigned char *, __near__ const unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_setFrame: near

.segment	"CODE"

;
; void __fastcall__ setFrame(u8 *sprite, const u8 *frame) {
;
	jsr     pushax
;
; sprite[2] = frame[0];
;
	ldy     #$05
	jsr     pushwysp
	ldy     #$03
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	ldy     #$02
	jsr     staspidx
;
; sprite[6] = frame[1];
;
	ldy     #$05
	jsr     pushwysp
	ldy     #$03
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	dey
	lda     (ptr1),y
	ldy     #$06
	jsr     staspidx
;
; sprite[10] = frame[2];
;
	ldy     #$05
	jsr     pushwysp
	ldy     #$03
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     (ptr1),y
	ldy     #$0A
	jsr     staspidx
;
; sprite[14] = frame[3];
;
	ldy     #$05
	jsr     pushwysp
	ldy     #$03
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	iny
	lda     (ptr1),y
	ldy     #$0E
	jsr     staspidx
;
; }
;
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ setPalette (__near__ unsigned char *, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_setPalette: near

.segment	"CODE"

;
; void __fastcall__ setPalette(u8 *sprite, u8 palette) {
;
	jsr     pusha
;
; for ( i = 3; i <= 15; i = i + 4 ) {
;
	jsr     decsp1
	lda     #$03
	ldy     #$00
L0355:	sta     (sp),y
	cmp     #$10
	bcs     L01A6
;
; sprite[i] &= ~(0x3);
;
	lda     (sp),y
	clc
	ldy     #$02
	adc     (sp),y
	sta     ptr1
	lda     #$00
	iny
	adc     (sp),y
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	and     #$FC
	sta     (ptr1),y
;
; sprite[i] |= palette;
;
	lda     (sp),y
	clc
	ldy     #$02
	adc     (sp),y
	pha
	lda     #$00
	iny
	adc     (sp),y
	tax
	pla
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     ptr1
	ldy     #$03
	lda     (sp),y
	ora     ptr1
	ldy     #$00
	jsr     staspidx
;
; for ( i = 3; i <= 15; i = i + 4 ) {
;
	ldy     #$00
	lda     (sp),y
	clc
	adc     #$04
	jmp     L0355
;
; }
;
L01A6:	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ flipSprite (__near__ unsigned char *, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_flipSprite: near

.segment	"CODE"

;
; void __fastcall__ flipSprite(u8 *sprite, u8 flip) {
;
	jsr     pusha
;
; if ( flip ) {
;
	ldy     #$00
	lda     (sp),y
	jeq     L01B7
;
; sprite[0] = 8;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     #$08
	dey
	sta     (ptr1),y
;
; sprite[3] |= OAM_FLIP_H;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$03
	lda     (ptr1),y
	ora     #$40
	sta     (ptr1),y
;
; sprite[4] = 0;
;
	dey
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     #$00
	ldy     #$04
	sta     (ptr1),y
;
; sprite[7] |= OAM_FLIP_H;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$07
	lda     (ptr1),y
	ora     #$40
	sta     (ptr1),y
;
; sprite[8] = 8;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     #$08
	tay
	sta     (ptr1),y
;
; sprite[11] |= OAM_FLIP_H;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$0B
	lda     (ptr1),y
	ora     #$40
	sta     (ptr1),y
;
; sprite[12] = 0;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     #$00
	ldy     #$0C
	sta     (ptr1),y
;
; sprite[15] |= OAM_FLIP_H;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$0F
	lda     (ptr1),y
	ora     #$40
;
; } else {
;
	jmp     L0356
;
; sprite[0] = 0;
;
L01B7:	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     #$00
	dey
	sta     (ptr1),y
;
; sprite[3] &= ~OAM_FLIP_H;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$03
	lda     (ptr1),y
	and     #$BF
	sta     (ptr1),y
;
; sprite[4] = 8;
;
	dey
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     #$08
	ldy     #$04
	sta     (ptr1),y
;
; sprite[7] &= ~OAM_FLIP_H;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$07
	lda     (ptr1),y
	and     #$BF
	sta     (ptr1),y
;
; sprite[8] = 0;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     #$00
	ldy     #$08
	sta     (ptr1),y
;
; sprite[11] &= ~OAM_FLIP_H;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$0B
	lda     (ptr1),y
	and     #$BF
	sta     (ptr1),y
;
; sprite[12] = 8;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     #$08
	ldy     #$0C
	sta     (ptr1),y
;
; sprite[15] &= ~OAM_FLIP_H;  
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$0F
	lda     (ptr1),y
	and     #$BF
L0356:	sta     (ptr1),y
;
; }
;
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ unrleCollision (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_unrleCollision: near

.segment	"CODE"

;
; u8 i = 0;
;
	lda     #$00
	jsr     pusha
;
; u8 j = 0;
;
	jsr     pusha
;
; u16 size = sizeof(test_nam_coll_rle); 
;
	lda     #$76
	jsr     pusha0
;
; u16 outPointer = 0;
;
	jsr     decsp2
	jsr     push0
;
; while ( i <= size ) {
;
	jmp     L01F2
;
; currentByte = test_nam_coll_rle[i];
;
L01F0:	ldy     #$07
	lda     (sp),y
	tay
	lda     _test_nam_coll_rle,y
	ldy     #$03
	sta     (sp),y
;
; ++i;
;
	ldy     #$07
	clc
	lda     #$01
	adc     (sp),y
	sta     (sp),y
;
; byteCount = test_nam_coll_rle[i];
;
	tay
	lda     _test_nam_coll_rle,y
	ldy     #$02
	sta     (sp),y
;
; ++i;
;
	ldy     #$07
	clc
	lda     #$01
	adc     (sp),y
	sta     (sp),y
;
; for ( j = 0; j < byteCount; ++j ) {
;
	lda     #$00
	dey
L0357:	sta     (sp),y
	ldx     #$00
	lda     (sp),y
	ldy     #$02
	cmp     (sp),y
	bcs     L01F2
;
; testColl[outPointer] = currentByte;
;
	lda     #<(_testColl)
	ldy     #$00
	clc
	adc     (sp),y
	sta     ptr1
	lda     #>(_testColl)
	iny
	adc     (sp),y
	sta     ptr1+1
	ldy     #$03
	lda     (sp),y
	ldy     #$00
	sta     (ptr1),y
;
; ++outPointer;
;
	lda     #$01
	jsr     addeq0sp
;
; for ( j = 0; j < byteCount; ++j ) {
;
	ldy     #$06
	clc
	lda     #$01
	adc     (sp),y
	jmp     L0357
;
; while ( i <= size ) {
;
L01F2:	ldy     #$07
	lda     (sp),y
	sec
	ldy     #$04
	sbc     (sp),y
	sta     tmp1
	txa
	iny
	sbc     (sp),y
	ora     tmp1
	bcc     L01F0
	beq     L01F0
;
; }
;
	jmp     incsp8

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ four_Sides (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_four_Sides: near

.segment	"CODE"

;
; void __fastcall__ four_Sides (u8 originX, u8 originY){
;
	jsr     pusha
;
; if (originX < (255 - 1)){ // find the left side
;
	ldy     #$01
	lda     (sp),y
	cmp     #$FE
	bcs     L035B
;
; X1_Left_Side = originX + 1;
;
	clc
	adc     #$01
;
; else {
;
	jmp     L0358
;
; X1_Left_Side = 255;
;
L035B:	lda     #$FF
L0358:	sta     _X1_Left_Side
;
; if (originX < (255 - 15)){ // find the right side
;
	lda     (sp),y
	cmp     #$F0
	bcs     L035C
;
; X1_Right_Side = originX + 15;
;
	clc
	adc     #$0F
;
; else {
;
	jmp     L0359
;
; X1_Right_Side = 255;
;
L035C:	lda     #$FF
L0359:	sta     _X1_Right_Side
;
; Y1_Top = originY + 1; // our top is the same as the master Y
;
	dey
	lda     (sp),y
	clc
	adc     #$01
	sta     _Y1_Top
;
; if (originY < (255)){ // find the bottom side
;
	lda     (sp),y
	cmp     #$FF
	bcs     L035D
;
; Y1_Bottom = originY + 16;
;
	clc
	adc     #$10
;
; else {
;
	jmp     L035A
;
; Y1_Bottom = 255;
;
L035D:	lda     #$FF
L035A:	sta     _Y1_Bottom
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; unsigned int __near__ __fastcall__ getCollisionIndex (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_getCollisionIndex: near

.segment	"CODE"

;
; u16 __fastcall__ getCollisionIndex(u8 screenX, u8 screenY) {
;
	jsr     pusha
;
; return ((u16) screenX >> 3) + (((u16) screenY >> 3) << 5);
;
	ldy     #$01
	lda     (sp),y
	ldx     #$00
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	stx     ptr1+1
	lda     (sp,x)
	lsr     a
	lsr     a
	lsr     a
	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     ptr1
	pha
	lda     tmp1
	adc     ptr1+1
	tax
	pla
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ collide_Check_LR (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_collide_Check_LR: near

.segment	"CODE"

;
; if ((pad & PAD_RIGHT) != 0){  // first check right
;
	lda     _pad
	and     #$80
	beq     L035F
;
; corner = getCollisionIndex(X1_Right_Side, Y1_Top); // top right
;
	lda     _X1_Right_Side
	jsr     pusha
	lda     _Y1_Top
	jsr     _getCollisionIndex
	sta     _corner
	stx     _corner+1
;
; if (testColl[corner] != 0) {
;
	lda     #<(_testColl)
	sta     ptr1
	lda     #>(_testColl)
	clc
	adc     _corner+1
	sta     ptr1+1
	ldy     _corner
	lda     (ptr1),y
	beq     L0237
;
; player_x = (player_x & 0xf8); // if collision, realign
;
	lda     _player_x
	and     #$F8
;
; } else {
;
	jmp     L035E
;
; corner = getCollisionIndex(X1_Right_Side, Y1_Bottom); // bottom right
;
L0237:	lda     _X1_Right_Side
	jsr     pusha
	lda     _Y1_Bottom
	jsr     _getCollisionIndex
	sta     _corner
	stx     _corner+1
;
; if (testColl[corner] != 0)
;
	lda     #<(_testColl)
	sta     ptr1
	lda     #>(_testColl)
	clc
	adc     _corner+1
	sta     ptr1+1
	ldy     _corner
	lda     (ptr1),y
	beq     L025D
;
; player_x = (player_x & 0xf8); // if collision, realign
;
	lda     _player_x
	and     #$F8
;
; else if ((pad & PAD_LEFT) != 0){ // check left
;
	jmp     L035E
L035F:	lda     _pad
	and     #$40
	beq     L025D
;
; corner = getCollisionIndex(X1_Left_Side, Y1_Top); // top left
;
	lda     _X1_Left_Side
	jsr     pusha
	lda     _Y1_Top
	jsr     _getCollisionIndex
	sta     _corner
	stx     _corner+1
;
; if (testColl[corner] != 0) {
;
	lda     #<(_testColl)
	sta     ptr1
	lda     #>(_testColl)
	clc
	adc     _corner+1
	sta     ptr1+1
	ldy     _corner
	lda     (ptr1),y
;
; } else {
;
	bne     L0363
;
; corner = getCollisionIndex(X1_Left_Side, Y1_Bottom); // bottom left
;
	lda     _X1_Left_Side
	jsr     pusha
	lda     _Y1_Bottom
	jsr     _getCollisionIndex
	sta     _corner
	stx     _corner+1
;
; if (testColl[corner] != 0)
;
	lda     #<(_testColl)
	sta     ptr1
	lda     #>(_testColl)
	clc
	adc     _corner+1
	sta     ptr1+1
	ldy     _corner
	lda     (ptr1),y
	beq     L025D
;
; player_x = (player_x & 0xf8) + 8; // if collision, realign   
;
L0363:	lda     _player_x
	and     #$F8
	clc
	adc     #$08
L035E:	sta     _player_x
;
; }
;
L025D:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ collide_Check_UD (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_collide_Check_UD: near

.segment	"CODE"

;
; if ((pad & PAD_DOWN) != 0){ // down first
;
	lda     _pad
	and     #$20
	beq     L0365
;
; corner = getCollisionIndex(X1_Right_Side, Y1_Bottom); // bottom right
;
	lda     _X1_Right_Side
	jsr     pusha
	lda     _Y1_Bottom
	jsr     _getCollisionIndex
	sta     _corner
	stx     _corner+1
;
; if (testColl[corner] != 0) {
;
	lda     #<(_testColl)
	sta     ptr1
	lda     #>(_testColl)
	clc
	adc     _corner+1
	sta     ptr1+1
	ldy     _corner
	lda     (ptr1),y
	beq     L026D
;
; player_y = (player_y & 0xf8) - 1; // if collision, realign
;
	lda     _player_y
	and     #$F8
	sec
	sbc     #$01
;
; } else {
;
	jmp     L0364
;
; corner = getCollisionIndex(X1_Left_Side, Y1_Bottom); // bottom left
;
L026D:	lda     _X1_Left_Side
	jsr     pusha
	lda     _Y1_Bottom
	jsr     _getCollisionIndex
	sta     _corner
	stx     _corner+1
;
; if (testColl[corner] != 0)
;
	lda     #<(_testColl)
	sta     ptr1
	lda     #>(_testColl)
	clc
	adc     _corner+1
	sta     ptr1+1
	ldy     _corner
	lda     (ptr1),y
	beq     L0294
;
; player_y = (player_y & 0xf8) - 1; // if collision, realign   
;
	lda     _player_y
	and     #$F8
	sec
	sbc     #$01
;
; else if ((pad & PAD_UP) != 0) { //or up
;
	jmp     L0364
L0365:	lda     _pad
	and     #$10
	beq     L0294
;
; corner = getCollisionIndex(X1_Right_Side, Y1_Top); // top right
;
	lda     _X1_Right_Side
	jsr     pusha
	lda     _Y1_Top
	jsr     _getCollisionIndex
	sta     _corner
	stx     _corner+1
;
; if (testColl[corner] != 0)
;
	lda     #<(_testColl)
	sta     ptr1
	lda     #>(_testColl)
	clc
	adc     _corner+1
	sta     ptr1+1
	ldy     _corner
	lda     (ptr1),y
	beq     L0289
;
; player_y = (player_y & 0xf8) + 7; // if collision, realign
;
	lda     _player_y
	and     #$F8
	clc
	adc     #$07
	sta     _player_y
;
; corner = getCollisionIndex(X1_Left_Side, Y1_Top);  // top left
;
L0289:	lda     _X1_Left_Side
	jsr     pusha
	lda     _Y1_Top
	jsr     _getCollisionIndex
	sta     _corner
	stx     _corner+1
;
; if (testColl[corner] != 0)
;
	lda     #<(_testColl)
	sta     ptr1
	lda     #>(_testColl)
	clc
	adc     _corner+1
	sta     ptr1+1
	ldy     _corner
	lda     (ptr1),y
	beq     L0294
;
; player_y = (player_y & 0xf8) + 7; // if collision, realign
;
	lda     _player_y
	and     #$F8
	clc
	adc     #$07
L0364:	sta     _player_y
;
; }
;
L0294:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ updateEnemy (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updateEnemy: near

.segment	"CODE"

;
; if ( enemyDir == 1 ) {
;
	lda     _enemyDir
	cmp     #$01
	bne     L0369
;
; enemy_x += 1;
;
	inc     _enemy_x
;
; } else {
;
	jmp     L0366
;
; enemy_x -= 1;
;
L0369:	dec     _enemy_x
;
; if ( enemy_x <= enemyInitX - 50 ) {
;
L0366:	lda     _enemy_x
	jsr     pusha0
	lda     _enemyInitX
	sec
	sbc     #$32
	bcs     L02A5
	ldx     #$FF
L02A5:	jsr     tosicmp
	beq     L0368
	bcs     L02A3
;
; flipSprite(enemySpriteData, 1);
;
L0368:	lda     #<(_enemySpriteData)
	ldx     #>(_enemySpriteData)
	jsr     pushax
	lda     #$01
	jsr     _flipSprite
;
; enemyDir = 1;
;
	lda     #$01
;
; } else if ( enemy_x > enemyInitX ) {
;
	jmp     L0367
L02A3:	lda     _enemy_x
	sec
	sbc     _enemyInitX
	bcc     L02AC
	beq     L02AC
;
; flipSprite(enemySpriteData, 0);
;
	lda     #<(_enemySpriteData)
	ldx     #>(_enemySpriteData)
	jsr     pushax
	lda     #$00
	jsr     _flipSprite
;
; enemyDir = 0;
;
	lda     #$00
L0367:	sta     _enemyDir
;
; }
;
L02AC:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ playerEnemyCollideCheck (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_playerEnemyCollideCheck: near

.segment	"CODE"

;
; u8 enemyTop = enemy_y + 2;
;
	lda     _enemy_y
	clc
	adc     #$02
	jsr     pusha
;
; u8 enemyBottom = enemy_y + 14;
;
	lda     _enemy_y
	clc
	adc     #$0E
	jsr     pusha
;
; u8 enemyLeft = enemy_x + 2;
;
	lda     _enemy_x
	clc
	adc     #$02
	jsr     pusha
;
; u8 enemyRight = enemy_x + 14;
;
	lda     _enemy_x
	clc
	adc     #$0E
	jsr     pusha
;
; playerEnemyColliding = 0;
;
	lda     #$00
	sta     _playerEnemyColliding
;
; if ( !( X1_Right_Side < enemyLeft  || 
;
	lda     _X1_Right_Side
	ldy     #$01
	cmp     (sp),y
	bcc     L036A
;
; X1_Left_Side >= enemyRight || 
;
	lda     _X1_Left_Side
	dey
	cmp     (sp),y
	bcs     L036A
;
; Y1_Bottom <  enemyTop || 
;
	lda     _Y1_Bottom
	ldy     #$03
	cmp     (sp),y
	bcc     L036A
;
; Y1_Top    >= enemyBottom ) ) {
;
	lda     _Y1_Top
	dey
	cmp     (sp),y
	bcs     L036A
	lda     #$00
	jmp     L02C1
L036A:	lda     #$01
L02C1:	jsr     bnega
	beq     L02BE
;
; playerEnemyColliding = 1;
;
	lda     #$01
	sta     _playerEnemyColliding
;
; }
;
L02BE:	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; memcpy(palSprites, paldat, 16);
;
	ldy     #$0F
L02C9:	lda     _paldat,y
	sta     _palSprites,y
	dey
	bpl     L02C9
;
; memcpy(palBG, paldat, 4);
;
	ldy     #$03
L02CE:	lda     _paldat,y
	sta     _palBG,y
	dey
	bpl     L02CE
;
; unrleCollision();
;
	jsr     _unrleCollision
;
; pal_spr(palSprites);
;
	lda     #<(_palSprites)
	ldx     #>(_palSprites)
	jsr     _pal_spr
;
; pal_bg(palBG);
;
	lda     #<(_palBG)
	ldx     #>(_palBG)
	jsr     _pal_bg
;
; vram_adr(NAMETABLE_A); //unpack nametable into VRAM
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(test_nam); 
;
	lda     #<(_test_nam)
	ldx     #>(_test_nam)
	jsr     _vram_unrle
;
; ppu_on_all(); //enable rendering
;
	jsr     _ppu_on_all
;
; player_x = 52;
;
	lda     #$34
	sta     _player_x
;
; player_y = 100;
;
	lda     #$64
	sta     _player_y
;
; enemy_x = enemyInitX;
;
	lda     _enemyInitX
	sta     _enemy_x
;
; enemy_y = enemyInitY;
;
	lda     _enemyInitY
	sta     _enemy_y
;
; touch = 0; // collision flag
;
	lda     #$00
	sta     _touch
;
; frame = 0; // frame counter
;
	sta     _frame
;
; playerFrame = 0;
;
	sta     _playerFrame
;
; enemyFrame = 0;
;
	sta     _enemyFrame
;
; enemyDir = 0;
;
	sta     _enemyDir
;
; setFrame(playerSpriteData, playerFrames[playerFrame]);
;
	lda     #<(_playerSpriteData)
	ldx     #>(_playerSpriteData)
	jsr     pushax
	ldx     #$00
	lda     _playerFrame
	jsr     aslax2
	clc
	adc     #<(_playerFrames)
	tay
	txa
	adc     #>(_playerFrames)
	tax
	tya
	jsr     _setFrame
;
; setFrame(enemySpriteData, enemyFrames[enemyFrame]);
;
	lda     #<(_enemySpriteData)
	ldx     #>(_enemySpriteData)
	jsr     pushax
	ldx     #$00
	lda     _enemyFrame
	jsr     aslax2
	clc
	adc     #<(_enemyFrames)
	tay
	txa
	adc     #>(_enemyFrames)
	tax
	tya
	jsr     _setFrame
;
; ppu_wait_frame(); // wait for next TV frame
;
L02F3:	jsr     _ppu_wait_frame
;
; spr = 0;
;
	lda     #$00
	sta     _spr
;
; i = 0;
;
	sta     _i
;
; if ( ( frame & 0x0F ) == 0x0F ) {
;
	lda     _frame
	and     #$0F
	cmp     #$0F
	bne     L02FC
;
; playerFrame ^= 1;
;
	lda     _playerFrame
	eor     #$01
	sta     _playerFrame
;
; setFrame(playerSpriteData, playerFrames[playerFrame]);
;
	lda     #<(_playerSpriteData)
	ldx     #>(_playerSpriteData)
	jsr     pushax
	ldx     #$00
	lda     _playerFrame
	jsr     aslax2
	clc
	adc     #<(_playerFrames)
	tay
	txa
	adc     #>(_playerFrames)
	tax
	tya
	jsr     _setFrame
;
; enemyFrame ^= 1;
;
	lda     _enemyFrame
	eor     #$01
	sta     _enemyFrame
;
; setFrame(enemySpriteData, enemyFrames[enemyFrame]);
;
	lda     #<(_enemySpriteData)
	ldx     #>(_enemySpriteData)
	jsr     pushax
	ldx     #$00
	lda     _enemyFrame
	jsr     aslax2
	clc
	adc     #<(_enemyFrames)
	tay
	txa
	adc     #>(_enemyFrames)
	tax
	tya
	jsr     _setFrame
;
; spr = oam_meta_spr(player_x, player_y, spr, playerSpriteData);
;
L02FC:	jsr     decsp3
	lda     _player_x
	ldy     #$02
	sta     (sp),y
	lda     _player_y
	dey
	sta     (sp),y
	lda     _spr
	dey
	sta     (sp),y
	lda     #<(_playerSpriteData)
	ldx     #>(_playerSpriteData)
	jsr     _oam_meta_spr
	sta     _spr
;
; spr = oam_meta_spr(enemy_x, enemy_y, spr, enemySpriteData);
;
	jsr     decsp3
	lda     _enemy_x
	ldy     #$02
	sta     (sp),y
	lda     _enemy_y
	dey
	sta     (sp),y
	lda     _spr
	dey
	sta     (sp),y
	lda     #<(_enemySpriteData)
	ldx     #>(_enemySpriteData)
	jsr     _oam_meta_spr
	sta     _spr
;
; pad = pad_poll(i);
;
	lda     _i
	jsr     _pad_poll
	sta     _pad
;
; if ( pad & PAD_RIGHT ) {
;
	and     #$80
	beq     L036D
;
; flipSprite(playerSpriteData, 1);
;
	lda     #<(_playerSpriteData)
	ldx     #>(_playerSpriteData)
	jsr     pushax
	lda     #$01
;
; } else if ( pad & PAD_LEFT ) {
;
	jmp     L036B
L036D:	lda     _pad
	and     #$40
	beq     L0321
;
; flipSprite(playerSpriteData, 0);
;
	lda     #<(_playerSpriteData)
	ldx     #>(_playerSpriteData)
	jsr     pushax
	lda     #$00
L036B:	jsr     _flipSprite
;
; updateEnemy();
;
L0321:	jsr     _updateEnemy
;
; if ( pad&PAD_LEFT  && player_x > 0 )   player_x -= 2;
;
	lda     _pad
	and     #$40
	beq     L0371
	lda     _player_x
	beq     L0371
	sec
	sbc     #$02
	sta     _player_x
;
; if ( pad&PAD_RIGHT && player_x < 240 ) player_x += 2;
;
L0371:	lda     _pad
	and     #$80
	beq     L032D
	lda     _player_x
	cmp     #$F0
	bcs     L032D
	lda     #$02
	clc
	adc     _player_x
	sta     _player_x
;
; four_Sides(player_x, player_y); 
;
L032D:	lda     _player_x
	jsr     pusha
	lda     _player_y
	jsr     _four_Sides
;
; collide_Check_LR();  
;
	jsr     _collide_Check_LR
;
; if ( pad&PAD_UP    && player_y > 0 )   player_y -= 2;
;
	lda     _pad
	and     #$10
	beq     L0378
	lda     _player_y
	beq     L0378
	sec
	sbc     #$02
	sta     _player_y
;
; if ( pad&PAD_DOWN  && player_y < 220 ) player_y += 2;
;
L0378:	lda     _pad
	and     #$20
	beq     L033D
	lda     _player_y
	cmp     #$DC
	bcs     L033D
	lda     #$02
	clc
	adc     _player_y
	sta     _player_y
;
; four_Sides(player_x, player_y); 
;
L033D:	lda     _player_x
	jsr     pusha
	lda     _player_y
	jsr     _four_Sides
;
; collide_Check_UD();
;
	jsr     _collide_Check_UD
;
; four_Sides(player_x, player_y); 
;
	lda     _player_x
	jsr     pusha
	lda     _player_y
	jsr     _four_Sides
;
; playerEnemyCollideCheck();
;
	jsr     _playerEnemyCollideCheck
;
; if ( playerEnemyColliding ) {
;
	lda     _playerEnemyColliding
	beq     L034B
;
; setPalette(playerSpriteData, 0x0);
;
	lda     #<(_playerSpriteData)
	ldx     #>(_playerSpriteData)
	jsr     pushax
	lda     #$00
;
; } else {
;
	jmp     L036C
;
; setPalette(playerSpriteData, 0x2);
;
L034B:	lda     #<(_playerSpriteData)
	ldx     #>(_playerSpriteData)
	jsr     pushax
	lda     #$02
L036C:	jsr     _setPalette
;
; ++frame;
;
	inc     _frame
;
; while ( 1 )
;
	jmp     L02F3

.endproc

