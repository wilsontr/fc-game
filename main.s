;
; File generated by cc65 v 2.16 - Git N/A
;
	.fopt		compiler,"cc65 v 2.16 - Git N/A"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_memcpy
	.import		_pal_bg
	.import		_pal_spr
	.import		_ppu_wait_frame
	.import		_ppu_on_all
	.import		_oam_meta_spr
	.import		_pad_poll
	.import		_vram_adr
	.import		_vram_unrle
	.export		_map1
	.export		_collisionMap
	.export		_oam_off
	.import		_paldat
	.export		_playerFrames
	.export		_playerSpriteData
	.export		_potionSpriteData
	.export		_enemyData
	.export		_enemyFrames
	.export		_enemySpriteDataTemplate
	.export		_setSpriteFrame
	.export		_setSpritePalette
	.export		_setSpritePriority
	.export		_flipSprite
	.export		_spriteCount
	.export		_updateEnemySprites
	.export		_updatePlayerSprite
	.export		_updatePotionSprite
	.export		_four_Sides
	.export		_getCollisionIndex
	.export		_smallCollideCheckVertical
	.export		_collideCheckVertical
	.export		_collideCheckHorizontal
	.export		_bgVertCollideCheck
	.export		_bgHorizCollideCheck
	.export		_playerEnemyCollideCheck
	.export		_potionEnemyCollideCheck
	.export		_setupMap
	.export		_updateEnemies
	.export		_updatePlayerVerticalMovement
	.export		_playerMoveHorizontal
	.export		_updatePlayerAttack
	.export		_updatePotionMovement
	.export		_main

.segment	"DATA"

.segment	"ZEROPAGE"
.segment	"DATA"
_spriteFlickerIndex:
	.byte	$00
_sprPriorityToggle:
	.byte	$00
_playerFrame:
	.byte	$00
_playerFalling:
	.byte	$00
_playerJumping:
	.byte	$00
_playerJumpHeight:
	.byte	$00
_playerJumpCounter:
	.byte	$00
_playerVertVel:
	.byte	$00
_playerVertAccel:
	.byte	$00
_playerSpriteData:
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$09
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$19
	.byte	$03
	.byte	$80
_potionX:
	.byte	$F8
_potionY:
	.byte	$F8
_potionIsActive:
	.byte	$00
_potionVerticalVel:
	.byte	$00
_potionMoveCounter:
	.byte	$00
_potionSpriteData:
	.byte	$00
	.byte	$00
	.byte	$2A
	.byte	$02
	.byte	$80
_enemySpriteCount:
	.byte	$00

.segment	"RODATA"

_map1:
	.byte	$01
	.byte	$42
	.byte	$01
	.byte	$1F
	.byte	$41
	.byte	$01
	.byte	$20
	.byte	$00
	.byte	$01
	.byte	$0D
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$0E
	.byte	$41
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$0D
	.byte	$41
	.byte	$42
	.byte	$00
	.byte	$01
	.byte	$06
	.byte	$42
	.byte	$01
	.byte	$06
	.byte	$41
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$42
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$06
	.byte	$41
	.byte	$42
	.byte	$00
	.byte	$01
	.byte	$08
	.byte	$42
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$41
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$42
	.byte	$42
	.byte	$41
	.byte	$01
	.byte	$09
	.byte	$42
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$41
	.byte	$01
	.byte	$05
	.byte	$42
	.byte	$42
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$41
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$41
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$41
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$42
	.byte	$00
	.byte	$01
	.byte	$14
	.byte	$41
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$41
	.byte	$01
	.byte	$0D
	.byte	$42
	.byte	$01
	.byte	$03
	.byte	$41
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$41
	.byte	$41
	.byte	$50
	.byte	$00
	.byte	$01
	.byte	$0A
	.byte	$42
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$41
	.byte	$42
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$41
	.byte	$41
	.byte	$50
	.byte	$00
	.byte	$01
	.byte	$12
	.byte	$41
	.byte	$42
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$41
	.byte	$41
	.byte	$50
	.byte	$00
	.byte	$01
	.byte	$12
	.byte	$41
	.byte	$42
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$41
	.byte	$41
	.byte	$50
	.byte	$42
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$41
	.byte	$42
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$41
	.byte	$01
	.byte	$08
	.byte	$42
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$41
	.byte	$01
	.byte	$09
	.byte	$00
	.byte	$00
	.byte	$42
	.byte	$42
	.byte	$41
	.byte	$01
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$41
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$41
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$42
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$41
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$41
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$41
	.byte	$01
	.byte	$12
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$41
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$06
	.byte	$42
	.byte	$01
	.byte	$04
	.byte	$41
	.byte	$42
	.byte	$01
	.byte	$07
	.byte	$00
	.byte	$01
	.byte	$08
	.byte	$41
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$42
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$41
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$41
	.byte	$01
	.byte	$07
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$41
	.byte	$01
	.byte	$07
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$41
	.byte	$01
	.byte	$06
	.byte	$42
	.byte	$01
	.byte	$06
	.byte	$43
	.byte	$43
	.byte	$00
	.byte	$00
	.byte	$42
	.byte	$01
	.byte	$09
	.byte	$43
	.byte	$42
	.byte	$01
	.byte	$07
	.byte	$41
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$42
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$42
	.byte	$01
	.byte	$11
	.byte	$00
	.byte	$41
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$41
	.byte	$01
	.byte	$20
	.byte	$42
	.byte	$01
	.byte	$1E
	.byte	$42
	.byte	$01
	.byte	$00
_collisionMap:
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_playerFrames:
	.byte	$08
	.byte	$09
	.byte	$18
	.byte	$19
	.byte	$28
	.byte	$29
	.byte	$38
	.byte	$39
_enemyFrames:
	.byte	$06
	.byte	$07
	.byte	$16
	.byte	$17
	.byte	$26
	.byte	$27
	.byte	$36
	.byte	$37
_enemySpriteDataTemplate:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$00
	.byte	$03
	.byte	$80

.segment	"BSS"

.segment	"ZEROPAGE"
.segment	"BSS"
.segment	"ZEROPAGE"
_oam_off:
	.res	1,$00
.segment	"BSS"
_leftSide:
	.res	1,$00
.segment	"BSS"
_rightSide:
	.res	1,$00
.segment	"BSS"
_topSide:
	.res	1,$00
.segment	"BSS"
_bottomSide:
	.res	1,$00
.segment	"BSS"
_testCorner:
	.res	2,$00
.segment	"BSS"
_i:
	.res	1,$00
.segment	"BSS"
_pad:
	.res	1,$00
.segment	"BSS"
_oamSpriteIndex:
	.res	1,$00
.segment	"BSS"
_touch:
	.res	1,$00
.segment	"BSS"
_frameCount:
	.res	1,$00
.segment	"BSS"
_palSprites:
	.res	4,$00
.segment	"BSS"
_palBG:
	.res	4,$00
.segment	"BSS"
_playerX:
	.res	1,$00
.segment	"BSS"
_playerY:
	.res	1,$00
.segment	"BSS"
_playerDir:
	.res	1,$00
.segment	"BSS"
_jumpIteration:
	.res	1,$00
.segment	"BSS"
_playerEnemyColliding:
	.res	1,$00
.segment	"BSS"
_potionDirection:
	.res	1,$00
.segment	"BSS"
_numEnemies:
	.res	1,$00
.segment	"BSS"
_enemyData:
	.res	80,$00
.segment	"BSS"
_enemySpriteData:
	.res	170,$00

; ---------------------------------------------------------------
; void __near__ __fastcall__ setSpriteFrame (__near__ unsigned char *, __near__ const unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_setSpriteFrame: near

.segment	"CODE"

;
; void __fastcall__ setSpriteFrame(u8 *sprite, const u8 *frame) {
;
	jsr     pushax
;
; sprite[2] = frame[0];
;
	ldy     #$05
	jsr     pushwysp
	ldy     #$03
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	ldy     #$02
	jsr     staspidx
;
; sprite[6] = frame[1];
;
	ldy     #$05
	jsr     pushwysp
	ldy     #$03
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	dey
	lda     (ptr1),y
	ldy     #$06
	jsr     staspidx
;
; sprite[10] = frame[2];
;
	ldy     #$05
	jsr     pushwysp
	ldy     #$03
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     (ptr1),y
	ldy     #$0A
	jsr     staspidx
;
; sprite[14] = frame[3];
;
	ldy     #$05
	jsr     pushwysp
	ldy     #$03
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	iny
	lda     (ptr1),y
	ldy     #$0E
	jsr     staspidx
;
; }
;
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ setSpritePalette (__near__ unsigned char *, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_setSpritePalette: near

.segment	"CODE"

;
; void __fastcall__ setSpritePalette(u8 *sprite, u8 palette) {
;
	jsr     pusha
;
; for ( i = 3; i <= 15; i = i + 4 ) {
;
	jsr     decsp1
	lda     #$03
	ldy     #$00
L08B3:	sta     (sp),y
	cmp     #$10
	bcs     L055C
;
; sprite[i] &= ~(0x3);
;
	lda     (sp),y
	clc
	ldy     #$02
	adc     (sp),y
	sta     ptr1
	lda     #$00
	iny
	adc     (sp),y
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	and     #$FC
	sta     (ptr1),y
;
; sprite[i] |= palette;
;
	lda     (sp),y
	clc
	ldy     #$02
	adc     (sp),y
	pha
	lda     #$00
	iny
	adc     (sp),y
	tax
	pla
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     ptr1
	ldy     #$03
	lda     (sp),y
	ora     ptr1
	ldy     #$00
	jsr     staspidx
;
; for ( i = 3; i <= 15; i = i + 4 ) {
;
	ldy     #$00
	lda     (sp),y
	clc
	adc     #$04
	jmp     L08B3
;
; }
;
L055C:	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ setSpritePriority (__near__ unsigned char *, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_setSpritePriority: near

.segment	"CODE"

;
; void __fastcall__ setSpritePriority(u8 *sprite, u8 priority) {
;
	jsr     pusha
;
; if ( priority ) {
;
	ldy     #$00
	lda     (sp),y
	beq     L056D
;
; sprite[3] |= OAM_BEHIND;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$03
	lda     (ptr1),y
	ora     #$20
	sta     (ptr1),y
;
; sprite[7] |= OAM_BEHIND;
;
	dey
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$07
	lda     (ptr1),y
	ora     #$20
	sta     (ptr1),y
;
; sprite[11] |= OAM_BEHIND;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$0B
	lda     (ptr1),y
	ora     #$20
	sta     (ptr1),y
;
; sprite[15] |= OAM_BEHIND;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$0F
	lda     (ptr1),y
	ora     #$20
;
; } else {
;
	jmp     L08B4
;
; sprite[3] &= ~OAM_BEHIND;
;
L056D:	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$03
	lda     (ptr1),y
	and     #$DF
	sta     (ptr1),y
;
; sprite[7] &= ~OAM_BEHIND;
;
	dey
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$07
	lda     (ptr1),y
	and     #$DF
	sta     (ptr1),y
;
; sprite[11] &= ~OAM_BEHIND;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$0B
	lda     (ptr1),y
	and     #$DF
	sta     (ptr1),y
;
; sprite[15] &= ~OAM_BEHIND;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$0F
	lda     (ptr1),y
	and     #$DF
L08B4:	sta     (ptr1),y
;
; }
;
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ flipSprite (__near__ unsigned char *, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_flipSprite: near

.segment	"CODE"

;
; void __fastcall__ flipSprite(u8 *sprite, u8 flip) {
;
	jsr     pusha
;
; if ( flip ) {
;
	ldy     #$00
	lda     (sp),y
	jeq     L0589
;
; sprite[0] = 8;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     #$08
	dey
	sta     (ptr1),y
;
; sprite[3] |= OAM_FLIP_H;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$03
	lda     (ptr1),y
	ora     #$40
	sta     (ptr1),y
;
; sprite[4] = 0;
;
	dey
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     #$00
	ldy     #$04
	sta     (ptr1),y
;
; sprite[7] |= OAM_FLIP_H;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$07
	lda     (ptr1),y
	ora     #$40
	sta     (ptr1),y
;
; sprite[8] = 8;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     #$08
	tay
	sta     (ptr1),y
;
; sprite[11] |= OAM_FLIP_H;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$0B
	lda     (ptr1),y
	ora     #$40
	sta     (ptr1),y
;
; sprite[12] = 0;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     #$00
	ldy     #$0C
	sta     (ptr1),y
;
; sprite[15] |= OAM_FLIP_H;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$0F
	lda     (ptr1),y
	ora     #$40
;
; } else {
;
	jmp     L08B5
;
; sprite[0] = 0;
;
L0589:	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     #$00
	dey
	sta     (ptr1),y
;
; sprite[3] &= ~OAM_FLIP_H;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$03
	lda     (ptr1),y
	and     #$BF
	sta     (ptr1),y
;
; sprite[4] = 8;
;
	dey
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     #$08
	ldy     #$04
	sta     (ptr1),y
;
; sprite[7] &= ~OAM_FLIP_H;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$07
	lda     (ptr1),y
	and     #$BF
	sta     (ptr1),y
;
; sprite[8] = 0;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     #$00
	ldy     #$08
	sta     (ptr1),y
;
; sprite[11] &= ~OAM_FLIP_H;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$0B
	lda     (ptr1),y
	and     #$BF
	sta     (ptr1),y
;
; sprite[12] = 8;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     #$08
	ldy     #$0C
	sta     (ptr1),y
;
; sprite[15] &= ~OAM_FLIP_H;  
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$0F
	lda     (ptr1),y
	and     #$BF
L08B5:	sta     (ptr1),y
;
; }
;
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ __fastcall__ spriteCount (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_spriteCount: near

.segment	"CODE"

;
; ++enemySpriteCount;
;
	inc     _enemySpriteCount
;
; if ( enemySpriteCount >= numEnemies ) {
;
	ldx     #$00
	lda     _enemySpriteCount
	cmp     _numEnemies
	bcc     L08B6
;
; enemySpriteCount = 0;
;
	stx     _enemySpriteCount
;
; return enemySpriteCount;
;
L08B6:	lda     _enemySpriteCount
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ updateEnemySprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updateEnemySprites: near

.segment	"CODE"

;
; for ( i = 0; i < numEnemies; ++i ) {
;
	lda     #$00
	sta     _i
L08B7:	lda     _i
	cmp     _numEnemies
	bcc     L08B9
;
; }
;
	rts
;
; spriteFlickerIndex = spriteCount();
;
L08B9:	jsr     _spriteCount
	sta     _spriteFlickerIndex
;
; if ( ( frameCount & 0x0F ) == 0x0F ) {
;
	lda     _frameCount
	ldx     #$00
	and     #$0F
	cmp     #$0F
	bne     L08B8
;
; enemyData[spriteFlickerIndex].frame ^= 1;
;
	lda     _spriteFlickerIndex
	jsr     aslax2
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	eor     #$01
	sta     (ptr1),y
;
; setSpriteFrame(enemySpriteData[spriteFlickerIndex], enemyFrames[enemyData[spriteFlickerIndex].frame]);
;
	lda     _spriteFlickerIndex
	jsr     pusha0
	lda     #$11
	jsr     tosmula0
	clc
	adc     #<(_enemySpriteData)
	tay
	txa
	adc     #>(_enemySpriteData)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _spriteFlickerIndex
	jsr     aslax2
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	ldy     #$02
	ldx     #$00
	lda     (ptr1),y
	jsr     aslax2
	clc
	adc     #<(_enemyFrames)
	tay
	txa
	adc     #>(_enemyFrames)
	tax
	tya
	jsr     _setSpriteFrame
;
; setSpritePriority(enemySpriteData[i], sprPriorityToggle);
;
L08B8:	lda     _i
	jsr     pusha0
	lda     #$11
	jsr     tosmula0
	clc
	adc     #<(_enemySpriteData)
	tay
	txa
	adc     #>(_enemySpriteData)
	tax
	tya
	jsr     pushax
	lda     _sprPriorityToggle
	jsr     _setSpritePriority
;
; sprPriorityToggle ^= 1;
;
	lda     _sprPriorityToggle
	eor     #$01
	sta     _sprPriorityToggle
;
; oamSpriteIndex = oam_meta_spr(enemyData[spriteFlickerIndex].x, enemyData[spriteFlickerIndex].y, oamSpriteIndex, enemySpriteData[spriteFlickerIndex]); 
;
	jsr     decsp3
	ldx     #$00
	lda     _spriteFlickerIndex
	jsr     aslax2
	sta     ptr1
	txa
	clc
	adc     #>(_enemyData)
	sta     ptr1+1
	ldy     #<(_enemyData)
	lda     (ptr1),y
	ldy     #$02
	sta     (sp),y
	ldx     #$00
	lda     _spriteFlickerIndex
	jsr     aslax2
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	dey
	lda     (ptr1),y
	sta     (sp),y
	lda     _oamSpriteIndex
	dey
	sta     (sp),y
	lda     _spriteFlickerIndex
	jsr     pusha0
	lda     #$11
	jsr     tosmula0
	clc
	adc     #<(_enemySpriteData)
	tay
	txa
	adc     #>(_enemySpriteData)
	tax
	tya
	jsr     _oam_meta_spr
	sta     _oamSpriteIndex
;
; for ( i = 0; i < numEnemies; ++i ) {
;
	inc     _i
	jmp     L08B7

.endproc

; ---------------------------------------------------------------
; void __near__ updatePlayerSprite (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updatePlayerSprite: near

.segment	"CODE"

;
; if ( pad & PAD_RIGHT ) {
;
	lda     _pad
	and     #$80
	beq     L08BB
;
; flipSprite(playerSpriteData, 1);
;
	lda     #<(_playerSpriteData)
	ldx     #>(_playerSpriteData)
	jsr     pushax
	lda     #$01
;
; } else if ( pad & PAD_LEFT ) {
;
	jmp     L08BA
L08BB:	lda     _pad
	and     #$40
	beq     L08BC
;
; flipSprite(playerSpriteData, 0);
;
	lda     #<(_playerSpriteData)
	ldx     #>(_playerSpriteData)
	jsr     pushax
	lda     #$00
L08BA:	jsr     _flipSprite
;
; if ( ( frameCount & 0x0F ) == 0x0F ) {
;
L08BC:	lda     _frameCount
	and     #$0F
	cmp     #$0F
	bne     L05F6
;
; playerFrame ^= 1;
;
	lda     _playerFrame
	eor     #$01
	sta     _playerFrame
;
; setSpriteFrame(playerSpriteData, playerFrames[playerFrame]);
;
	lda     #<(_playerSpriteData)
	ldx     #>(_playerSpriteData)
	jsr     pushax
	ldx     #$00
	lda     _playerFrame
	jsr     aslax2
	clc
	adc     #<(_playerFrames)
	tay
	txa
	adc     #>(_playerFrames)
	tax
	tya
	jsr     _setSpriteFrame
;
; oamSpriteIndex = oam_meta_spr(playerX, playerY, oamSpriteIndex, playerSpriteData); 
;
L05F6:	jsr     decsp3
	lda     _playerX
	ldy     #$02
	sta     (sp),y
	lda     _playerY
	dey
	sta     (sp),y
	lda     _oamSpriteIndex
	dey
	sta     (sp),y
	lda     #<(_playerSpriteData)
	ldx     #>(_playerSpriteData)
	jsr     _oam_meta_spr
	sta     _oamSpriteIndex
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ updatePotionSprite (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updatePotionSprite: near

.segment	"CODE"

;
; oamSpriteIndex = oam_meta_spr(potionX, potionY, oamSpriteIndex, potionSpriteData); 
;
	jsr     decsp3
	lda     _potionX
	ldy     #$02
	sta     (sp),y
	lda     _potionY
	dey
	sta     (sp),y
	lda     _oamSpriteIndex
	dey
	sta     (sp),y
	lda     #<(_potionSpriteData)
	ldx     #>(_potionSpriteData)
	jsr     _oam_meta_spr
	sta     _oamSpriteIndex
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ four_Sides (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_four_Sides: near

.segment	"CODE"

;
; void __fastcall__ four_Sides(u8 originX, u8 originY) {
;
	jsr     pusha
;
; if (originX < (255 - 1)){ // find the left side
;
	ldy     #$01
	lda     (sp),y
	cmp     #$FE
	bcs     L08C0
;
; leftSide = originX + 1;
;
	clc
	adc     #$01
;
; else {
;
	jmp     L08BD
;
; leftSide = 255;
;
L08C0:	lda     #$FF
L08BD:	sta     _leftSide
;
; if (originX < (255 - 15)){ // find the right side
;
	lda     (sp),y
	cmp     #$F0
	bcs     L08C1
;
; rightSide = originX + 15;
;
	clc
	adc     #$0F
;
; else {
;
	jmp     L08BE
;
; rightSide = 255;
;
L08C1:	lda     #$FF
L08BE:	sta     _rightSide
;
; topSide = originY + 1; // our top is the same as the master Y
;
	dey
	lda     (sp),y
	clc
	adc     #$01
	sta     _topSide
;
; if (originY < (255)){ // find the bottom side
;
	lda     (sp),y
	cmp     #$FF
	bcs     L08C2
;
; bottomSide = originY + 16;
;
	clc
	adc     #$10
;
; else {
;
	jmp     L08BF
;
; bottomSide = 255;
;
L08C2:	lda     #$FF
L08BF:	sta     _bottomSide
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; unsigned int __near__ __fastcall__ getCollisionIndex (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_getCollisionIndex: near

.segment	"CODE"

;
; u16 __fastcall__ getCollisionIndex(u8 screenX, u8 screenY) {
;
	jsr     pusha
;
; return ( screenX >> 3 ) + ( ( screenY >> 3 ) << 5);
;
	ldy     #$01
	ldx     #$00
	lda     (sp),y
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	stx     ptr1+1
	lda     (sp,x)
	lsr     a
	lsr     a
	lsr     a
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     ptr1
	pha
	lda     tmp1
	adc     ptr1+1
	tax
	pla
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ __fastcall__ smallCollideCheckVertical (unsigned char, unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_smallCollideCheckVertical: near

.segment	"CODE"

;
; u8 __fastcall__ smallCollideCheckVertical(u8 originX, u8 originY, u8 direction) {
;
	jsr     pusha
;
; leftSide = originX ;
;
	ldy     #$02
	lda     (sp),y
	sta     _leftSide
;
; rightSide = originX + 8;
;
	lda     (sp),y
	clc
	adc     #$08
	sta     _rightSide
;
; topSide = originY;
;
	dey
	lda     (sp),y
	sta     _topSide
;
; bottomSide = originY + 8;
;
	lda     (sp),y
	clc
	adc     #$08
	sta     _bottomSide
;
; if ( ( (direction & PAD_UP) != 0) ) {
;
	dey
	lda     (sp),y
	and     #$10
	beq     L08C5
;
; testCorner = getCollisionIndex(rightSide, topSide);
;
	lda     _rightSide
	jsr     pusha
	lda     _topSide
	jsr     _getCollisionIndex
	sta     _testCorner
	stx     _testCorner+1
;
; if ( collisionMap[testCorner] == 0 ) {
;
	lda     #<(_collisionMap)
	sta     ptr1
	lda     #>(_collisionMap)
	clc
	adc     _testCorner+1
	sta     ptr1+1
	ldy     _testCorner
	lda     (ptr1),y
	bne     L064C
;
; testCorner = getCollisionIndex(leftSide, topSide);
;
	lda     _leftSide
	jsr     pusha
	lda     _topSide
;
; } else if ( (direction & PAD_DOWN) != 0 ) {
;
	jmp     L08C7
L08C5:	lda     (sp),y
	and     #$20
	beq     L064C
;
; testCorner = getCollisionIndex(rightSide, bottomSide);
;
	lda     _rightSide
	jsr     pusha
	lda     _bottomSide
	jsr     _getCollisionIndex
	sta     _testCorner
	stx     _testCorner+1
;
; if ( collisionMap[testCorner] == 0 ) {
;
	lda     #<(_collisionMap)
	sta     ptr1
	lda     #>(_collisionMap)
	clc
	adc     _testCorner+1
	sta     ptr1+1
	ldy     _testCorner
	lda     (ptr1),y
	bne     L064C
;
; testCorner = getCollisionIndex(leftSide, bottomSide);
;
	lda     _leftSide
	jsr     pusha
	lda     _bottomSide
L08C7:	jsr     _getCollisionIndex
	sta     _testCorner
	stx     _testCorner+1
;
; return collisionMap[testCorner];
;
L064C:	lda     #<(_collisionMap)
	sta     ptr1
	lda     #>(_collisionMap)
	clc
	adc     _testCorner+1
	sta     ptr1+1
	ldy     _testCorner
	ldx     #$00
	lda     (ptr1),y
;
; }
;
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ __fastcall__ collideCheckVertical (unsigned char, unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_collideCheckVertical: near

.segment	"CODE"

;
; u8 __fastcall__ collideCheckVertical(u8 originX, u8 originY, u8 direction) {
;
	jsr     pusha
;
; leftSide = originX + 1;
;
	ldy     #$02
	lda     (sp),y
	clc
	adc     #$01
	sta     _leftSide
;
; rightSide = originX + 15;
;
	lda     (sp),y
	clc
	adc     #$0F
	sta     _rightSide
;
; topSide = originY + 1;
;
	dey
	lda     (sp),y
	clc
	adc     #$01
	sta     _topSide
;
; bottomSide = originY + 17;
;
	lda     (sp),y
	clc
	adc     #$11
	sta     _bottomSide
;
; if ( ( (direction & PAD_UP) != 0) ) {
;
	dey
	lda     (sp),y
	and     #$10
	beq     L08CA
;
; testCorner = getCollisionIndex(rightSide, topSide);
;
	lda     _rightSide
	jsr     pusha
	lda     _topSide
	jsr     _getCollisionIndex
	sta     _testCorner
	stx     _testCorner+1
;
; if ( collisionMap[testCorner] == 0 ) {
;
	lda     #<(_collisionMap)
	sta     ptr1
	lda     #>(_collisionMap)
	clc
	adc     _testCorner+1
	sta     ptr1+1
	ldy     _testCorner
	lda     (ptr1),y
	bne     L067B
;
; testCorner = getCollisionIndex(leftSide, topSide);
;
	lda     _leftSide
	jsr     pusha
	lda     _topSide
;
; } else if ( (direction & PAD_DOWN) != 0 ) {
;
	jmp     L08CC
L08CA:	lda     (sp),y
	and     #$20
	beq     L067B
;
; testCorner = getCollisionIndex(rightSide, bottomSide);
;
	lda     _rightSide
	jsr     pusha
	lda     _bottomSide
	jsr     _getCollisionIndex
	sta     _testCorner
	stx     _testCorner+1
;
; if ( collisionMap[testCorner] == 0 ) {
;
	lda     #<(_collisionMap)
	sta     ptr1
	lda     #>(_collisionMap)
	clc
	adc     _testCorner+1
	sta     ptr1+1
	ldy     _testCorner
	lda     (ptr1),y
	bne     L067B
;
; testCorner = getCollisionIndex(leftSide, bottomSide);
;
	lda     _leftSide
	jsr     pusha
	lda     _bottomSide
L08CC:	jsr     _getCollisionIndex
	sta     _testCorner
	stx     _testCorner+1
;
; return collisionMap[testCorner];
;
L067B:	lda     #<(_collisionMap)
	sta     ptr1
	lda     #>(_collisionMap)
	clc
	adc     _testCorner+1
	sta     ptr1+1
	ldy     _testCorner
	ldx     #$00
	lda     (ptr1),y
;
; }
;
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ __fastcall__ collideCheckHorizontal (unsigned char, unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_collideCheckHorizontal: near

.segment	"CODE"

;
; u8 __fastcall__ collideCheckHorizontal(u8 originX, u8 originY, u8 direction) {
;
	jsr     pusha
;
; leftSide = originX + 1;
;
	ldy     #$02
	lda     (sp),y
	clc
	adc     #$01
	sta     _leftSide
;
; rightSide = originX + 15;
;
	lda     (sp),y
	clc
	adc     #$0F
	sta     _rightSide
;
; topSide = originY + 1;
;
	dey
	lda     (sp),y
	clc
	adc     #$01
	sta     _topSide
;
; bottomSide = originY + 16;
;
	lda     (sp),y
	clc
	adc     #$10
	sta     _bottomSide
;
; if ( ( (direction & PAD_LEFT) != 0 ) ) {
;
	dey
	lda     (sp),y
	and     #$40
	beq     L08CF
;
; testCorner = getCollisionIndex(leftSide, topSide);
;
	lda     _leftSide
	jsr     pusha
	lda     _topSide
	jsr     _getCollisionIndex
	sta     _testCorner
	stx     _testCorner+1
;
; if ( collisionMap[testCorner] == 0 ) {
;
	lda     #<(_collisionMap)
	sta     ptr1
	lda     #>(_collisionMap)
	clc
	adc     _testCorner+1
	sta     ptr1+1
	ldy     _testCorner
	lda     (ptr1),y
	bne     L06AA
;
; testCorner = getCollisionIndex(leftSide, bottomSide);
;
	lda     _leftSide
;
; } else if ( (direction & PAD_RIGHT) != 0 ) {
;
	jmp     L08D3
L08CF:	lda     (sp),y
	and     #$80
	beq     L06AA
;
; testCorner = getCollisionIndex(rightSide, topSide);
;
	lda     _rightSide
	jsr     pusha
	lda     _topSide
	jsr     _getCollisionIndex
	sta     _testCorner
	stx     _testCorner+1
;
; if ( collisionMap[testCorner] == 0 ) {
;
	lda     #<(_collisionMap)
	sta     ptr1
	lda     #>(_collisionMap)
	clc
	adc     _testCorner+1
	sta     ptr1+1
	ldy     _testCorner
	lda     (ptr1),y
	bne     L06AA
;
; testCorner = getCollisionIndex(rightSide, bottomSide);
;
	lda     _rightSide
L08D3:	jsr     pusha
	lda     _bottomSide
	jsr     _getCollisionIndex
	sta     _testCorner
	stx     _testCorner+1
;
; return collisionMap[testCorner];
;
L06AA:	lda     #<(_collisionMap)
	sta     ptr1
	lda     #>(_collisionMap)
	clc
	adc     _testCorner+1
	sta     ptr1+1
	ldy     _testCorner
	ldx     #$00
	lda     (ptr1),y
;
; }
;
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ __fastcall__ bgVertCollideCheck (__near__ unsigned char *, __near__ unsigned char *, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bgVertCollideCheck: near

.segment	"CODE"

;
; u8 __fastcall__ bgVertCollideCheck(u8 *x, u8 *y, u8 dir) {
;
	jsr     pusha
;
; u8 colliding = collideCheckVertical(*x, *y, dir);
;
	jsr     decsp2
	ldy     #$06
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	iny
	sta     (sp),y
	ldy     #$04
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	sta     (sp),y
	ldy     #$02
	lda     (sp),y
	jsr     _collideCheckVertical
	jsr     pusha
;
; if ( colliding == 1 ) {
;
	ldx     #$00
	lda     (sp,x)
	cmp     #$01
	bne     L08D6
;
; if ( dir & PAD_UP ) {
;
	tay
	lda     (sp),y
	and     #$10
	beq     L06C3
;
; *y = (*y & 0xf8) + 7;
;
	ldy     #$05
	jsr     pushwysp
	ldy     #$05
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	and     #$F8
	clc
	adc     #$07
;
; } else {
;
	jmp     L08D4
;
; *y = (*y & 0xf8) - 1;
;
L06C3:	ldy     #$05
	jsr     pushwysp
	ldy     #$05
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	and     #$F8
	sec
	sbc     #$01
L08D4:	jsr     staspidx
;
; return colliding;
;
	ldx     #$00
L08D6:	lda     (sp,x)
;
; }
;
	jmp     incsp6

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ bgHorizCollideCheck (__near__ unsigned char *, __near__ unsigned char *, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bgHorizCollideCheck: near

.segment	"CODE"

;
; void __fastcall__ bgHorizCollideCheck(u8 *x, u8 *y, u8 dir) {
;
	jsr     pusha
;
; u8 colliding = collideCheckHorizontal(*x, *y, dir);
;
	jsr     decsp2
	ldy     #$06
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	iny
	sta     (sp),y
	ldy     #$04
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	sta     (sp),y
	ldy     #$02
	lda     (sp),y
	jsr     _collideCheckHorizontal
	jsr     pusha
;
; if ( colliding == 1 ) {
;
	ldy     #$00
	lda     (sp),y
	cmp     #$01
	bne     L06DD
;
; if ( dir & PAD_LEFT ) {
;
	iny
	lda     (sp),y
	and     #$40
	beq     L08D9
;
; *x = (*x & 0xf8) + 8;
;
	ldy     #$07
	jsr     pushwysp
	ldy     #$07
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	and     #$F8
	clc
	adc     #$08
;
; } else if ( dir & PAD_RIGHT ) {
;
	jmp     L08D7
L08D9:	lda     (sp),y
	and     #$80
	beq     L06DD
;
; *x = (*x & 0xf8);
;
	ldy     #$07
	jsr     pushwysp
	ldy     #$07
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	and     #$F8
L08D7:	jsr     staspidx
;
; }
;
L06DD:	jmp     incsp6

.endproc

; ---------------------------------------------------------------
; void __near__ playerEnemyCollideCheck (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_playerEnemyCollideCheck: near

.segment	"BSS"

L06E3:
	.res	1,$00
L06E4:
	.res	1,$00
L06E5:
	.res	1,$00
L06E6:
	.res	1,$00
L06E7:
	.res	1,$00

.segment	"CODE"

;
; playerEnemyColliding = 0;
;
	lda     #$00
	sta     _playerEnemyColliding
;
; for ( j = 0; j < numEnemies; ++j ) {
;
	sta     L06E7
	tax
L08DA:	lda     L06E7
	cmp     _numEnemies
	bcc     L08DC
;
; }
;
	rts
;
; enemyTop = enemyData[j].y + 2;
;
L08DC:	jsr     aslax2
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	clc
	adc     #$02
	sta     L06E3
;
; enemyBottom = enemyData[j].y + 14;
;
	ldx     #$00
	lda     L06E7
	jsr     aslax2
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	lda     (ptr1),y
	clc
	adc     #$0E
	sta     L06E4
;
; enemyLeft = enemyData[j].x + 2;
;
	ldx     #$00
	lda     L06E7
	jsr     aslax2
	sta     ptr1
	txa
	clc
	adc     #>(_enemyData)
	sta     ptr1+1
	ldy     #<(_enemyData)
	lda     (ptr1),y
	clc
	adc     #$02
	sta     L06E5
;
; enemyRight = enemyData[j].x + 14;
;
	ldx     #$00
	lda     L06E7
	jsr     aslax2
	sta     ptr1
	txa
	clc
	adc     #>(_enemyData)
	sta     ptr1+1
	ldy     #<(_enemyData)
	lda     (ptr1),y
	clc
	adc     #$0E
	sta     L06E6
;
; if ( !( rightSide < enemyLeft  || 
;
	lda     _rightSide
	cmp     L06E5
	bcc     L08DB
;
; leftSide >= enemyRight || 
;
	lda     _leftSide
	cmp     L06E6
	bcs     L08DB
;
; bottomSide <  enemyTop || 
;
	lda     _bottomSide
	cmp     L06E3
	bcc     L08DB
;
; topSide    >= enemyBottom ) ) {
;
	lda     _topSide
	cmp     L06E4
	bcs     L08DB
	lda     #$00
	jmp     L0705
L08DB:	lda     #$01
L0705:	jsr     bnega
	beq     L06EC
;
; playerEnemyColliding = 1;
;
	lda     #$01
	sta     _playerEnemyColliding
;
; for ( j = 0; j < numEnemies; ++j ) {
;
L06EC:	ldx     #$00
	inc     L06E7
	jmp     L08DA

.endproc

; ---------------------------------------------------------------
; void __near__ potionEnemyCollideCheck (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_potionEnemyCollideCheck: near

.segment	"CODE"

;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ setupMap (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_setupMap: near

.segment	"RODATA"

L070E:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$40

.segment	"CODE"

;
; u8 enemyIndex = 0;
;
	jsr     decsp2
	lda     #$00
	jsr     pusha
;
; u8 mapX = 0;
;
	jsr     pusha
;
; u8 mapY = 0;
;
	jsr     pusha
;
; u16 index = 0;
;
	jsr     push0
;
; enemy newEnemy = { 0, 0, 0, PAD_LEFT };
;
	jsr     decsp4
	ldy     #$03
L0713:	lda     L070E,y
	sta     (sp),y
	dey
	bpl     L0713
;
; for ( index; index <= COLLISION_MAP_SIZE; ++index ) {
;
L0714:	ldy     #$05
	lda     (sp),y
	cmp     #$03
	bne     L071A
	dey
	lda     (sp),y
	cmp     #$C1
L071A:	jcs     L0715
;
; collByte = collisionMap[index];
;
	lda     #<(_collisionMap)
	ldy     #$04
	clc
	adc     (sp),y
	sta     ptr1
	lda     #>(_collisionMap)
	iny
	adc     (sp),y
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	ldy     #$0A
	sta     (sp),y
;
; if ( collByte == TILE_PLAYERSTART ) {
;
	cmp     #$03
	bne     L08E0
;
; playerX = mapX << 3;
;
	ldy     #$07
	lda     (sp),y
	asl     a
	asl     a
	asl     a
	sta     _playerX
;
; playerY = (mapY << 3) - 1;
;
	dey
	lda     (sp),y
	asl     a
	asl     a
	asl     a
	sec
	sbc     #$01
	sta     _playerY
;
; if ( ( collByte == TILE_ENEMY1START_RIGHT ) || ( collByte == TILE_ENEMY1START_LEFT ) ) {
;
	ldy     #$0A
L08E0:	lda     (sp),y
	cmp     #$05
	beq     L08E1
	cmp     #$04
	jne     L0727
;
; enemyData[enemyIndex] = newEnemy;
;
L08E1:	ldy     #$08
	ldx     #$00
	lda     (sp),y
	jsr     aslax2
	clc
	adc     #<(_enemyData)
	tay
	txa
	adc     #>(_enemyData)
	tax
	tya
	jsr     pushax
	ldy     #$05
	jsr     ldeaxysp
	ldy     #$00
	jsr     steaxspidx
;
; enemyData[enemyIndex].x = mapX << 3;
;
	ldy     #$08
	ldx     #$00
	lda     (sp),y
	jsr     aslax2
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	dey
	lda     (sp),y
	asl     a
	asl     a
	asl     a
	ldy     #$00
	sta     (ptr1),y
;
; enemyData[enemyIndex].y = (mapY << 3) - 1;
;
	ldy     #$08
	ldx     #$00
	lda     (sp),y
	jsr     aslax2
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	ldy     #$06
	lda     (sp),y
	asl     a
	asl     a
	asl     a
	sec
	sbc     #$01
	ldy     #$01
	sta     (ptr1),y
;
; enemyData[enemyIndex].direction = ( collByte == TILE_ENEMY1START_RIGHT ) ? PAD_RIGHT : PAD_LEFT;
;
	ldy     #$08
	ldx     #$00
	lda     (sp),y
	jsr     aslax2
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	ldy     #$0A
	lda     (sp),y
	cmp     #$05
	bne     L08E2
	lda     #$80
	jmp     L08E3
L08E2:	lda     #$40
L08E3:	ldy     #$03
	sta     (ptr1),y
;
; for ( k = 0; k < ENEMY_DATA_SIZE; ++k ) {
;
	lda     #$00
	ldy     #$09
L08DE:	sta     (sp),y
	cmp     #$11
	bcs     L0740
;
; enemySpriteData[enemyIndex][k] = enemySpriteDataTemplate[k];
;
	dey
	lda     (sp),y
	jsr     pusha0
	lda     #$11
	jsr     tosmula0
	clc
	adc     #<(_enemySpriteData)
	sta     ptr1
	txa
	adc     #>(_enemySpriteData)
	sta     ptr1+1
	ldy     #$09
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L08DD
	inx
L08DD:	jsr     pushax
	ldy     #$0B
	lda     (sp),y
	tay
	lda     _enemySpriteDataTemplate,y
	ldy     #$00
	jsr     staspidx
;
; for ( k = 0; k < ENEMY_DATA_SIZE; ++k ) {
;
	ldy     #$09
	clc
	lda     #$01
	adc     (sp),y
	jmp     L08DE
;
; setSpriteFrame(enemySpriteData[enemyIndex], enemyFrames[0]);
;
L0740:	dey
	lda     (sp),y
	jsr     pusha0
	lda     #$11
	jsr     tosmula0
	clc
	adc     #<(_enemySpriteData)
	tay
	txa
	adc     #>(_enemySpriteData)
	tax
	tya
	jsr     pushax
	lda     #<(_enemyFrames)
	ldx     #>(_enemyFrames)
	jsr     _setSpriteFrame
;
; ++enemyIndex;
;
	ldy     #$08
	clc
	lda     #$01
	adc     (sp),y
	sta     (sp),y
;
; ++mapX;
;
L0727:	ldy     #$07
	clc
	lda     #$01
	adc     (sp),y
	sta     (sp),y
;
; if ( mapX >= 32 ) {
;
	cmp     #$20
	bcc     L0716
;
; mapX = 0;
;
	lda     #$00
	sta     (sp),y
;
; ++mapY;
;
	dey
	clc
	lda     #$01
	adc     (sp),y
	sta     (sp),y
;
; for ( index; index <= COLLISION_MAP_SIZE; ++index ) {
;
L0716:	ldy     #$04
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	jmp     L0714
;
; numEnemies = enemyIndex;
;
L0715:	ldy     #$08
	lda     (sp),y
	sta     _numEnemies
;
; }
;
	ldy     #$0B
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ updateEnemies (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updateEnemies: near

.segment	"BSS"

L075C:
	.res	1,$00
L075D:
	.res	1,$00
L075E:
	.res	1,$00

.segment	"CODE"

;
; for ( i = 0; i < numEnemies; i++ ) {
;
	lda     #$00
	sta     L075C
	tax
L08E5:	lda     L075C
	cmp     _numEnemies
	bcc     L08EF
;
; }
;
	rts
;
; vertCollide = collideCheckVertical(enemyData[i].x, enemyData[i].y + 1, PAD_DOWN);
;
L08EF:	jsr     decsp2
	lda     L075C
	jsr     aslax2
	sta     ptr1
	txa
	clc
	adc     #>(_enemyData)
	sta     ptr1+1
	ldy     #<(_enemyData)
	lda     (ptr1),y
	ldy     #$01
	sta     (sp),y
	ldx     #$00
	lda     L075C
	jsr     aslax2
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	lda     (ptr1),y
	clc
	adc     #$01
	dey
	sta     (sp),y
	lda     #$20
	jsr     _collideCheckVertical
	sta     L075D
;
; if ( vertCollide != TILE_ALLCOLLIDE ) {
;
	ldx     #$00
	lda     L075D
	cmp     #$01
	beq     L08E6
;
; enemyData[i].y += 1;
;
	lda     L075C
	jsr     aslax2
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	clc
	adc     #$01
;
; } else {
;
	jmp     L08E4
;
; if ( enemyData[i].direction == PAD_RIGHT ) {
;
L08E6:	lda     L075C
	jsr     aslax2
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	ldy     #$03
	ldx     #$00
	lda     (ptr1),y
	cmp     #$80
	jne     L08EA
;
; enemyData[i].x += 1;
;
	lda     L075C
	jsr     aslax2
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	clc
	adc     #$01
	sta     (ptr1),y
;
; horizCollide = collideCheckHorizontal(enemyData[i].x, enemyData[i].y, PAD_RIGHT);
;
	jsr     decsp2
	ldx     #$00
	lda     L075C
	jsr     aslax2
	sta     ptr1
	txa
	clc
	adc     #>(_enemyData)
	sta     ptr1+1
	ldy     #<(_enemyData)
	lda     (ptr1),y
	ldy     #$01
	sta     (sp),y
	ldx     #$00
	lda     L075C
	jsr     aslax2
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	lda     (ptr1),y
	dey
	sta     (sp),y
	lda     #$80
	jsr     _collideCheckHorizontal
	sta     L075E
;
; if ( ( horizCollide == TILE_ALLCOLLIDE ) || ( horizCollide == TILE_ENEMYCOLLIDE ) ) {
;
	ldx     #$00
	lda     L075E
	cmp     #$01
	beq     L08E9
	cmp     #$02
	jne     L08EE
;
; flipSprite(enemySpriteData[i], 0);
;
L08E9:	lda     L075C
	jsr     pusha0
	lda     #$11
	jsr     tosmula0
	clc
	adc     #<(_enemySpriteData)
	tay
	txa
	adc     #>(_enemySpriteData)
	tax
	tya
	jsr     pushax
	lda     #$00
	jsr     _flipSprite
;
; enemyData[i].direction = PAD_LEFT;
;
	ldx     #$00
	lda     L075C
	jsr     aslax2
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	ldx     #$00
	lda     #$40
	ldy     #$03
	sta     (ptr1),y
;
; } else {
;
	jmp     L08EE
;
; enemyData[i].x -= 1;
;
L08EA:	lda     L075C
	jsr     aslax2
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; horizCollide = collideCheckHorizontal(enemyData[i].x, enemyData[i].y, PAD_LEFT);
;
	jsr     decsp2
	ldx     #$00
	lda     L075C
	jsr     aslax2
	sta     ptr1
	txa
	clc
	adc     #>(_enemyData)
	sta     ptr1+1
	ldy     #<(_enemyData)
	lda     (ptr1),y
	ldy     #$01
	sta     (sp),y
	ldx     #$00
	lda     L075C
	jsr     aslax2
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	lda     (ptr1),y
	dey
	sta     (sp),y
	lda     #$40
	jsr     _collideCheckHorizontal
	sta     L075E
;
; if ( ( horizCollide == TILE_ALLCOLLIDE ) || ( horizCollide == TILE_ENEMYCOLLIDE ) ) {
;
	ldx     #$00
	lda     L075E
	cmp     #$01
	beq     L08ED
	cmp     #$02
	bne     L08EE
;
; flipSprite(enemySpriteData[i], 1);
;
L08ED:	lda     L075C
	jsr     pusha0
	lda     #$11
	jsr     tosmula0
	clc
	adc     #<(_enemySpriteData)
	tay
	txa
	adc     #>(_enemySpriteData)
	tax
	tya
	jsr     pushax
	lda     #$01
	jsr     _flipSprite
;
; enemyData[i].direction = PAD_RIGHT;
;
	ldx     #$00
	lda     L075C
	jsr     aslax2
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	lda     #$80
	ldy     #$03
L08E4:	sta     (ptr1),y
;
; for ( i = 0; i < numEnemies; i++ ) {
;
	ldx     #$00
L08EE:	lda     L075C
	clc
	adc     #$01
	sta     L075C
	jmp     L08E5

.endproc

; ---------------------------------------------------------------
; void __near__ updatePlayerVerticalMovement (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updatePlayerVerticalMovement: near

.segment	"CODE"

;
; if ( ( pad & PAD_A ) && ( playerY > 8 ) && ( !playerJumping ) ) {
;
	lda     _pad
	and     #$01
	beq     L08F3
	lda     _playerY
	cmp     #$09
	bcc     L08F3
	lda     _playerJumping
	bne     L08F3
;
; playerVertVel = PLAYER_INIT_JUMP_VEL;
;
	lda     #$04
	sta     _playerVertVel
;
; playerJumping = 1;
;
	lda     #$01
	sta     _playerJumping
;
; playerJumpCounter = 0;
;
	lda     #$00
	sta     _playerJumpCounter
;
; if ( !( pad & PAD_A ) && playerJumping && ( playerVertVel > 0 ) ) {
;
L08F3:	lda     _pad
	and     #$01
	bne     L08F7
	lda     _playerJumping
	beq     L08F7
	lda     _playerVertVel
	sec
	sbc     #$01
	bvs     L07B9
	eor     #$80
L07B9:	bpl     L08F7
;
; playerVertVel = 0;
;
	lda     #$00
	sta     _playerVertVel
;
; if ( playerVertVel > 0 ) {
;
L08F7:	lda     _playerVertVel
	sec
	sbc     #$01
	bvs     L07C0
	eor     #$80
L07C0:	bpl     L07BD
;
; playerY -= playerVertVel;
;
	lda     _playerVertVel
	eor     #$FF
	sec
	adc     _playerY
	sta     _playerY
;
; if ( collideCheckVertical(playerX, playerY, PAD_UP) == TILE_ALLCOLLIDE ) { 
;
	jsr     decsp2
	lda     _playerX
	ldy     #$01
	sta     (sp),y
	lda     _playerY
	dey
	sta     (sp),y
	lda     #$10
	jsr     _collideCheckVertical
	cmp     #$01
	bne     L08FC
;
; playerY = (playerY & 0xF8) + 8;
;
	lda     _playerY
	and     #$F8
	clc
	adc     #$08
	sta     _playerY
;
; } else {
;
	jmp     L08FC
;
; if ( collideCheckVertical(playerX, playerY + 2, PAD_DOWN) != TILE_ALLCOLLIDE ) { 
;
L07BD:	jsr     decsp2
	lda     _playerX
	ldy     #$01
	sta     (sp),y
	lda     _playerY
	clc
	adc     #$02
	dey
	sta     (sp),y
	lda     #$20
	jsr     _collideCheckVertical
	cmp     #$01
	beq     L07CE
;
; playerY -= playerVertVel;
;
	lda     _playerVertVel
	eor     #$FF
	sec
	adc     _playerY
	sta     _playerY
;
; } else {
;
	jmp     L08FC
;
; playerY = (playerY & 0xF8) + 7;
;
L07CE:	lda     _playerY
	and     #$F8
	clc
	adc     #$07
	sta     _playerY
;
; playerJumping = 0;
;
	lda     #$00
	sta     _playerJumping
;
; if ( ( playerJumpCounter == 4 ) && ( playerVertVel > -3 ) ) {
;
L08FC:	lda     _playerJumpCounter
	cmp     #$04
	bne     L0900
	lda     _playerVertVel
	sec
	sbc     #$FE
	bvs     L07E4
	eor     #$80
L07E4:	bpl     L0900
;
; playerVertVel -= 1; 
;
	dec     _playerVertVel
;
; playerJumpCounter = 0;
;
	lda     #$00
	sta     _playerJumpCounter
;
; ++playerJumpCounter;
;
L0900:	inc     _playerJumpCounter
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ playerMoveHorizontal (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_playerMoveHorizontal: near

.segment	"CODE"

;
; if ( pad & PAD_LEFT ) {
;
	lda     _pad
	and     #$40
	beq     L0902
;
; playerDir = PAD_LEFT;
;
	lda     #$40
;
; } else if ( pad & PAD_RIGHT ) {
;
	jmp     L0901
L0902:	lda     _pad
	and     #$80
	beq     L0903
;
; playerDir = PAD_RIGHT;
;
	lda     #$80
L0901:	sta     _playerDir
;
; if ( ( pad & PAD_LEFT ) && playerX > 0 ) {
;
L0903:	lda     _pad
	and     #$40
	beq     L0907
	lda     _playerX
	beq     L0907
;
; playerX -= 1;
;
	dec     _playerX
;
; if ( ( pad & PAD_RIGHT ) && playerX < 240 ) {
;
L0907:	lda     _pad
	and     #$80
	beq     L07FD
	lda     _playerX
	cmp     #$F0
	bcs     L07FD
;
; playerX += 1;
;
	inc     _playerX
;
; bgHorizCollideCheck(&playerX, &playerY, pad);
;
L07FD:	jsr     decsp4
	lda     #<(_playerX)
	ldy     #$02
	sta     (sp),y
	iny
	lda     #>(_playerX)
	sta     (sp),y
	lda     #<(_playerY)
	ldy     #$00
	sta     (sp),y
	iny
	lda     #>(_playerY)
	sta     (sp),y
	lda     _pad
	jmp     _bgHorizCollideCheck

.endproc

; ---------------------------------------------------------------
; void __near__ updatePlayerAttack (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updatePlayerAttack: near

.segment	"CODE"

;
; if ( pad & PAD_B ) {
;
	lda     _pad
	and     #$02
	beq     L080B
;
; if ( !potionIsActive ) {
;
	lda     _potionIsActive
	bne     L080B
;
; potionIsActive = 1;
;
	lda     #$01
	sta     _potionIsActive
;
; potionMoveCounter = 0;
;
	lda     #$00
	sta     _potionMoveCounter
;
; potionY = playerY + 6;
;
	lda     _playerY
	clc
	adc     #$06
	sta     _potionY
;
; if ( playerDir == PAD_RIGHT ) {
;
	lda     _playerDir
	cmp     #$80
	bne     L090C
;
; potionX = playerX + 12;
;
	lda     _playerX
	clc
	adc     #$0C
;
; } else {
;
	jmp     L090B
;
; potionX = playerX - 4;
;
L090C:	lda     _playerX
	sec
	sbc     #$04
L090B:	sta     _potionX
;
; potionDirection = playerDir;
;
	lda     _playerDir
	sta     _potionDirection
;
; potionVerticalVel = POTION_INIT_VERTICAL_VEL;
;
	lda     #$02
	sta     _potionVerticalVel
;
; }
;
L080B:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ updatePotionMovement (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updatePotionMovement: near

.segment	"CODE"

;
; u8 potionCollided = 0;
;
	lda     #$00
	jsr     pusha
;
; if ( potionIsActive ) {
;
	lda     _potionIsActive
	bne     L0920
;
; }
;
	jmp     incsp1
;
; if ( potionDirection == PAD_LEFT ) {
;
L0920:	lda     _potionDirection
	cmp     #$40
	bne     L090F
;
; potionX -= POTION_HORIZ_VELOCITY;
;
	lda     _potionX
	sec
	sbc     #$02
;
; } else {
;
	jmp     L090D
;
; potionX += POTION_HORIZ_VELOCITY;
;
L090F:	lda     #$02
	clc
	adc     _potionX
L090D:	sta     _potionX
;
; if ( ( potionX <= 8 ) || ( potionX >= 248 ) ) {
;
	cmp     #$09
	bcc     L0910
	lda     _potionX
	cmp     #$F8
	bcc     L0911
;
; potionCollided = 1;
;
L0910:	lda     #$01
	ldy     #$00
	sta     (sp),y
;
; if ( potionVerticalVel > 0 ) {
;
L0911:	lda     _potionVerticalVel
	sec
	sbc     #$01
	bvs     L0836
	eor     #$80
L0836:	bpl     L0833
;
; if ( smallCollideCheckVertical(potionX, potionY, PAD_UP) == TILE_ALLCOLLIDE ) { 
;
	jsr     decsp2
	lda     _potionX
	ldy     #$01
	sta     (sp),y
	lda     _potionY
	dey
	sta     (sp),y
	lda     #$10
	jsr     _smallCollideCheckVertical
	cmp     #$01
	bne     L0843
;
; potionCollided = 1;    
;
	ldy     #$00
	sta     (sp),y
;
; } else {
;
	jmp     L0916
;
; if ( smallCollideCheckVertical(potionX, potionY, PAD_DOWN) == TILE_ALLCOLLIDE ) { 
;
L0833:	jsr     decsp2
	lda     _potionX
	ldy     #$01
	sta     (sp),y
	lda     _potionY
	dey
	sta     (sp),y
	lda     #$20
	jsr     _smallCollideCheckVertical
	cmp     #$01
	bne     L0843
;
; potionCollided = 1;    
;
	ldy     #$00
	sta     (sp),y
;
; } else {
;
	jmp     L0916
;
; potionY -= potionVerticalVel;
;
L0843:	lda     _potionVerticalVel
	eor     #$FF
	sec
	adc     _potionY
	sta     _potionY
;
; if ( potionY >= 240 ) {
;
L0916:	lda     _potionY
	cmp     #$F0
	bcc     L0917
;
; potionCollided = 1;
;
	lda     #$01
	ldy     #$00
	sta     (sp),y
;
; if ( ( potionVerticalVel >= -1 ) && ( potionMoveCounter == 3 ) ) {
;
L0917:	lda     _potionVerticalVel
	sec
	sbc     #$FF
	bvs     L0856
	eor     #$80
L0856:	bpl     L091C
	lda     _potionMoveCounter
	cmp     #$03
	bne     L091C
;
; potionVerticalVel -= 1; 
;
	dec     _potionVerticalVel
;
; potionMoveCounter = 0;
;
	lda     #$00
	sta     _potionMoveCounter
;
; ++potionMoveCounter;
;
L091C:	inc     _potionMoveCounter
;
; if ( potionCollided ) {
;
	ldy     #$00
	lda     (sp),y
	beq     L0860
;
; potionIsActive = 0;
;
	sty     _potionIsActive
;
; potionX = -8;
;
	lda     #$F8
	sta     _potionX
;
; potionY = -8;
;
	sta     _potionY
;
; }
;
L0860:	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; memcpy(palSprites, paldat, 16);
;
	ldy     #$0F
L086D:	lda     _paldat,y
	sta     _palSprites,y
	dey
	bpl     L086D
;
; memcpy(palBG, paldat, 4);
;
	ldy     #$03
L0872:	lda     _paldat,y
	sta     _palBG,y
	dey
	bpl     L0872
;
; pal_spr(palSprites);
;
	lda     #<(_palSprites)
	ldx     #>(_palSprites)
	jsr     _pal_spr
;
; pal_bg(palBG);
;
	lda     #<(_palBG)
	ldx     #>(_palBG)
	jsr     _pal_bg
;
; vram_adr(NAMETABLE_A); //unpack nametable into VRAM
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(map1); 
;
	lda     #<(_map1)
	ldx     #>(_map1)
	jsr     _vram_unrle
;
; ppu_on_all(); //enable rendering
;
	jsr     _ppu_on_all
;
; playerX = 0;
;
	lda     #$00
	sta     _playerX
;
; playerY = 0;
;
	sta     _playerY
;
; playerDir = PAD_LEFT;
;
	lda     #$40
	sta     _playerDir
;
; touch = 0; // collision flag
;
	lda     #$00
	sta     _touch
;
; frameCount = 0; // frame counter
;
	sta     _frameCount
;
; playerFrame = 0;
;
	sta     _playerFrame
;
; setSpriteFrame(playerSpriteData, playerFrames[playerFrame]);
;
	lda     #<(_playerSpriteData)
	ldx     #>(_playerSpriteData)
	jsr     pushax
	ldx     #$00
	lda     _playerFrame
	jsr     aslax2
	clc
	adc     #<(_playerFrames)
	tay
	txa
	adc     #>(_playerFrames)
	tax
	tya
	jsr     _setSpriteFrame
;
; setupMap();
;
	jsr     _setupMap
;
; ppu_wait_frame(); // wait for next TV frame
;
L088D:	jsr     _ppu_wait_frame
;
; oamSpriteIndex = 0;
;
	lda     #$00
	sta     _oamSpriteIndex
;
; i = 0;
;
	sta     _i
;
; sprPriorityToggle = frameCount & 0xFE;
;
	lda     _frameCount
	and     #$FE
	sta     _sprPriorityToggle
;
; pad = pad_poll(i);
;
	lda     _i
	jsr     _pad_poll
	sta     _pad
;
; updatePlayerSprite();
;
	jsr     _updatePlayerSprite
;
; updateEnemySprites();
;
	jsr     _updateEnemySprites
;
; updatePotionSprite();
;
	jsr     _updatePotionSprite
;
; spriteCount();
;
	jsr     _spriteCount
;
; updateEnemies();
;
	jsr     _updateEnemies
;
; playerMoveHorizontal();
;
	jsr     _playerMoveHorizontal
;
; updatePlayerVerticalMovement();
;
	jsr     _updatePlayerVerticalMovement
;
; updatePlayerAttack();
;
	jsr     _updatePlayerAttack
;
; updatePotionMovement();
;
	jsr     _updatePotionMovement
;
; four_Sides(playerX, playerY); 
;
	lda     _playerX
	jsr     pusha
	lda     _playerY
	jsr     _four_Sides
;
; playerEnemyCollideCheck();
;
	jsr     _playerEnemyCollideCheck
;
; potionEnemyCollideCheck();
;
	jsr     _potionEnemyCollideCheck
;
; if ( playerEnemyColliding ) {
;
	lda     _playerEnemyColliding
	beq     L08A9
;
; setSpritePalette(playerSpriteData, 0x0);
;
	lda     #<(_playerSpriteData)
	ldx     #>(_playerSpriteData)
	jsr     pushax
	lda     #$00
;
; } else {
;
	jmp     L0921
;
; setSpritePalette(playerSpriteData, 0x3);
;
L08A9:	lda     #<(_playerSpriteData)
	ldx     #>(_playerSpriteData)
	jsr     pushax
	lda     #$03
L0921:	jsr     _setSpritePalette
;
; ++frameCount;
;
	inc     _frameCount
;
; while ( 1 )
;
	jmp     L088D

.endproc

