;
; File generated by cc65 v 2.16 - Git N/A
;
	.fopt		compiler,"cc65 v 2.16 - Git N/A"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_memcpy
	.import		_pal_bg
	.import		_pal_spr
	.import		_ppu_wait_frame
	.import		_ppu_on_all
	.import		_oam_meta_spr
	.import		_oam_hide_rest
	.import		_pad_poll
	.import		_vram_adr
	.import		_vram_unrle
	.export		_map1
	.export		_map1_coll
	.export		_oam_off
	.import		_paldat
	.export		_playerFrames
	.export		_playerSpriteData
	.export		_potionSpriteData
	.export		_mushroomSpriteDataTemplate
	.export		_enemyData
	.export		_enemyFrames
	.export		_enemySpriteDataTemplate
	.export		_killPotion
	.export		_setupMap
	.export		_setSpriteFrame
	.export		_setSpritePalette
	.export		_setSpritePriority
	.export		_flipSprite
	.export		_spriteCount
	.export		_updateEnemySprites
	.export		_updatePlayerSprite
	.export		_updatePotionSprite
	.export		_four_Sides
	.export		_four_SidesSmall
	.export		_getCollisionIndex
	.export		_smallCollideCheckVertical
	.export		_collideCheckVertical
	.export		_checkPlayerLadderCollision
	.export		_collideCheckHorizontal
	.export		_bgVertCollideCheck
	.export		_bgHorizCollideCheck
	.export		_enemyCollideCheck
	.export		_potionEnemyCollideCheck
	.export		_updateEnemyMovement
	.export		_playerStartClimbingUp
	.export		_updatePlayerVerticalAcceleration
	.export		_updatePlayerClimbing
	.export		_updatePlayerVerticalMovement
	.export		_playerMoveHorizontal
	.export		_updatePlayerAttack
	.export		_updatePotionMovement
	.export		_simpleUpdatePotionMovement
	.export		_main

.segment	"DATA"

.segment	"ZEROPAGE"
_enemyIndex:
	.byte	$00
_enemyColliding:
	.byte	$00
.segment	"DATA"
_spriteFlickerIndex:
	.byte	$00
_sprPriorityToggle:
	.byte	$00
_playerFrame:
	.byte	$00
_playerJumping:
	.byte	$00
_playerJumpCounter:
	.byte	$00
_playerState:
	.byte	$00
_playerVertVel:
	.byte	$00
_jumpButtonReset:
	.byte	$01
_playerSpriteData:
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$09
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$19
	.byte	$03
	.byte	$80
_potionIsActive:
	.byte	$00
_potionVerticalVel:
	.byte	$00
_potionMoveCounter:
	.byte	$00
_potionSpriteData:
	.byte	$00
	.byte	$00
	.byte	$2A
	.byte	$00
	.byte	$80
_enemySpriteCount:
	.byte	$00
_enemyCollidedIndex:
	.byte	$00

.segment	"RODATA"

_map1:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$3F
	.byte	$41
	.byte	$01
	.byte	$20
	.byte	$00
	.byte	$01
	.byte	$0D
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$0E
	.byte	$41
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$0D
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$0E
	.byte	$41
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$0D
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$0E
	.byte	$41
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$41
	.byte	$01
	.byte	$09
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$41
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$41
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$41
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$41
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$41
	.byte	$01
	.byte	$0D
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$41
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$41
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$13
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$08
	.byte	$41
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$13
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$08
	.byte	$41
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$13
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$08
	.byte	$41
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$13
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$08
	.byte	$41
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$41
	.byte	$01
	.byte	$09
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$41
	.byte	$01
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$41
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$41
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$41
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$41
	.byte	$01
	.byte	$12
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$41
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$41
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$41
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$41
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$41
	.byte	$01
	.byte	$07
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$41
	.byte	$01
	.byte	$02
	.byte	$43
	.byte	$44
	.byte	$41
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$41
	.byte	$01
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$0E
	.byte	$43
	.byte	$44
	.byte	$00
	.byte	$01
	.byte	$0C
	.byte	$41
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$0E
	.byte	$43
	.byte	$44
	.byte	$00
	.byte	$01
	.byte	$0C
	.byte	$41
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$0E
	.byte	$43
	.byte	$44
	.byte	$00
	.byte	$01
	.byte	$0C
	.byte	$41
	.byte	$01
	.byte	$20
	.byte	$00
	.byte	$01
	.byte	$1E
	.byte	$00
	.byte	$01
	.byte	$00
_map1_coll:
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$07
	.byte	$07
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_playerFrames:
	.byte	$08
	.byte	$09
	.byte	$18
	.byte	$19
	.byte	$28
	.byte	$29
	.byte	$38
	.byte	$39
	.byte	$68
	.byte	$69
	.byte	$78
	.byte	$79
_mushroomSpriteDataTemplate:
	.byte	$00
	.byte	$00
	.byte	$2B
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$2C
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$3B
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$3C
	.byte	$02
	.byte	$80
_enemyFrames:
	.byte	$06
	.byte	$07
	.byte	$16
	.byte	$17
	.byte	$26
	.byte	$27
	.byte	$36
	.byte	$37
_enemySpriteDataTemplate:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$00
	.byte	$03
	.byte	$80

.segment	"BSS"

.segment	"ZEROPAGE"
.segment	"BSS"
.segment	"ZEROPAGE"
_oam_off:
	.res	1,$00
.segment	"ZEROPAGE"
_playerX:
	.res	1,$00
.segment	"ZEROPAGE"
_playerY:
	.res	1,$00
.segment	"ZEROPAGE"
_frameCount:
	.res	1,$00
.segment	"ZEROPAGE"
_i:
	.res	1,$00
.segment	"ZEROPAGE"
_collisionIndex:
	.res	2,$00
.segment	"ZEROPAGE"
_leftSide:
	.res	1,$00
.segment	"ZEROPAGE"
_rightSide:
	.res	1,$00
.segment	"ZEROPAGE"
_topSide:
	.res	1,$00
.segment	"ZEROPAGE"
_bottomSide:
	.res	1,$00
.segment	"ZEROPAGE"
_enemyVertCollide:
	.res	1,$00
.segment	"ZEROPAGE"
_potionX:
	.res	1,$00
.segment	"ZEROPAGE"
_potionY:
	.res	1,$00
.segment	"ZEROPAGE"
_potionTossTimer:
	.res	1,$00
.segment	"BSS"
_collisionMap:
	.res	2,$00
.segment	"BSS"
_pad:
	.res	1,$00
.segment	"BSS"
_oamSpriteIndex:
	.res	1,$00
.segment	"BSS"
_touch:
	.res	1,$00
.segment	"BSS"
_palSprites:
	.res	4,$00
.segment	"BSS"
_palBG:
	.res	4,$00
.segment	"BSS"
_horizontalCollideCheck:
	.res	1,$00
.segment	"BSS"
_playerDir:
	.res	1,$00
.segment	"BSS"
_playerEnemyColliding:
	.res	1,$00
.segment	"BSS"
_potionDirection:
	.res	1,$00
.segment	"BSS"
_numEnemies:
	.res	1,$00
.segment	"BSS"
_enemyTop:
	.res	1,$00
.segment	"BSS"
_enemyBottom:
	.res	1,$00
.segment	"BSS"
_enemyLeft:
	.res	1,$00
.segment	"BSS"
_enemyRight:
	.res	1,$00
.segment	"BSS"
_enemyData:
	.res	120,$00
.segment	"BSS"
_enemySpriteData:
	.res	170,$00
.segment	"BSS"
_currentEnemy:
	.res	2,$00

; ---------------------------------------------------------------
; void __near__ killPotion (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_killPotion: near

.segment	"CODE"

;
; potionIsActive = 0;
;
	lda     #$00
	sta     _potionIsActive
;
; potionX = -8;
;
	lda     #$F8
	sta     _potionX
;
; potionY = -8;
;
	sta     _potionY
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ setupMap (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_setupMap: near

.segment	"RODATA"

L0527:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$40
	.res	2,$00

.segment	"CODE"

;
; u8 mapX = 0;
;
	jsr     decsp2
	lda     #$00
	jsr     pusha
;
; u8 mapY = 0;
;
	jsr     pusha
;
; u16 index = 0;
;
	jsr     push0
;
; enemy newEnemy = { 0, 0, 0, PAD_LEFT };
;
	jsr     decsp6
	ldy     #$05
L052C:	lda     L0527,y
	sta     (sp),y
	dey
	bpl     L052C
;
; potionTossTimer = 0;
;
	lda     #$00
	sta     _potionTossTimer
;
; potionX = -8;
;
	lda     #$F8
	sta     _potionX
;
; potionY = -8;
;
	sta     _potionY
;
; collisionMap = (u8 *) map1_coll;
;
	lda     #<(_map1_coll)
	sta     _collisionMap
	lda     #>(_map1_coll)
	sta     _collisionMap+1
;
; enemyIndex = 0;
;
	lda     #$00
	sta     _enemyIndex
;
; for ( index; index <= COLLISION_MAP_SIZE; ++index ) {
;
L0537:	ldy     #$07
	lda     (sp),y
	cmp     #$03
	bne     L053D
	dey
	lda     (sp),y
	cmp     #$C1
L053D:	jcs     L0538
;
; collByte = collisionMap[index];
;
	ldy     #$07
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     _collisionMap
	sta     ptr1
	txa
	adc     _collisionMap+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	ldy     #$0B
	sta     (sp),y
;
; if ( collByte == TILE_PLAYERSTART ) {
;
	cmp     #$03
	bne     L099C
;
; playerX = mapX << 3;
;
	ldy     #$09
	lda     (sp),y
	asl     a
	asl     a
	asl     a
	sta     _playerX
;
; playerY = (mapY << 3) - 1;
;
	dey
	lda     (sp),y
	asl     a
	asl     a
	asl     a
	sec
	sbc     #$01
	sta     _playerY
;
; if ( ( collByte == TILE_ENEMY1START_RIGHT ) || ( collByte == TILE_ENEMY1START_LEFT ) ) {
;
	ldy     #$0B
L099C:	lda     (sp),y
	cmp     #$05
	beq     L099D
	cmp     #$04
	jne     L054A
;
; enemyData[enemyIndex] = newEnemy;
;
L099D:	ldx     #$00
	lda     _enemyIndex
	jsr     mulax6
	clc
	adc     #<(_enemyData)
	tay
	txa
	adc     #>(_enemyData)
	tax
	tya
	jsr     pushax
	lda     sp
	ldx     sp+1
	clc
	adc     #$02
	bcc     L0552
	inx
L0552:	jsr     pushax
	ldx     #$00
	lda     #$06
	jsr     _memcpy
;
; enemyData[enemyIndex].x = mapX << 3;
;
	ldx     #$00
	lda     _enemyIndex
	jsr     mulax6
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	ldy     #$09
	lda     (sp),y
	asl     a
	asl     a
	asl     a
	ldy     #$00
	sta     (ptr1),y
;
; enemyData[enemyIndex].y = (mapY << 3) - 1;
;
	ldx     #$00
	lda     _enemyIndex
	jsr     mulax6
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	ldy     #$08
	lda     (sp),y
	asl     a
	asl     a
	asl     a
	sec
	sbc     #$01
	ldy     #$01
	sta     (ptr1),y
;
; enemyData[enemyIndex].direction = ( collByte == TILE_ENEMY1START_RIGHT ) ? PAD_RIGHT : PAD_LEFT;
;
	ldx     #$00
	lda     _enemyIndex
	jsr     mulax6
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	ldy     #$0B
	lda     (sp),y
	cmp     #$05
	bne     L099E
	lda     #$80
	jmp     L099F
L099E:	lda     #$40
L099F:	ldy     #$03
	sta     (ptr1),y
;
; enemyData[enemyIndex].collidingWithPotion = 0;
;
	ldx     #$00
	lda     _enemyIndex
	jsr     mulax6
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	lda     #$00
	iny
	sta     (ptr1),y
;
; enemyData[enemyIndex].state = ENEMY_STATE_NORMAL;
;
	tax
	lda     _enemyIndex
	jsr     mulax6
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	lda     #$00
	iny
	sta     (ptr1),y
;
; for ( k = 0; k < ENEMY_DATA_SIZE; ++k ) {
;
	ldy     #$0A
L099A:	sta     (sp),y
	lda     (sp),y
	cmp     #$11
	bcs     L09A0
;
; enemySpriteData[enemyIndex][k] = enemySpriteDataTemplate[k];
;
	lda     _enemyIndex
	jsr     pusha0
	lda     #$11
	jsr     tosmula0
	clc
	adc     #<(_enemySpriteData)
	sta     ptr1
	txa
	adc     #>(_enemySpriteData)
	sta     ptr1+1
	ldy     #$0A
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0999
	inx
L0999:	jsr     pushax
	ldy     #$0C
	lda     (sp),y
	tay
	lda     _enemySpriteDataTemplate,y
	ldy     #$00
	jsr     staspidx
;
; for ( k = 0; k < ENEMY_DATA_SIZE; ++k ) {
;
	ldy     #$0A
	clc
	lda     #$01
	adc     (sp),y
	jmp     L099A
;
; setSpriteFrame(enemySpriteData[enemyIndex], enemyFrames[0]);
;
L09A0:	lda     _enemyIndex
	jsr     pusha0
	lda     #$11
	jsr     tosmula0
	clc
	adc     #<(_enemySpriteData)
	tay
	txa
	adc     #>(_enemySpriteData)
	tax
	tya
	jsr     pushax
	lda     #<(_enemyFrames)
	ldx     #>(_enemyFrames)
	jsr     _setSpriteFrame
;
; ++enemyIndex;
;
	inc     _enemyIndex
;
; ++mapX;
;
L054A:	ldy     #$09
	clc
	lda     #$01
	adc     (sp),y
	sta     (sp),y
;
; if ( mapX >= 32 ) {
;
	cmp     #$20
	bcc     L0539
;
; mapX = 0;
;
	lda     #$00
	sta     (sp),y
;
; ++mapY;
;
	dey
	clc
	lda     #$01
	adc     (sp),y
	sta     (sp),y
;
; for ( index; index <= COLLISION_MAP_SIZE; ++index ) {
;
L0539:	ldy     #$06
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	jmp     L0537
;
; numEnemies = enemyIndex;
;
L0538:	lda     _enemyIndex
	sta     _numEnemies
;
; }
;
	ldy     #$0C
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ setSpriteFrame (__near__ unsigned char *, __near__ const unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_setSpriteFrame: near

.segment	"CODE"

;
; void __fastcall__ setSpriteFrame(u8 *sprite, const u8 *frame) {
;
	jsr     pushax
;
; sprite[2] = frame[0];
;
	ldy     #$05
	jsr     pushwysp
	ldy     #$03
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	ldy     #$02
	jsr     staspidx
;
; sprite[6] = frame[1];
;
	ldy     #$05
	jsr     pushwysp
	ldy     #$03
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	dey
	lda     (ptr1),y
	ldy     #$06
	jsr     staspidx
;
; sprite[10] = frame[2];
;
	ldy     #$05
	jsr     pushwysp
	ldy     #$03
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     (ptr1),y
	ldy     #$0A
	jsr     staspidx
;
; sprite[14] = frame[3];
;
	ldy     #$05
	jsr     pushwysp
	ldy     #$03
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	iny
	lda     (ptr1),y
	ldy     #$0E
	jsr     staspidx
;
; }
;
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ setSpritePalette (__near__ unsigned char *, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_setSpritePalette: near

.segment	"CODE"

;
; void __fastcall__ setSpritePalette(u8 *sprite, u8 palette) {
;
	jsr     pusha
;
; for ( i = 3; i <= 15; i = i + 4 ) {
;
	jsr     decsp1
	lda     #$03
	ldy     #$00
L09A1:	sta     (sp),y
	cmp     #$10
	bcs     L0598
;
; sprite[i] &= ~(0x3);
;
	lda     (sp),y
	clc
	ldy     #$02
	adc     (sp),y
	sta     ptr1
	lda     #$00
	iny
	adc     (sp),y
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	and     #$FC
	sta     (ptr1),y
;
; sprite[i] |= palette;
;
	lda     (sp),y
	clc
	ldy     #$02
	adc     (sp),y
	pha
	lda     #$00
	iny
	adc     (sp),y
	tax
	pla
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     ptr1
	ldy     #$03
	lda     (sp),y
	ora     ptr1
	ldy     #$00
	jsr     staspidx
;
; for ( i = 3; i <= 15; i = i + 4 ) {
;
	ldy     #$00
	lda     (sp),y
	clc
	adc     #$04
	jmp     L09A1
;
; }
;
L0598:	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ setSpritePriority (__near__ unsigned char *, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_setSpritePriority: near

.segment	"CODE"

;
; void __fastcall__ setSpritePriority(u8 *sprite, u8 priority) {
;
	jsr     pusha
;
; if ( priority ) {
;
	ldy     #$00
	lda     (sp),y
	beq     L05A9
;
; sprite[3] |= OAM_BEHIND;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$03
	lda     (ptr1),y
	ora     #$20
	sta     (ptr1),y
;
; sprite[7] |= OAM_BEHIND;
;
	dey
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$07
	lda     (ptr1),y
	ora     #$20
	sta     (ptr1),y
;
; sprite[11] |= OAM_BEHIND;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$0B
	lda     (ptr1),y
	ora     #$20
	sta     (ptr1),y
;
; sprite[15] |= OAM_BEHIND;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$0F
	lda     (ptr1),y
	ora     #$20
;
; } else {
;
	jmp     L09A2
;
; sprite[3] &= ~OAM_BEHIND;
;
L05A9:	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$03
	lda     (ptr1),y
	and     #$DF
	sta     (ptr1),y
;
; sprite[7] &= ~OAM_BEHIND;
;
	dey
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$07
	lda     (ptr1),y
	and     #$DF
	sta     (ptr1),y
;
; sprite[11] &= ~OAM_BEHIND;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$0B
	lda     (ptr1),y
	and     #$DF
	sta     (ptr1),y
;
; sprite[15] &= ~OAM_BEHIND;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$0F
	lda     (ptr1),y
	and     #$DF
L09A2:	sta     (ptr1),y
;
; }
;
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ flipSprite (__near__ unsigned char *, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_flipSprite: near

.segment	"CODE"

;
; void __fastcall__ flipSprite(u8 *sprite, u8 flip) {
;
	jsr     pusha
;
; if ( flip ) {
;
	ldy     #$00
	lda     (sp),y
	jeq     L05C5
;
; sprite[0] = 8;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     #$08
	dey
	sta     (ptr1),y
;
; sprite[3] |= OAM_FLIP_H;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$03
	lda     (ptr1),y
	ora     #$40
	sta     (ptr1),y
;
; sprite[4] = 0;
;
	dey
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     #$00
	ldy     #$04
	sta     (ptr1),y
;
; sprite[7] |= OAM_FLIP_H;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$07
	lda     (ptr1),y
	ora     #$40
	sta     (ptr1),y
;
; sprite[8] = 8;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     #$08
	tay
	sta     (ptr1),y
;
; sprite[11] |= OAM_FLIP_H;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$0B
	lda     (ptr1),y
	ora     #$40
	sta     (ptr1),y
;
; sprite[12] = 0;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     #$00
	ldy     #$0C
	sta     (ptr1),y
;
; sprite[15] |= OAM_FLIP_H;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$0F
	lda     (ptr1),y
	ora     #$40
;
; } else {
;
	jmp     L09A3
;
; sprite[0] = 0;
;
L05C5:	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     #$00
	dey
	sta     (ptr1),y
;
; sprite[3] &= ~OAM_FLIP_H;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$03
	lda     (ptr1),y
	and     #$BF
	sta     (ptr1),y
;
; sprite[4] = 8;
;
	dey
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     #$08
	ldy     #$04
	sta     (ptr1),y
;
; sprite[7] &= ~OAM_FLIP_H;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$07
	lda     (ptr1),y
	and     #$BF
	sta     (ptr1),y
;
; sprite[8] = 0;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     #$00
	ldy     #$08
	sta     (ptr1),y
;
; sprite[11] &= ~OAM_FLIP_H;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$0B
	lda     (ptr1),y
	and     #$BF
	sta     (ptr1),y
;
; sprite[12] = 8;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     #$08
	ldy     #$0C
	sta     (ptr1),y
;
; sprite[15] &= ~OAM_FLIP_H;  
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$0F
	lda     (ptr1),y
	and     #$BF
L09A3:	sta     (ptr1),y
;
; }
;
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ __fastcall__ spriteCount (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_spriteCount: near

.segment	"CODE"

;
; ++enemySpriteCount;
;
	inc     _enemySpriteCount
;
; if ( enemySpriteCount >= numEnemies ) {
;
	ldx     #$00
	lda     _enemySpriteCount
	cmp     _numEnemies
	bcc     L09A4
;
; enemySpriteCount = 0;
;
	stx     _enemySpriteCount
;
; return enemySpriteCount;
;
L09A4:	lda     _enemySpriteCount
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ updateEnemySprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updateEnemySprites: near

.segment	"CODE"

;
; for ( i = 0; i < numEnemies; ++i ) {
;
	lda     #$00
	sta     _i
L09A7:	lda     _i
	cmp     _numEnemies
	bcc     L09AD
;
; }
;
	rts
;
; spriteFlickerIndex = spriteCount();
;
L09AD:	jsr     _spriteCount
	sta     _spriteFlickerIndex
;
; if ( enemyData[spriteFlickerIndex].state == ENEMY_STATE_NORMAL ) {
;
	ldx     #$00
	lda     _spriteFlickerIndex
	jsr     mulax6
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	ldy     #$05
	ldx     #$00
	lda     (ptr1),y
	jne     L09AA
;
; if ( ( frameCount & 0x0F ) == 0x0F ) {
;
	lda     _frameCount
	and     #$0F
	cmp     #$0F
	bne     L09A8
;
; enemyData[spriteFlickerIndex].frame ^= 1;
;
	lda     _spriteFlickerIndex
	jsr     mulax6
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	eor     #$01
	sta     (ptr1),y
;
; setSpriteFrame(enemySpriteData[spriteFlickerIndex], enemyFrames[enemyData[spriteFlickerIndex].frame]);
;
	lda     _spriteFlickerIndex
	jsr     pusha0
	lda     #$11
	jsr     tosmula0
	clc
	adc     #<(_enemySpriteData)
	tay
	txa
	adc     #>(_enemySpriteData)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _spriteFlickerIndex
	jsr     mulax6
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	ldy     #$02
	ldx     #$00
	lda     (ptr1),y
	jsr     aslax2
	clc
	adc     #<(_enemyFrames)
	tay
	txa
	adc     #>(_enemyFrames)
	tax
	tya
	jsr     _setSpriteFrame
;
; if ( enemyData[spriteFlickerIndex].collidingWithPotion ) {
;
	ldx     #$00
L09A8:	lda     _spriteFlickerIndex
	jsr     mulax6
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	ldy     #$04
	lda     (ptr1),y
	beq     L09A9
;
; setSpritePalette(enemySpriteData[spriteFlickerIndex], 0x0);
;
	lda     _spriteFlickerIndex
	jsr     pusha0
	lda     #$11
	jsr     tosmula0
	clc
	adc     #<(_enemySpriteData)
	tay
	txa
	adc     #>(_enemySpriteData)
	tax
	tya
	jsr     pushax
	lda     #$00
;
; } else {
;
	jmp     L09A5
;
; setSpritePalette(enemySpriteData[spriteFlickerIndex], 0x3);
;
L09A9:	lda     _spriteFlickerIndex
	jsr     pusha0
	lda     #$11
	jsr     tosmula0
	clc
	adc     #<(_enemySpriteData)
	tay
	txa
	adc     #>(_enemySpriteData)
	tax
	tya
	jsr     pushax
	lda     #$03
L09A5:	jsr     _setSpritePalette
;
; setSpritePriority(enemySpriteData[i], sprPriorityToggle);
;
	lda     _i
	jsr     pusha0
	lda     #$11
	jsr     tosmula0
	clc
	adc     #<(_enemySpriteData)
	tay
	txa
	adc     #>(_enemySpriteData)
	tax
	tya
	jsr     pushax
	lda     _sprPriorityToggle
	jsr     _setSpritePriority
;
; sprPriorityToggle ^= 1;
;
	lda     _sprPriorityToggle
	eor     #$01
	sta     _sprPriorityToggle
;
; oamSpriteIndex = oam_meta_spr(enemyData[spriteFlickerIndex].x, enemyData[spriteFlickerIndex].y, oamSpriteIndex, enemySpriteData[spriteFlickerIndex]);    
;
	jsr     decsp3
	ldx     #$00
	lda     _spriteFlickerIndex
	jsr     mulax6
	sta     ptr1
	txa
	clc
	adc     #>(_enemyData)
	sta     ptr1+1
	ldy     #<(_enemyData)
	lda     (ptr1),y
	ldy     #$02
	sta     (sp),y
	ldx     #$00
	lda     _spriteFlickerIndex
	jsr     mulax6
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	dey
	lda     (ptr1),y
	sta     (sp),y
	lda     _oamSpriteIndex
	dey
	sta     (sp),y
	lda     _spriteFlickerIndex
	jsr     pusha0
	lda     #$11
	jsr     tosmula0
	clc
	adc     #<(_enemySpriteData)
	tay
	txa
	adc     #>(_enemySpriteData)
	tax
	tya
;
; } else if ( enemyData[spriteFlickerIndex].state == ENEMY_STATE_MUSHROOM ) {
;
	jmp     L09AC
L09AA:	lda     _spriteFlickerIndex
	jsr     mulax6
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	lda     (ptr1),y
	cmp     #$01
	bne     L09AB
;
; setSpritePriority(enemySpriteData[i], sprPriorityToggle);
;
	lda     _i
	jsr     pusha0
	lda     #$11
	jsr     tosmula0
	clc
	adc     #<(_enemySpriteData)
	tay
	txa
	adc     #>(_enemySpriteData)
	tax
	tya
	jsr     pushax
	lda     _sprPriorityToggle
	jsr     _setSpritePriority
;
; sprPriorityToggle ^= 1;
;
	lda     _sprPriorityToggle
	eor     #$01
	sta     _sprPriorityToggle
;
; oamSpriteIndex = oam_meta_spr(enemyData[spriteFlickerIndex].x, enemyData[spriteFlickerIndex].y, oamSpriteIndex, mushroomSpriteDataTemplate);       
;
	jsr     decsp3
	ldx     #$00
	lda     _spriteFlickerIndex
	jsr     mulax6
	sta     ptr1
	txa
	clc
	adc     #>(_enemyData)
	sta     ptr1+1
	ldy     #<(_enemyData)
	lda     (ptr1),y
	ldy     #$02
	sta     (sp),y
	ldx     #$00
	lda     _spriteFlickerIndex
	jsr     mulax6
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	dey
	lda     (ptr1),y
	sta     (sp),y
	lda     _oamSpriteIndex
	dey
	sta     (sp),y
	lda     #<(_mushroomSpriteDataTemplate)
	ldx     #>(_mushroomSpriteDataTemplate)
L09AC:	jsr     _oam_meta_spr
	sta     _oamSpriteIndex
;
; for ( i = 0; i < numEnemies; ++i ) {
;
L09AB:	inc     _i
	jmp     L09A7

.endproc

; ---------------------------------------------------------------
; void __near__ updatePlayerSprite (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updatePlayerSprite: near

.segment	"CODE"

;
; if ( playerState == PLAYER_STATE_NORMAL ) {
;
	lda     _playerState
	bne     L09B1
;
; if ( pad & PAD_RIGHT ) {
;
	lda     _pad
	and     #$80
	beq     L09AF
;
; flipSprite(playerSpriteData, 1);
;
	lda     #<(_playerSpriteData)
	ldx     #>(_playerSpriteData)
	jsr     pushax
	lda     #$01
;
; } else if ( pad & PAD_LEFT ) {
;
	jmp     L09AE
L09AF:	lda     _pad
	and     #$40
	beq     L09B0
;
; flipSprite(playerSpriteData, 0);
;
	lda     #<(_playerSpriteData)
	ldx     #>(_playerSpriteData)
	jsr     pushax
	lda     #$00
L09AE:	jsr     _flipSprite
;
; if ( ( frameCount & 0x0F ) == 0x0F ) {
;
L09B0:	lda     _frameCount
	and     #$0F
	cmp     #$0F
	bne     L0666
;
; playerFrame ^= 1;
;
	lda     _playerFrame
	eor     #$01
	sta     _playerFrame
;
; setSpriteFrame(playerSpriteData, playerFrames[playerFrame]);
;
	lda     #<(_playerSpriteData)
	ldx     #>(_playerSpriteData)
	jsr     pushax
	ldx     #$00
	lda     _playerFrame
	jsr     aslax2
	clc
	adc     #<(_playerFrames)
	tay
	txa
	adc     #>(_playerFrames)
	tax
	tya
	jsr     _setSpriteFrame
;
; } else if ( playerState == PLAYER_STATE_CLIMBING ) {
;
	jmp     L0666
L09B1:	lda     _playerState
	cmp     #$02
	bne     L0666
;
; setSpriteFrame(playerSpriteData, playerFrames[PLAYER_FRAME_CLIMBING]);
;
	lda     #<(_playerSpriteData)
	ldx     #>(_playerSpriteData)
	jsr     pushax
	lda     #<(_playerFrames+8)
	ldx     #>(_playerFrames+8)
	jsr     _setSpriteFrame
;
; if ( ( frameCount & 0x0F ) == 0x0F ) {
;
	lda     _frameCount
	and     #$0F
	cmp     #$0F
	bne     L0666
;
; playerFrame ^= 1;
;
	lda     _playerFrame
	eor     #$01
	sta     _playerFrame
;
; flipSprite(playerSpriteData, playerFrame);
;
	lda     #<(_playerSpriteData)
	ldx     #>(_playerSpriteData)
	jsr     pushax
	lda     _playerFrame
	jsr     _flipSprite
;
; oamSpriteIndex = oam_meta_spr(playerX, playerY, oamSpriteIndex, playerSpriteData); 
;
L0666:	jsr     decsp3
	lda     _playerX
	ldy     #$02
	sta     (sp),y
	lda     _playerY
	dey
	sta     (sp),y
	lda     _oamSpriteIndex
	dey
	sta     (sp),y
	lda     #<(_playerSpriteData)
	ldx     #>(_playerSpriteData)
	jsr     _oam_meta_spr
	sta     _oamSpriteIndex
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ updatePotionSprite (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updatePotionSprite: near

.segment	"CODE"

;
; oamSpriteIndex = oam_meta_spr(potionX, potionY, oamSpriteIndex, potionSpriteData); 
;
	jsr     decsp3
	lda     _potionX
	ldy     #$02
	sta     (sp),y
	lda     _potionY
	dey
	sta     (sp),y
	lda     _oamSpriteIndex
	dey
	sta     (sp),y
	lda     #<(_potionSpriteData)
	ldx     #>(_potionSpriteData)
	jsr     _oam_meta_spr
	sta     _oamSpriteIndex
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ four_Sides (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_four_Sides: near

.segment	"CODE"

;
; void __fastcall__ four_Sides(u8 originX, u8 originY) {
;
	jsr     pusha
;
; leftSide = originX + 1;
;
	ldy     #$01
	lda     (sp),y
	clc
	adc     #$01
	sta     _leftSide
;
; rightSide = originX + 15;
;
	lda     (sp),y
	clc
	adc     #$0F
	sta     _rightSide
;
; topSide = originY;
;
	dey
	lda     (sp),y
	sta     _topSide
;
; bottomSide = originY + 14;
;
	lda     (sp),y
	clc
	adc     #$0E
	sta     _bottomSide
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ four_SidesSmall (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_four_SidesSmall: near

.segment	"CODE"

;
; void __fastcall__ four_SidesSmall(u8 originX, u8 originY) {
;
	jsr     pusha
;
; leftSide = originX + 1;
;
	ldy     #$01
	lda     (sp),y
	clc
	adc     #$01
	sta     _leftSide
;
; rightSide = originX + 7;
;
	lda     (sp),y
	clc
	adc     #$07
	sta     _rightSide
;
; topSide = originY;
;
	dey
	lda     (sp),y
	sta     _topSide
;
; bottomSide = originY + 7;
;
	lda     (sp),y
	clc
	adc     #$07
	sta     _bottomSide
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ getCollisionIndex (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_getCollisionIndex: near

.segment	"CODE"

;
; void __fastcall__ getCollisionIndex(u8 screenX, u8 screenY) {
;
	jsr     pusha
;
; collisionIndex = ( screenX >> 3 ) + ( ( screenY >> 3 ) << 5);
;
	ldy     #$01
	ldx     #$00
	lda     (sp),y
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	stx     ptr1+1
	lda     (sp,x)
	lsr     a
	lsr     a
	lsr     a
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     ptr1
	sta     _collisionIndex
	lda     tmp1
	adc     ptr1+1
	sta     _collisionIndex+1
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ __fastcall__ smallCollideCheckVertical (unsigned char, unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_smallCollideCheckVertical: near

.segment	"CODE"

;
; u8 __fastcall__ smallCollideCheckVertical(u8 originX, u8 originY, u8 direction) {
;
	jsr     pusha
;
; leftSide = originX;
;
	ldy     #$02
	lda     (sp),y
	sta     _leftSide
;
; rightSide = originX + 8;
;
	lda     (sp),y
	clc
	adc     #$08
	sta     _rightSide
;
; topSide = originY;
;
	dey
	lda     (sp),y
	sta     _topSide
;
; bottomSide = originY + 8;
;
	lda     (sp),y
	clc
	adc     #$08
	sta     _bottomSide
;
; collisionIndex = 0;
;
	lda     #$00
	sta     _collisionIndex
	sta     _collisionIndex+1
;
; if ( ( (direction & PAD_UP) != 0) ) {
;
	dey
	lda     (sp),y
	and     #$10
	beq     L09B4
;
; getCollisionIndex(rightSide, topSide);
;
	lda     _rightSide
	jsr     pusha
	lda     _topSide
	jsr     _getCollisionIndex
;
; if ( collisionMap[collisionIndex] != TILE_ALLCOLLIDE ) {
;
	lda     _collisionMap
	clc
	adc     _collisionIndex
	sta     ptr1
	lda     _collisionMap+1
	adc     _collisionIndex+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	cmp     #$01
	beq     L06BD
;
; getCollisionIndex(leftSide, topSide);
;
	lda     _leftSide
	jsr     pusha
	lda     _topSide
;
; } else if ( (direction & PAD_DOWN) != 0 ) {
;
	jmp     L09B2
L09B4:	lda     (sp),y
	and     #$20
	beq     L06BD
;
; getCollisionIndex(rightSide, bottomSide);
;
	lda     _rightSide
	jsr     pusha
	lda     _bottomSide
	jsr     _getCollisionIndex
;
; if ( collisionMap[collisionIndex] != TILE_ALLCOLLIDE ) {
;
	lda     _collisionMap
	clc
	adc     _collisionIndex
	sta     ptr1
	lda     _collisionMap+1
	adc     _collisionIndex+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	cmp     #$01
	beq     L06BD
;
; getCollisionIndex(leftSide, bottomSide);
;
	lda     _leftSide
	jsr     pusha
	lda     _bottomSide
L09B2:	jsr     _getCollisionIndex
;
; if ( collisionIndex ) {
;
L06BD:	lda     _collisionIndex
	ora     _collisionIndex+1
	beq     L06C3
;
; return collisionMap[collisionIndex]; 
;
	lda     _collisionMap
	clc
	adc     _collisionIndex
	sta     ptr1
	lda     _collisionMap+1
	adc     _collisionIndex+1
	sta     ptr1+1
	ldx     #$00
	lda     (ptr1,x)
	jmp     incsp3
;
; return 0;
;
L06C3:	tax
;
; }
;
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ __fastcall__ collideCheckVertical (unsigned char, unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_collideCheckVertical: near

.segment	"CODE"

;
; u8 __fastcall__ collideCheckVertical(u8 originX, u8 originY, u8 direction) {
;
	jsr     pusha
;
; leftSide = originX + 2;
;
	ldy     #$02
	lda     (sp),y
	clc
	adc     #$02
	sta     _leftSide
;
; rightSide = originX + 14;
;
	lda     (sp),y
	clc
	adc     #$0E
	sta     _rightSide
;
; topSide = originY + 1;
;
	dey
	lda     (sp),y
	clc
	adc     #$01
	sta     _topSide
;
; bottomSide = originY + 17;
;
	lda     (sp),y
	clc
	adc     #$11
	sta     _bottomSide
;
; collisionIndex = 0;
;
	lda     #$00
	sta     _collisionIndex
	sta     _collisionIndex+1
;
; if ( ( (direction & PAD_UP) != 0) ) {
;
	dey
	lda     (sp),y
	and     #$10
	beq     L09B7
;
; getCollisionIndex(rightSide, topSide);
;
	lda     _rightSide
	jsr     pusha
	lda     _topSide
	jsr     _getCollisionIndex
;
; if ( collisionMap[collisionIndex] != TILE_ALLCOLLIDE )  {
;
	lda     _collisionMap
	clc
	adc     _collisionIndex
	sta     ptr1
	lda     _collisionMap+1
	adc     _collisionIndex+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	cmp     #$01
	beq     L06EE
;
; getCollisionIndex(leftSide, topSide);
;
	lda     _leftSide
	jsr     pusha
	lda     _topSide
;
; } else if ( (direction & PAD_DOWN) != 0 ) {
;
	jmp     L09B5
L09B7:	lda     (sp),y
	and     #$20
	beq     L06EE
;
; getCollisionIndex(rightSide, bottomSide);
;
	lda     _rightSide
	jsr     pusha
	lda     _bottomSide
	jsr     _getCollisionIndex
;
; if ( collisionMap[collisionIndex] != TILE_ALLCOLLIDE ) {
;
	lda     _collisionMap
	clc
	adc     _collisionIndex
	sta     ptr1
	lda     _collisionMap+1
	adc     _collisionIndex+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	cmp     #$01
	beq     L06EE
;
; getCollisionIndex(leftSide, bottomSide);
;
	lda     _leftSide
	jsr     pusha
	lda     _bottomSide
L09B5:	jsr     _getCollisionIndex
;
; if ( collisionIndex ) {
;
L06EE:	lda     _collisionIndex
	ora     _collisionIndex+1
	beq     L06F4
;
; return collisionMap[collisionIndex]; 
;
	lda     _collisionMap
	clc
	adc     _collisionIndex
	sta     ptr1
	lda     _collisionMap+1
	adc     _collisionIndex+1
	sta     ptr1+1
	ldx     #$00
	lda     (ptr1,x)
	jmp     incsp3
;
; return 0;
;
L06F4:	tax
;
; }
;
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ checkPlayerLadderCollision (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_checkPlayerLadderCollision: near

.segment	"CODE"

;
; leftSide = playerX + 3;
;
	jsr     decsp4
	lda     _playerX
	clc
	adc     #$03
	sta     _leftSide
;
; rightSide = playerX + 11;
;
	lda     _playerX
	clc
	adc     #$0B
	sta     _rightSide
;
; topSide = playerY + 9;
;
	lda     _playerY
	clc
	adc     #$09
	sta     _topSide
;
; bottomSide = playerY + 16;
;
	lda     _playerY
	clc
	adc     #$10
	sta     _bottomSide
;
; getCollisionIndex(leftSide, bottomSide);
;
	lda     _leftSide
	jsr     pusha
	lda     _bottomSide
	jsr     _getCollisionIndex
;
; checkLeft = collisionIndex;
;
	lda     _collisionIndex
	ldx     _collisionIndex+1
	ldy     #$02
	jsr     staxysp
;
; getCollisionIndex(rightSide, bottomSide);
;
	lda     _rightSide
	jsr     pusha
	lda     _bottomSide
	jsr     _getCollisionIndex
;
; checkRight = collisionIndex;
;
	lda     _collisionIndex
	ldx     _collisionIndex+1
	jsr     stax0sp
;
; ( ( collisionMap[checkLeft] == TILE_LADDER )  || ( collisionMap[checkLeft] == TILE_LADDER_TOP ) ) &&
;
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     _collisionMap
	sta     ptr1
	txa
	adc     _collisionMap+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	cmp     #$06
	beq     L09B8
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     _collisionMap
	sta     ptr1
	txa
	adc     _collisionMap+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	cmp     #$07
	beq     L09B8
	tya
	jmp     L09C0
;
; ( ( collisionMap[checkRight] == TILE_LADDER ) || ( collisionMap[checkRight] == TILE_LADDER_TOP ) ) 
;
L09B8:	iny
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     _collisionMap
	sta     ptr1
	txa
	adc     _collisionMap+1
	sta     ptr1+1
	lda     (ptr1),y
	cmp     #$06
	beq     L09BE
	iny
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     _collisionMap
	sta     ptr1
	txa
	adc     _collisionMap+1
	sta     ptr1+1
	lda     (ptr1),y
	cmp     #$07
	beq     L09BE
	tya
	jmp     L09C0
;
; playerState = PLAYER_STATE_CLIMBING;
;
L09BE:	lda     #$02
	sta     _playerState
;
; if ( collisionMap[checkLeft] == TILE_LADDER ) {
;
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     _collisionMap
	sta     ptr1
	txa
	adc     _collisionMap+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	cmp     #$06
	bne     L0723
;
; playerX = ( playerX + 3)  & 0xf8; 
;
	lda     _playerX
	clc
	adc     #$03
	and     #$F8
	sta     _playerX
;
; } else if ( collisionMap[checkRight] == TILE_LADDER ) {
;
	jmp     incsp4
L0723:	iny
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     _collisionMap
	sta     ptr1
	txa
	adc     _collisionMap+1
	sta     ptr1+1
	lda     (ptr1),y
	cmp     #$06
	bne     L0732
;
; playerX = ( playerX - 3 ) & 0xf8;
;
	lda     _playerX
	sec
	sbc     #$03
	and     #$F8
	sta     _playerX
;
; } else {
;
	jmp     incsp4
;
; playerState = PLAYER_STATE_NORMAL;
;
L09C0:	sta     _playerState
;
; }
;
L0732:	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ collideCheckHorizontal (unsigned char, unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_collideCheckHorizontal: near

.segment	"CODE"

;
; void collideCheckHorizontal(u8 originX, u8 originY, u8 direction) {
;
	jsr     pusha
;
; leftSide = originX;
;
	ldy     #$02
	lda     (sp),y
	sta     _leftSide
;
; rightSide = originX + 16;
;
	lda     (sp),y
	clc
	adc     #$10
	sta     _rightSide
;
; topSide = originY + 4;
;
	dey
	lda     (sp),y
	clc
	adc     #$04
	sta     _topSide
;
; bottomSide = originY + 12;
;
	lda     (sp),y
	clc
	adc     #$0C
	sta     _bottomSide
;
; if ( ( (direction & PAD_LEFT) != 0 ) ) {
;
	dey
	lda     (sp),y
	and     #$40
	beq     L09C3
;
; getCollisionIndex(leftSide, topSide);
;
	lda     _leftSide
	jsr     pusha
	lda     _topSide
	jsr     _getCollisionIndex
;
; if ( collisionMap[collisionIndex] == TILE_NOCOLLIDE ) {
;
	lda     _collisionMap
	clc
	adc     _collisionIndex
	sta     ptr1
	lda     _collisionMap+1
	adc     _collisionIndex+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	bne     L0757
;
; getCollisionIndex(leftSide, bottomSide);
;
	lda     _leftSide
;
; } else if ( (direction & PAD_RIGHT) != 0 ) {
;
	jmp     L09C5
L09C3:	lda     (sp),y
	and     #$80
	beq     L0757
;
; getCollisionIndex(rightSide, topSide);
;
	lda     _rightSide
	jsr     pusha
	lda     _topSide
	jsr     _getCollisionIndex
;
; if ( collisionMap[collisionIndex] == TILE_NOCOLLIDE ) {
;
	lda     _collisionMap
	clc
	adc     _collisionIndex
	sta     ptr1
	lda     _collisionMap+1
	adc     _collisionIndex+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	bne     L0757
;
; getCollisionIndex(rightSide, bottomSide);
;
	lda     _rightSide
L09C5:	jsr     pusha
	lda     _bottomSide
	jsr     _getCollisionIndex
;
; horizontalCollideCheck = collisionMap[collisionIndex];
;
L0757:	lda     _collisionMap
	clc
	adc     _collisionIndex
	sta     ptr1
	lda     _collisionMap+1
	adc     _collisionIndex+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     _horizontalCollideCheck
;
; }
;
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ __fastcall__ bgVertCollideCheck (__near__ unsigned char *, __near__ unsigned char *, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bgVertCollideCheck: near

.segment	"CODE"

;
; u8 __fastcall__ bgVertCollideCheck(u8 *x, u8 *y, u8 dir) {
;
	jsr     pusha
;
; u8 colliding = collideCheckVertical(*x, *y, dir);
;
	jsr     decsp2
	ldy     #$06
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	iny
	sta     (sp),y
	ldy     #$04
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	sta     (sp),y
	ldy     #$02
	lda     (sp),y
	jsr     _collideCheckVertical
	jsr     pusha
;
; if ( colliding == 1 ) {
;
	ldx     #$00
	lda     (sp,x)
	cmp     #$01
	bne     L09C8
;
; if ( dir & PAD_UP ) {
;
	tay
	lda     (sp),y
	and     #$10
	beq     L0767
;
; *y = (*y & 0xf8) + 7;
;
	ldy     #$05
	jsr     pushwysp
	ldy     #$05
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	and     #$F8
	clc
	adc     #$07
;
; } else {
;
	jmp     L09C6
;
; *y = (*y & 0xf8) - 1;
;
L0767:	ldy     #$05
	jsr     pushwysp
	ldy     #$05
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	and     #$F8
	sec
	sbc     #$01
L09C6:	jsr     staspidx
;
; return colliding;
;
	ldx     #$00
L09C8:	lda     (sp,x)
;
; }
;
	jmp     incsp6

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ bgHorizCollideCheck (__near__ unsigned char *, __near__ unsigned char *, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bgHorizCollideCheck: near

.segment	"CODE"

;
; void __fastcall__ bgHorizCollideCheck(u8 *x, u8 *y, u8 dir) {
;
	jsr     pusha
;
; collideCheckHorizontal(*x, *y, dir);
;
	jsr     decsp2
	ldy     #$06
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	iny
	sta     (sp),y
	ldy     #$04
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	sta     (sp),y
	ldy     #$02
	lda     (sp),y
	jsr     _collideCheckHorizontal
;
; if ( horizontalCollideCheck == 1 ) {
;
	lda     _horizontalCollideCheck
	cmp     #$01
	bne     L0781
;
; if ( dir & PAD_LEFT ) {
;
	ldy     #$00
	lda     (sp),y
	and     #$40
	beq     L09CB
;
; *x = (*x & 0xf8) + 7;
;
	ldy     #$06
	jsr     pushwysp
	ldy     #$06
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	and     #$F8
	clc
	adc     #$07
;
; } else if ( dir & PAD_RIGHT ) {
;
	jmp     L09C9
L09CB:	lda     (sp),y
	and     #$80
	beq     L0781
;
; *x = (*x & 0xf8);
;
	ldy     #$06
	jsr     pushwysp
	ldy     #$06
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	and     #$F8
L09C9:	jsr     staspidx
;
; }
;
L0781:	jmp     incsp5

.endproc

; ---------------------------------------------------------------
; void __near__ enemyCollideCheck (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enemyCollideCheck: near

.segment	"CODE"

;
; enemyIndex = 0;
;
	lda     #$00
	sta     _enemyIndex
;
; enemyColliding = 0;
;
	sta     _enemyColliding
;
; enemyCollidedIndex = 0;
;
	sta     _enemyCollidedIndex
;
; while ( !enemyColliding && ( enemyIndex < numEnemies ) ) {
;
	jmp     L078F
;
; currentEnemy = &(enemyData[enemyIndex]);
;
L09CD:	lda     _enemyIndex
	jsr     mulax6
	clc
	adc     #<(_enemyData)
	tay
	txa
	adc     #>(_enemyData)
	tax
	tya
	sta     _currentEnemy
	stx     _currentEnemy+1
;
; enemyTop = (*currentEnemy).y + 2;
;
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	clc
	adc     #$02
	sta     _enemyTop
;
; enemyBottom = (*currentEnemy).y + 14;
;
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	lda     (ptr1),y
	clc
	adc     #$0E
	sta     _enemyBottom
;
; enemyLeft = (*currentEnemy).x + 2;
;
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	dey
	lda     (ptr1),y
	clc
	adc     #$02
	sta     _enemyLeft
;
; enemyRight = (*currentEnemy).x + 14;
;
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	lda     (ptr1),y
	clc
	adc     #$0E
	sta     _enemyRight
;
; if ( !( rightSide  <  enemyLeft  || 
;
	lda     _rightSide
	cmp     _enemyLeft
	bcc     L09CE
;
; leftSide   >= enemyRight || 
;
	lda     _leftSide
	cmp     _enemyRight
	bcs     L09CE
;
; bottomSide <  enemyTop   || 
;
	lda     _bottomSide
	cmp     _enemyTop
	bcc     L09CE
;
; topSide    >= enemyBottom ) ) {
;
	lda     _topSide
	cmp     _enemyBottom
	bcs     L09CE
	tya
	jmp     L07AB
L09CE:	lda     #$01
L07AB:	jsr     bnega
	beq     L09D0
;
; switch ( (*currentEnemy).state ) {
;
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	ldy     #$05
	lda     (ptr1),y
;
; }
;
	beq     L09CF
	cmp     #$01
	beq     L07B7
	cmp     #$03
	beq     L09D0
	jmp     L09D0
;
; enemyColliding = 1;
;
L09CF:	lda     #$01
	sta     _enemyColliding
;
; enemyCollidedIndex = enemyIndex;
;
	lda     _enemyIndex
	sta     _enemyCollidedIndex
;
; break;
;
	jmp     L09D0
;
; (*currentEnemy).state = ENEMY_STATE_DEAD;
;
L07B7:	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	lda     #$03
	sta     (ptr1),y
;
; ++enemyIndex;
;
L09D0:	inc     _enemyIndex
;
; while ( !enemyColliding && ( enemyIndex < numEnemies ) ) {
;
L078F:	lda     _enemyColliding
	bne     L09D1
	tax
	lda     _enemyIndex
	cmp     _numEnemies
	jcc     L09CD
L09D1:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ potionEnemyCollideCheck (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_potionEnemyCollideCheck: near

.segment	"CODE"

;
; enemyColliding = 0;
;
	lda     #$00
	sta     _enemyColliding
;
; if ( potionIsActive ) {
;
	lda     _potionIsActive
	beq     L09D4
;
; four_SidesSmall(potionX, potionY);
;
	lda     _potionX
	jsr     pusha
	lda     _potionY
	jsr     _four_SidesSmall
;
; enemyCollideCheck();
;
	jsr     _enemyCollideCheck
;
; if ( enemyColliding ) {
;
	lda     _enemyColliding
	beq     L09D4
;
; killPotion();
;
	jsr     _killPotion
;
; enemyData[enemyCollidedIndex].state = ENEMY_STATE_MUSHROOM;
;
	ldx     #$00
	lda     _enemyCollidedIndex
	jsr     mulax6
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	lda     #$01
	ldy     #$05
	sta     (ptr1),y
;
; enemyColliding = 0;
;
	lda     #$00
L09D4:	sta     _enemyColliding
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ updateEnemyMovement (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updateEnemyMovement: near

.segment	"CODE"

;
; for ( i = 0; i < numEnemies; i++ ) {
;
	lda     #$00
	sta     _i
	tax
L09D6:	lda     _i
	cmp     _numEnemies
	bcc     L09DE
;
; }
;
	rts
;
; currentEnemy = &(enemyData[i]);
;
L09DE:	jsr     mulax6
	clc
	adc     #<(_enemyData)
	tay
	txa
	adc     #>(_enemyData)
	tax
	tya
	sta     _currentEnemy
	stx     _currentEnemy+1
;
; if ( (*currentEnemy).state == ENEMY_STATE_MUSHROOM ) {
;
	sta     ptr1
	stx     ptr1+1
	ldy     #$05
	ldx     #$00
	lda     (ptr1),y
	cmp     #$01
;
; continue;
;
	jeq     L09DD
;
; enemyVertCollide = collideCheckVertical((*currentEnemy).x, (*currentEnemy).y + 1, PAD_DOWN);
;
	jsr     decsp2
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	lda     (ptr1,x)
	ldy     #$01
	sta     (sp),y
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	lda     (ptr1),y
	clc
	adc     #$01
	dey
	sta     (sp),y
	lda     #$20
	jsr     _collideCheckVertical
	sta     _enemyVertCollide
;
; if ( enemyVertCollide != TILE_ALLCOLLIDE ) {
;
	cmp     #$01
	beq     L07E7
;
; (*currentEnemy).y += 1;
;
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	clc
	adc     #$01
;
; } else {
;
	jmp     L09D5
;
; if ( (*currentEnemy).direction == PAD_RIGHT ) {
;
L07E7:	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	ldy     #$03
	lda     (ptr1),y
	cmp     #$80
	bne     L07ED
;
; (*currentEnemy).x += 1;
;
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	clc
	adc     #$01
	sta     (ptr1),y
;
; collideCheckHorizontal((*currentEnemy).x, (*currentEnemy).y, PAD_RIGHT);
;
	jsr     decsp2
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	lda     (ptr1),y
	iny
	sta     (sp),y
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	lda     (ptr1),y
	dey
	sta     (sp),y
	lda     #$80
	jsr     _collideCheckHorizontal
;
; if ( ( horizontalCollideCheck == TILE_ALLCOLLIDE ) || ( horizontalCollideCheck == TILE_ENEMYCOLLIDE ) ) {
;
	ldx     #$00
	lda     _horizontalCollideCheck
	cmp     #$01
	beq     L09D9
	cmp     #$02
	jne     L09DD
;
; flipSprite(enemySpriteData[i], 0);
;
L09D9:	lda     _i
	jsr     pusha0
	lda     #$11
	jsr     tosmula0
	clc
	adc     #<(_enemySpriteData)
	tay
	txa
	adc     #>(_enemySpriteData)
	tax
	tya
	jsr     pushax
	lda     #$00
	jsr     _flipSprite
;
; (*currentEnemy).direction = PAD_LEFT;
;
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	ldx     #$00
	lda     #$40
	ldy     #$03
	sta     (ptr1),y
;
; } else {
;
	jmp     L09DD
;
; (*currentEnemy).x -= 1;
;
L07ED:	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; collideCheckHorizontal((*currentEnemy).x, (*currentEnemy).y, PAD_LEFT);
;
	jsr     decsp2
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	lda     (ptr1),y
	iny
	sta     (sp),y
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	lda     (ptr1),y
	dey
	sta     (sp),y
	lda     #$40
	jsr     _collideCheckHorizontal
;
; if ( ( horizontalCollideCheck == TILE_ALLCOLLIDE ) || ( horizontalCollideCheck == TILE_ENEMYCOLLIDE ) ) {
;
	ldx     #$00
	lda     _horizontalCollideCheck
	cmp     #$01
	beq     L09DC
	cmp     #$02
	bne     L09DD
;
; flipSprite(enemySpriteData[i], 1);
;
L09DC:	lda     _i
	jsr     pusha0
	lda     #$11
	jsr     tosmula0
	clc
	adc     #<(_enemySpriteData)
	tay
	txa
	adc     #>(_enemySpriteData)
	tax
	tya
	jsr     pushax
	lda     #$01
	jsr     _flipSprite
;
; (*currentEnemy).direction = PAD_RIGHT;
;
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	lda     #$80
	ldy     #$03
L09D5:	sta     (ptr1),y
;
; for ( i = 0; i < numEnemies; i++ ) {
;
	ldx     #$00
L09DD:	lda     _i
	clc
	adc     #$01
	sta     _i
	jmp     L09D6

.endproc

; ---------------------------------------------------------------
; void __near__ playerStartClimbingUp (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_playerStartClimbingUp: near

.segment	"CODE"

;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ updatePlayerVerticalAcceleration (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updatePlayerVerticalAcceleration: near

.segment	"CODE"

;
; u8 collideBottom = 1;
;
	lda     #$01
	jsr     pusha
;
; if ( !(pad & PAD_A ) ) {
;
	jsr     decsp1
	lda     _pad
	and     #$01
	bne     L09E0
;
; jumpButtonReset = 1;
;
	lda     #$01
	sta     _jumpButtonReset
;
; if ( !( pad & PAD_A ) && playerJumping && ( playerVertVel > 0 ) ) {
;
L09E0:	lda     _pad
	and     #$01
	bne     L0823
	lda     _playerJumping
	beq     L0823
	lda     _playerVertVel
	sec
	sbc     #$01
	bvs     L0829
	eor     #$80
L0829:	bpl     L0823
;
; playerVertVel = 0;
;
	lda     #$00
	sta     _playerVertVel
;
; if ( playerJumping && ( playerVertVel > 0 ) ) {
;
L0823:	lda     _playerJumping
	beq     L082D
	lda     _playerVertVel
	sec
	sbc     #$01
	bvs     L0832
	eor     #$80
L0832:	bpl     L082D
;
; playerY -= playerVertVel;
;
	lda     _playerVertVel
	eor     #$FF
	sec
	adc     _playerY
	sta     _playerY
;
; if ( collideCheckVertical(playerX, playerY, PAD_UP) == TILE_ALLCOLLIDE ) { 
;
	jsr     decsp2
	lda     _playerX
	ldy     #$01
	sta     (sp),y
	lda     _playerY
	dey
	sta     (sp),y
	lda     #$10
	jsr     _collideCheckVertical
	cmp     #$01
	bne     L0A00
;
; playerY = (playerY & 0xF8) + 8;
;
	lda     _playerY
	and     #$F8
	clc
	adc     #$08
;
; } else {
;
	jmp     L0A01
;
; collideCheckTile = collideCheckVertical(playerX, playerY + 2, PAD_DOWN);
;
L082D:	jsr     decsp2
	lda     _playerX
	ldy     #$01
	sta     (sp),y
	lda     _playerY
	clc
	adc     #$02
	dey
	sta     (sp),y
	lda     #$20
	jsr     _collideCheckVertical
	ldy     #$00
	sta     (sp),y
;
; if ( ( collideCheckTile == TILE_ALLCOLLIDE ) || ( collideCheckTile == TILE_LADDER_TOP ) ) { 
;
	cmp     #$01
	beq     L09EB
	lda     (sp),y
	cmp     #$07
	bne     L09EC
;
; playerY = (playerY & 0xF8) + 7;
;
L09EB:	lda     _playerY
	and     #$F8
	clc
	adc     #$07
	sta     _playerY
;
; playerJumping = 0;
;
	sty     _playerJumping
;
; collideBottom = 1;   
;
	lda     #$01
;
; } else {
;
	jmp     L09FF
;
; playerY -= playerVertVel;
;
L09EC:	lda     _playerVertVel
	eor     #$FF
	sec
	adc     _playerY
L0A01:	sta     _playerY
;
; collideBottom = 0;
;
L0A00:	lda     #$00
L09FF:	ldy     #$01
	sta     (sp),y
;
; if ( ( collideBottom ) && ( pad & PAD_UP ) ) {
;
	lda     (sp),y
	beq     L09F2
	lda     _pad
	and     #$10
	beq     L09F2
;
; checkPlayerLadderCollision();
;
	jsr     _checkPlayerLadderCollision
;
; if ( ( collideBottom ) && ( pad & PAD_DOWN ) && ( collideCheckTile == TILE_LADDER_TOP ) ) {
;
	ldy     #$01
L09F2:	lda     (sp),y
	beq     L09F6
	lda     _pad
	and     #$20
	beq     L09F6
	dey
	lda     (sp),y
	cmp     #$07
	bne     L09F6
;
; playerY++;
;
	lda     _playerY
	clc
	adc     #$01
	sta     _playerY
;
; checkPlayerLadderCollision();
;
	jsr     _checkPlayerLadderCollision
;
; if ( ( playerVertVel > -3 ) && ( playerJumpCounter == 4 ) ) {
;
L09F6:	lda     _playerVertVel
	sec
	sbc     #$FE
	bvs     L0870
	eor     #$80
L0870:	bpl     L086C
	lda     _playerJumpCounter
	cmp     #$04
	bne     L086C
;
; playerVertVel -= 1; 
;
	dec     _playerVertVel
;
; playerJumpCounter = 0;
;
	lda     #$00
	sta     _playerJumpCounter
;
; if ( ( collideBottom ) && ( !playerJumping ) && ( jumpButtonReset ) && ( pad & PAD_A ) ) {
;
L086C:	ldy     #$01
	lda     (sp),y
	beq     L09FE
	lda     _playerJumping
	bne     L09FE
	lda     _jumpButtonReset
	beq     L09FE
	lda     _pad
	and     #$01
	beq     L09FE
;
; playerVertVel = PLAYER_INIT_JUMP_VEL;
;
	lda     #$04
	sta     _playerVertVel
;
; playerJumping = 1;
;
	sty     _playerJumping
;
; playerJumpCounter = 0;
;
	lda     #$00
	sta     _playerJumpCounter
;
; jumpButtonReset = 0;
;
	sta     _jumpButtonReset
;
; ++playerJumpCounter;
;
L09FE:	inc     _playerJumpCounter
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ updatePlayerClimbing (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updatePlayerClimbing: near

.segment	"CODE"

;
; checkPlayerLadderCollision();
;
	jsr     decsp1
	jsr     _checkPlayerLadderCollision
;
; if ( pad & PAD_UP ) { 
;
	lda     _pad
	and     #$10
	beq     L0A02
;
; --playerY;
;
	dec     _playerY
;
; } else if ( pad & PAD_DOWN ) {
;
	jmp     incsp1
L0A02:	lda     _pad
	and     #$20
	beq     L0899
;
; ++playerY;
;
	inc     _playerY
;
; collideCheckTile = collideCheckVertical(playerX, playerY + 4, PAD_DOWN);
;
	jsr     decsp2
	lda     _playerX
	ldy     #$01
	sta     (sp),y
	lda     _playerY
	clc
	adc     #$04
	dey
	sta     (sp),y
	lda     #$20
	jsr     _collideCheckVertical
	ldy     #$00
	sta     (sp),y
;
; if ( ( collideCheckTile == TILE_ALLCOLLIDE ) || ( collideCheckTile == TILE_LADDER_TOP ) ) {  
;
	cmp     #$01
	beq     L0A05
	lda     (sp),y
	cmp     #$07
	jne     incsp1
;
; playerState = PLAYER_STATE_NORMAL;
;
L0A05:	sty     _playerState
;
; }
;
L0899:	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ updatePlayerVerticalMovement (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updatePlayerVerticalMovement: near

.segment	"CODE"

;
; if ( playerState == PLAYER_STATE_CLIMBING ) {
;
	lda     _playerState
	cmp     #$02
;
; updatePlayerClimbing(); 
;
	jeq     _updatePlayerClimbing
;
; updatePlayerVerticalAcceleration();
;
	jmp     _updatePlayerVerticalAcceleration

.endproc

; ---------------------------------------------------------------
; void __near__ playerMoveHorizontal (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_playerMoveHorizontal: near

.segment	"CODE"

;
; if ( playerState == PLAYER_STATE_CLIMBING ) {
;
	lda     _playerState
	cmp     #$02
;
; return;
;
	beq     L08A6
;
; if ( pad & PAD_LEFT ) {
;
	lda     _pad
	and     #$40
	beq     L0A07
;
; playerDir = PAD_LEFT;
;
	lda     #$40
	sta     _playerDir
;
; if ( playerX > 0 ) {
;
	lda     _playerX
	beq     L08B6
;
; playerX -= 1;
;
	dec     _playerX
;
; } else if ( pad & PAD_RIGHT ) {
;
	jmp     L08B6
L0A07:	lda     _pad
	and     #$80
	beq     L08B6
;
; playerDir = PAD_RIGHT;
;
	lda     #$80
	sta     _playerDir
;
; if ( playerX < 240 ) {
;
	lda     _playerX
	cmp     #$F0
	bcs     L08B6
;
; playerX += 1;
;
	inc     _playerX
;
; bgHorizCollideCheck(&playerX, &playerY, pad);
;
L08B6:	jsr     decsp4
	lda     #<(_playerX)
	ldy     #$02
	sta     (sp),y
	iny
	lda     #>(_playerX)
	sta     (sp),y
	lda     #<(_playerY)
	ldy     #$00
	sta     (sp),y
	iny
	lda     #>(_playerY)
	sta     (sp),y
	lda     _pad
	jmp     _bgHorizCollideCheck
;
; }
;
L08A6:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ updatePlayerAttack (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updatePlayerAttack: near

.segment	"CODE"

;
; if ( ( pad & PAD_B ) && ( potionTossTimer == 0 ) ) {
;
	lda     _pad
	and     #$02
	beq     L0A0A
	lda     _potionTossTimer
	beq     L0A0B
L0A0A:	rts
;
; if ( !potionIsActive ) {
;
L0A0B:	lda     _potionIsActive
	bne     L08C5
;
; potionIsActive = 1;
;
	lda     #$01
	sta     _potionIsActive
;
; potionMoveCounter = 0;
;
	lda     #$00
	sta     _potionMoveCounter
;
; potionY = playerY + 6;
;
	lda     _playerY
	clc
	adc     #$06
	sta     _potionY
;
; if ( playerDir == PAD_RIGHT ) {
;
	lda     _playerDir
	cmp     #$80
	bne     L0A0C
;
; potionX = playerX + 12;
;
	lda     _playerX
	clc
	adc     #$0C
;
; } else {
;
	jmp     L0A08
;
; potionX = playerX - 4;
;
L0A0C:	lda     _playerX
	sec
	sbc     #$04
L0A08:	sta     _potionX
;
; potionDirection = playerDir;
;
	lda     _playerDir
	sta     _potionDirection
;
; potionVerticalVel = POTION_INIT_VERTICAL_VEL;
;
	lda     #$02
	sta     _potionVerticalVel
;
; ++potionTossTimer;
;
	inc     _potionTossTimer
;
; }
;
L08C5:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ updatePotionMovement (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updatePotionMovement: near

.segment	"CODE"

;
; u8 potionCollided = 0;
;
	lda     #$00
	jsr     pusha
;
; if ( potionTossTimer > 0 ) {
;
	lda     _potionTossTimer
	beq     L08E1
;
; ++potionTossTimer;
;
	inc     _potionTossTimer
;
; if ( potionTossTimer >= POTION_TOSS_WAIT_TIME ) {
;
	lda     _potionTossTimer
	cmp     #$3C
	bcc     L08E1
;
; potionTossTimer = 0;
;
	lda     #$00
	sta     _potionTossTimer
;
; if ( potionIsActive ) {
;
L08E1:	lda     _potionIsActive
	bne     L0A20
;
; }
;
	jmp     incsp1
;
; if ( potionDirection == PAD_LEFT ) {
;
L0A20:	lda     _potionDirection
	cmp     #$40
	bne     L0A0F
;
; potionX -= POTION_HORIZ_VELOCITY;
;
	lda     _potionX
	sec
	sbc     #$02
;
; } else {
;
	jmp     L0A0D
;
; potionX += POTION_HORIZ_VELOCITY;
;
L0A0F:	lda     #$02
	clc
	adc     _potionX
L0A0D:	sta     _potionX
;
; if ( ( potionX <= 8 ) || ( potionX >= 248 ) ) {
;
	cmp     #$09
	bcc     L0A10
	lda     _potionX
	cmp     #$F8
	bcc     L0A11
;
; potionCollided = 1;
;
L0A10:	lda     #$01
	ldy     #$00
	sta     (sp),y
;
; if ( potionVerticalVel > 0 ) {
;
L0A11:	lda     _potionVerticalVel
	sec
	sbc     #$01
	bvs     L08F8
	eor     #$80
L08F8:	bpl     L08F5
;
; if ( smallCollideCheckVertical(potionX, potionY + 8, PAD_UP) == TILE_ALLCOLLIDE ) { 
;
	jsr     decsp2
	lda     _potionX
	ldy     #$01
	sta     (sp),y
	lda     _potionY
	clc
	adc     #$08
	dey
	sta     (sp),y
	lda     #$10
	jsr     _smallCollideCheckVertical
	cmp     #$01
	bne     L0906
;
; potionCollided = 1;    
;
	ldy     #$00
	sta     (sp),y
;
; } else {
;
	jmp     L0A16
;
; if ( smallCollideCheckVertical(potionX, potionY, PAD_DOWN) == TILE_ALLCOLLIDE ) { 
;
L08F5:	jsr     decsp2
	lda     _potionX
	ldy     #$01
	sta     (sp),y
	lda     _potionY
	dey
	sta     (sp),y
	lda     #$20
	jsr     _smallCollideCheckVertical
	cmp     #$01
	bne     L0906
;
; potionCollided = 1;    
;
	ldy     #$00
	sta     (sp),y
;
; } else {
;
	jmp     L0A16
;
; potionY -= potionVerticalVel;
;
L0906:	lda     _potionVerticalVel
	eor     #$FF
	sec
	adc     _potionY
	sta     _potionY
;
; if ( potionY >= 240 ) {
;
L0A16:	lda     _potionY
	cmp     #$F0
	bcc     L0A17
;
; potionCollided = 1;
;
	lda     #$01
	ldy     #$00
	sta     (sp),y
;
; if ( ( potionVerticalVel >= -3 ) && ( potionMoveCounter == 3 ) ) {
;
L0A17:	lda     _potionVerticalVel
	sec
	sbc     #$FD
	bvs     L0919
	eor     #$80
L0919:	bpl     L0A1C
	lda     _potionMoveCounter
	cmp     #$03
	bne     L0A1C
;
; potionVerticalVel -= 1; 
;
	dec     _potionVerticalVel
;
; potionMoveCounter = 0;
;
	lda     #$00
	sta     _potionMoveCounter
;
; ++potionMoveCounter;
;
L0A1C:	inc     _potionMoveCounter
;
; if ( potionCollided ) {
;
	ldy     #$00
	lda     (sp),y
	beq     L0923
;
; potionIsActive = 0;
;
	sty     _potionIsActive
;
; potionX = -8;
;
	lda     #$F8
	sta     _potionX
;
; potionY = -8;
;
	sta     _potionY
;
; }
;
L0923:	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ simpleUpdatePotionMovement (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_simpleUpdatePotionMovement: near

.segment	"CODE"

;
; u8 potionCollided = 0;
;
	lda     #$00
	jsr     pusha
;
; if ( potionIsActive ) {
;
	lda     _potionIsActive
	beq     L093E
;
; if ( potionDirection == PAD_LEFT ) {
;
	lda     _potionDirection
	cmp     #$40
	bne     L0A22
;
; potionX -= POTION_HORIZ_VELOCITY;
;
	lda     _potionX
	sec
	sbc     #$02
;
; } else {
;
	jmp     L0A21
;
; potionX += POTION_HORIZ_VELOCITY;
;
L0A22:	lda     #$02
	clc
	adc     _potionX
L0A21:	sta     _potionX
;
; if ( ( potionX <= 8 ) || ( potionX >= 248 ) ) {
;
	cmp     #$09
	bcc     L0A23
	lda     _potionX
	cmp     #$F8
	bcc     L0A24
;
; potionCollided = 1;
;
L0A23:	lda     #$01
	ldy     #$00
	sta     (sp),y
;
; ++potionMoveCounter;
;
L0A24:	inc     _potionMoveCounter
;
; if ( potionCollided ) {
;
	ldy     #$00
	lda     (sp),y
	beq     L093E
;
; killPotion();
;
	jsr     _killPotion
;
; }
;
L093E:	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; memcpy(palSprites, paldat, 16);
;
	ldy     #$0F
L094D:	lda     _paldat,y
	sta     _palSprites,y
	dey
	bpl     L094D
;
; memcpy(palBG, paldat + 16, 4);
;
	ldy     #$03
L0952:	lda     _paldat+16,y
	sta     _palBG,y
	dey
	bpl     L0952
;
; pal_spr(palSprites);
;
	lda     #<(_palSprites)
	ldx     #>(_palSprites)
	jsr     _pal_spr
;
; pal_bg(palBG);
;
	lda     #<(_palBG)
	ldx     #>(_palBG)
	jsr     _pal_bg
;
; vram_adr(NAMETABLE_A); //unpack nametable into VRAM
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(map1); 
;
	lda     #<(_map1)
	ldx     #>(_map1)
	jsr     _vram_unrle
;
; ppu_on_all(); //enable rendering
;
	jsr     _ppu_on_all
;
; playerX = 0;
;
	lda     #$00
	sta     _playerX
;
; playerY = 0;
;
	sta     _playerY
;
; playerDir = PAD_LEFT;
;
	lda     #$40
	sta     _playerDir
;
; touch = 0; // collision flag
;
	lda     #$00
	sta     _touch
;
; frameCount = 0; // frame counter
;
	sta     _frameCount
;
; playerFrame = 0;
;
	sta     _playerFrame
;
; setSpriteFrame(playerSpriteData, playerFrames[playerFrame]);
;
	lda     #<(_playerSpriteData)
	ldx     #>(_playerSpriteData)
	jsr     pushax
	ldx     #$00
	lda     _playerFrame
	jsr     aslax2
	clc
	adc     #<(_playerFrames)
	tay
	txa
	adc     #>(_playerFrames)
	tax
	tya
	jsr     _setSpriteFrame
;
; setupMap();
;
	jsr     _setupMap
;
; ppu_wait_frame(); // wait for next TV frame
;
L096D:	jsr     _ppu_wait_frame
;
; oamSpriteIndex = 0;
;
	lda     #$00
	sta     _oamSpriteIndex
;
; i = 0;
;
	sta     _i
;
; sprPriorityToggle = frameCount & 0xFE;
;
	lda     _frameCount
	and     #$FE
	sta     _sprPriorityToggle
;
; pad = pad_poll(i);
;
	lda     _i
	jsr     _pad_poll
	sta     _pad
;
; updatePlayerSprite();
;
	jsr     _updatePlayerSprite
;
; updateEnemySprites();
;
	jsr     _updateEnemySprites
;
; updatePotionSprite();
;
	jsr     _updatePotionSprite
;
; spriteCount();
;
	jsr     _spriteCount
;
; updateEnemyMovement();
;
	jsr     _updateEnemyMovement
;
; playerMoveHorizontal();
;
	jsr     _playerMoveHorizontal
;
; updatePlayerVerticalMovement();
;
	jsr     _updatePlayerVerticalMovement
;
; updatePlayerAttack();
;
	jsr     _updatePlayerAttack
;
; updatePotionMovement();
;
	jsr     _updatePotionMovement
;
; enemyColliding = 0;
;
	lda     #$00
	sta     _enemyColliding
;
; four_Sides(playerX, playerY);
;
	lda     _playerX
	jsr     pusha
	lda     _playerY
	jsr     _four_Sides
;
; enemyCollideCheck();
;
	jsr     _enemyCollideCheck
;
; playerEnemyColliding = enemyColliding;
;
	lda     _enemyColliding
	sta     _playerEnemyColliding
;
; potionEnemyCollideCheck();
;
	jsr     _potionEnemyCollideCheck
;
; if ( playerEnemyColliding ) {
;
	lda     _playerEnemyColliding
	beq     L098D
;
; setSpritePalette(playerSpriteData, 0x0);
;
	lda     #<(_playerSpriteData)
	ldx     #>(_playerSpriteData)
	jsr     pushax
	lda     #$00
;
; } else {
;
	jmp     L0A25
;
; setSpritePalette(playerSpriteData, 0x3);
;
L098D:	lda     #<(_playerSpriteData)
	ldx     #>(_playerSpriteData)
	jsr     pushax
	lda     #$03
L0A25:	jsr     _setSpritePalette
;
; oam_hide_rest(oamSpriteIndex);
;
	lda     _oamSpriteIndex
	jsr     _oam_hide_rest
;
; ++frameCount;
;
	inc     _frameCount
;
; while ( 1 )
;
	jmp     L096D

.endproc

