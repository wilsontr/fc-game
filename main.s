;
; File generated by cc65 v 2.16 - Git N/A
;
	.fopt		compiler,"cc65 v 2.16 - Git N/A"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_memcpy
	.import		_pal_bg
	.import		_pal_spr
	.import		_ppu_wait_frame
	.import		_ppu_on_all
	.import		_oam_meta_spr
	.import		_oam_hide_rest
	.import		_sfx_play
	.import		_pad_poll
	.import		_set_vram_update
	.import		_vram_adr
	.import		_vram_fill
	.import		_vram_unrle
	.export		_newmap
	.export		_newmap_coll
	.export		_oam_off
	.import		_paldat
	.export		_playerFrames
	.export		_glueSpriteDataTemplate
	.export		_glueTileData
	.export		_enemyData
	.export		_enemyFrames
	.export		_enemySpriteDataTemplate
	.export		_setupMap
	.export		_setSpriteFrame
	.export		_setSpritePalette
	.export		_setSpritePriority
	.export		_flipSprite
	.export		_spriteCount
	.export		_updateEnemySprites
	.export		_updateGlueSprites
	.export		_updatePlayerSprite
	.export		_drawScoreboard
	.export		_updateListData
	.export		_updateList
	.export		_updateScoreboard
	.export		_four_Sides
	.export		_four_SidesSmall
	.export		_getCollisionIndex
	.export		_smallCollideCheckVertical
	.export		_collideCheckVertical
	.export		_collideCheckHorizontal
	.export		_bgHorizCollideCheck
	.export		_checkPlayerLadderCollision
	.export		_bgVertCollideCheck
	.export		_enemyCollideCheck
	.export		_updateEnemyMovement
	.export		_updatePlayerJumpFall
	.export		_updatePlayerClimbing
	.export		_updatePlayerVerticalMovement
	.export		_updatePlayerHorizontalMovement
	.export		_tileUpdateListInit
	.export		_updatePlayerGlue
	.export		_updateGlues
	.export		_main

.segment	"DATA"

.segment	"ZEROPAGE"
_playerX:
	.byte	$00
_playerY:
	.byte	$00
_enemyIndex:
	.byte	$00
_enemyColliding:
	.byte	$00
.segment	"DATA"
_playerStartX:
	.byte	$32
_playerStartY:
	.byte	$32
_spriteFlickerIndex:
	.byte	$00
_sprPriorityToggle:
	.byte	$00
_playerFrame:
	.byte	$00
_playerJumpCounter:
	.byte	$00
_playerState:
	.byte	$00
_playerVertVel:
	.byte	$00
_jumpButtonReset:
	.byte	$01
_glueButtonReset:
	.byte	$01
_playerSpriteData:
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$09
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$19
	.byte	$03
	.byte	$80
_enemySpriteCount:
	.byte	$00
_enemyCollidedIndex:
	.byte	$00
_updateListData:
	.byte	$60
	.byte	$20
	.byte	$04
	.byte	$A1
	.byte	$A2
	.byte	$A3
	.byte	$A4
	.byte	$FF

.segment	"RODATA"

_newmap:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$50
	.byte	$51
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$50
	.byte	$51
	.byte	$51
	.byte	$00
	.byte	$01
	.byte	$14
	.byte	$60
	.byte	$61
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$60
	.byte	$61
	.byte	$61
	.byte	$51
	.byte	$50
	.byte	$51
	.byte	$00
	.byte	$01
	.byte	$1A
	.byte	$60
	.byte	$61
	.byte	$61
	.byte	$60
	.byte	$61
	.byte	$50
	.byte	$01
	.byte	$05
	.byte	$51
	.byte	$00
	.byte	$01
	.byte	$18
	.byte	$60
	.byte	$01
	.byte	$04
	.byte	$50
	.byte	$50
	.byte	$51
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$62
	.byte	$63
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$50
	.byte	$51
	.byte	$00
	.byte	$00
	.byte	$50
	.byte	$01
	.byte	$07
	.byte	$51
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$62
	.byte	$63
	.byte	$62
	.byte	$63
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$60
	.byte	$61
	.byte	$00
	.byte	$00
	.byte	$60
	.byte	$01
	.byte	$07
	.byte	$61
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$72
	.byte	$73
	.byte	$62
	.byte	$63
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$41
	.byte	$01
	.byte	$07
	.byte	$50
	.byte	$51
	.byte	$00
	.byte	$00
	.byte	$62
	.byte	$01
	.byte	$02
	.byte	$63
	.byte	$64
	.byte	$65
	.byte	$62
	.byte	$01
	.byte	$02
	.byte	$63
	.byte	$00
	.byte	$00
	.byte	$62
	.byte	$63
	.byte	$62
	.byte	$63
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$41
	.byte	$01
	.byte	$07
	.byte	$60
	.byte	$61
	.byte	$00
	.byte	$00
	.byte	$72
	.byte	$01
	.byte	$02
	.byte	$73
	.byte	$74
	.byte	$75
	.byte	$72
	.byte	$01
	.byte	$02
	.byte	$73
	.byte	$00
	.byte	$00
	.byte	$72
	.byte	$73
	.byte	$62
	.byte	$63
	.byte	$00
	.byte	$01
	.byte	$13
	.byte	$64
	.byte	$65
	.byte	$00
	.byte	$50
	.byte	$01
	.byte	$03
	.byte	$51
	.byte	$41
	.byte	$41
	.byte	$62
	.byte	$63
	.byte	$00
	.byte	$01
	.byte	$13
	.byte	$74
	.byte	$75
	.byte	$00
	.byte	$60
	.byte	$01
	.byte	$03
	.byte	$61
	.byte	$41
	.byte	$41
	.byte	$62
	.byte	$63
	.byte	$41
	.byte	$01
	.byte	$09
	.byte	$43
	.byte	$44
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$41
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$41
	.byte	$41
	.byte	$62
	.byte	$63
	.byte	$41
	.byte	$01
	.byte	$09
	.byte	$43
	.byte	$44
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$41
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$41
	.byte	$41
	.byte	$62
	.byte	$63
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$43
	.byte	$44
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$41
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$41
	.byte	$41
	.byte	$62
	.byte	$63
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$43
	.byte	$44
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$41
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$41
	.byte	$41
	.byte	$62
	.byte	$63
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$41
	.byte	$01
	.byte	$03
	.byte	$43
	.byte	$44
	.byte	$41
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$41
	.byte	$01
	.byte	$05
	.byte	$62
	.byte	$63
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$41
	.byte	$01
	.byte	$03
	.byte	$43
	.byte	$44
	.byte	$41
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$41
	.byte	$01
	.byte	$05
	.byte	$72
	.byte	$73
	.byte	$62
	.byte	$01
	.byte	$02
	.byte	$63
	.byte	$50
	.byte	$51
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$43
	.byte	$44
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$41
	.byte	$41
	.byte	$72
	.byte	$01
	.byte	$04
	.byte	$73
	.byte	$60
	.byte	$61
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$43
	.byte	$44
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$41
	.byte	$41
	.byte	$62
	.byte	$63
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$41
	.byte	$01
	.byte	$11
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$41
	.byte	$41
	.byte	$62
	.byte	$63
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$41
	.byte	$01
	.byte	$11
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$41
	.byte	$41
	.byte	$62
	.byte	$63
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$41
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$41
	.byte	$41
	.byte	$62
	.byte	$63
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$41
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$41
	.byte	$41
	.byte	$62
	.byte	$63
	.byte	$41
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$41
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$41
	.byte	$41
	.byte	$62
	.byte	$63
	.byte	$41
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$41
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$41
	.byte	$41
	.byte	$62
	.byte	$63
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$41
	.byte	$01
	.byte	$03
	.byte	$43
	.byte	$44
	.byte	$41
	.byte	$01
	.byte	$07
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$41
	.byte	$41
	.byte	$62
	.byte	$63
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$41
	.byte	$01
	.byte	$03
	.byte	$43
	.byte	$44
	.byte	$41
	.byte	$01
	.byte	$07
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$41
	.byte	$41
	.byte	$62
	.byte	$63
	.byte	$00
	.byte	$01
	.byte	$0D
	.byte	$43
	.byte	$44
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$41
	.byte	$41
	.byte	$72
	.byte	$73
	.byte	$00
	.byte	$01
	.byte	$0D
	.byte	$43
	.byte	$44
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$41
	.byte	$41
	.byte	$62
	.byte	$63
	.byte	$41
	.byte	$01
	.byte	$1D
	.byte	$72
	.byte	$73
	.byte	$41
	.byte	$01
	.byte	$1C
	.byte	$41
	.byte	$01
	.byte	$00
_newmap_coll:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$07
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$07
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$07
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_playerFrames:
	.byte	$08
	.byte	$09
	.byte	$18
	.byte	$19
	.byte	$28
	.byte	$29
	.byte	$38
	.byte	$39
	.byte	$68
	.byte	$69
	.byte	$78
	.byte	$79
	.byte	$48
	.byte	$49
	.byte	$58
	.byte	$59
_glueSpriteDataTemplate:
	.byte	$00
	.byte	$00
	.byte	$46
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$47
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$56
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$57
	.byte	$00
	.byte	$80
_glueTileData:
	.byte	$46
	.byte	$47
	.byte	$56
	.byte	$57
_enemyFrames:
	.byte	$06
	.byte	$07
	.byte	$16
	.byte	$17
	.byte	$26
	.byte	$27
	.byte	$36
	.byte	$37
_enemySpriteDataTemplate:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$00
	.byte	$03
	.byte	$80
_tileUpdateListInit:
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$20
	.byte	$01
	.byte	$00
	.byte	$20
	.byte	$20
	.byte	$00
	.byte	$20
	.byte	$21
	.byte	$00
	.byte	$FF

.segment	"BSS"

.segment	"ZEROPAGE"
.segment	"BSS"
.segment	"ZEROPAGE"
_oam_off:
	.res	1,$00
.segment	"ZEROPAGE"
_frameCount:
	.res	1,$00
.segment	"ZEROPAGE"
_i:
	.res	1,$00
.segment	"ZEROPAGE"
_collisionIndex:
	.res	2,$00
.segment	"ZEROPAGE"
_leftSide:
	.res	1,$00
.segment	"ZEROPAGE"
_rightSide:
	.res	1,$00
.segment	"ZEROPAGE"
_topSide:
	.res	1,$00
.segment	"ZEROPAGE"
_bottomSide:
	.res	1,$00
.segment	"ZEROPAGE"
_potionX:
	.res	1,$00
.segment	"ZEROPAGE"
_potionY:
	.res	1,$00
.segment	"ZEROPAGE"
_potionTossTimer:
	.res	1,$00
.segment	"BSS"
_collisionMap:
	.res	2,$00
.segment	"BSS"
_pad:
	.res	1,$00
.segment	"BSS"
_oamSpriteIndex:
	.res	1,$00
.segment	"BSS"
_touch:
	.res	1,$00
.segment	"BSS"
_palSprites:
	.res	4,$00
.segment	"BSS"
_palBG:
	.res	4,$00
.segment	"BSS"
_horizontalCollideCheck:
	.res	1,$00
.segment	"BSS"
_verticalCollideCheck:
	.res	1,$00
.segment	"BSS"
_collideBottom:
	.res	1,$00
.segment	"BSS"
_collisionLeft:
	.res	1,$00
.segment	"BSS"
_collisionRight:
	.res	1,$00
.segment	"BSS"
_playerDir:
	.res	1,$00
.segment	"BSS"
_playerEnemyColliding:
	.res	1,$00
.segment	"BSS"
_nametableUpdateList:
	.res	2,$00
.segment	"BSS"
_glueData:
	.res	110,$00
.segment	"BSS"
_gluePointer:
	.res	2,$00
.segment	"BSS"
_numEnemies:
	.res	1,$00
.segment	"BSS"
_enemyTop:
	.res	1,$00
.segment	"BSS"
_enemyBottom:
	.res	1,$00
.segment	"BSS"
_enemyLeft:
	.res	1,$00
.segment	"BSS"
_enemyRight:
	.res	1,$00
.segment	"BSS"
_enemyData:
	.res	48,$00
.segment	"BSS"
_enemySpriteData:
	.res	170,$00
.segment	"BSS"
_currentEnemy:
	.res	2,$00
.segment	"BSS"
_sSpriteIndex:
	.res	1,$00
.segment	"BSS"
_sFrameIndex:
	.res	1,$00
.segment	"BSS"
_updateList:
	.res	8,$00
.segment	"BSS"
_tileUpdateList:
	.res	10,$00

; ---------------------------------------------------------------
; void __near__ setupMap (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_setupMap: near

.segment	"RODATA"

L0336:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$40
	.res	2,$00

.segment	"CODE"

;
; u8 mapX = 0;
;
	jsr     decsp2
	lda     #$00
	jsr     pusha
;
; u8 mapY = 0;
;
	jsr     pusha
;
; u8 index = 0;
;
	jsr     pusha
;
; enemy newEnemy = { 0, 0, 0, PAD_LEFT };
;
	jsr     decsp6
	ldy     #$05
L033B:	lda     L0336,y
	sta     (sp),y
	dey
	bpl     L033B
;
; potionTossTimer = 0;
;
	lda     #$00
	sta     _potionTossTimer
;
; potionX = -8;
;
	lda     #$F8
	sta     _potionX
;
; potionY = -8;
;
	sta     _potionY
;
; collisionMap = (u8 *) newmap_coll;
;
	lda     #<(_newmap_coll)
	sta     _collisionMap
	lda     #>(_newmap_coll)
	sta     _collisionMap+1
;
; enemyIndex = 0;
;
	lda     #$00
	sta     _enemyIndex
;
; for ( index = 0; index < sizeof(MAX_GLUE_COUNT); ++index ) {
;
	ldy     #$06
L082D:	sta     (sp),y
	cmp     #$02
	bcs     L0830
;
; gluePointer = &(glueData[index]);
;
	lda     (sp),y
	jsr     pusha0
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_glueData)
	tay
	txa
	adc     #>(_glueData)
	tax
	tya
	sta     _gluePointer
	stx     _gluePointer+1
;
; gluePointer->isActive = 0;
;
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	ldy     #$03
	sta     (ptr1),y
;
; for ( index = 0; index < sizeof(MAX_GLUE_COUNT); ++index ) {
;
	ldy     #$06
	clc
	lda     #$01
	adc     (sp),y
	jmp     L082D
;
; for ( index = 0; index < COLLISION_MAP_SIZE; ++index ) {
;
L0830:	lda     #$00
L082F:	sta     (sp),y
	cmp     #$CC
	jcs     L0837
;
; collByte = collisionMap[index];
;
	lda     _collisionMap
	sta     ptr1
	lda     _collisionMap+1
	sta     ptr1+1
	lda     (sp),y
	tay
	lda     (ptr1),y
	ldy     #$0A
	sta     (sp),y
;
; if ( collByte == TILE_PLAYERSTART ) {
;
	cmp     #$03
	bne     L0832
;
; playerStartX = mapX << 4;
;
	ldy     #$08
	lda     (sp),y
	asl     a
	asl     a
	asl     a
	asl     a
	sta     _playerStartX
;
; playerStartY = (mapY << 4) - 1;
;
	dey
	lda     (sp),y
	asl     a
	asl     a
	asl     a
	asl     a
	sec
	sbc     #$01
	sta     _playerStartY
;
; } else if ( ( collByte == TILE_ENEMY1START_RIGHT ) || ( collByte == TILE_ENEMY1START_LEFT ) ) {
;
	jmp     L0369
L0832:	lda     (sp),y
	cmp     #$05
	beq     L0833
	cmp     #$04
	jne     L0369
;
; enemyData[enemyIndex] = newEnemy;
;
L0833:	ldx     #$00
	lda     _enemyIndex
	jsr     mulax6
	clc
	adc     #<(_enemyData)
	tay
	txa
	adc     #>(_enemyData)
	tax
	tya
	jsr     pushax
	lda     sp
	ldx     sp+1
	clc
	adc     #$02
	bcc     L0371
	inx
L0371:	jsr     pushax
	ldx     #$00
	lda     #$06
	jsr     _memcpy
;
; enemyData[enemyIndex].x = mapX << 4;
;
	ldx     #$00
	lda     _enemyIndex
	jsr     mulax6
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	ldy     #$08
	lda     (sp),y
	asl     a
	asl     a
	asl     a
	asl     a
	ldy     #$00
	sta     (ptr1),y
;
; enemyData[enemyIndex].y = (mapY << 4) - 1;
;
	ldx     #$00
	lda     _enemyIndex
	jsr     mulax6
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	ldy     #$07
	lda     (sp),y
	asl     a
	asl     a
	asl     a
	asl     a
	sec
	sbc     #$01
	ldy     #$01
	sta     (ptr1),y
;
; enemyData[enemyIndex].direction = ( collByte == TILE_ENEMY1START_RIGHT ) ? PAD_RIGHT : PAD_LEFT;
;
	ldx     #$00
	lda     _enemyIndex
	jsr     mulax6
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	ldy     #$0A
	lda     (sp),y
	cmp     #$05
	bne     L0834
	lda     #$80
	jmp     L0835
L0834:	lda     #$40
L0835:	ldy     #$03
	sta     (ptr1),y
;
; enemyData[enemyIndex].collidingWithPotion = 0;
;
	ldx     #$00
	lda     _enemyIndex
	jsr     mulax6
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	lda     #$00
	iny
	sta     (ptr1),y
;
; enemyData[enemyIndex].state = ENEMY_STATE_NORMAL;
;
	tax
	lda     _enemyIndex
	jsr     mulax6
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	lda     #$00
	iny
	sta     (ptr1),y
;
; for ( k = 0; k < ENEMY_DATA_SIZE; ++k ) {
;
	ldy     #$09
L082E:	sta     (sp),y
	lda     (sp),y
	cmp     #$11
	bcs     L0836
;
; enemySpriteData[enemyIndex][k] = enemySpriteDataTemplate[k];
;
	lda     _enemyIndex
	jsr     pusha0
	lda     #$11
	jsr     tosmula0
	clc
	adc     #<(_enemySpriteData)
	sta     ptr1
	txa
	adc     #>(_enemySpriteData)
	sta     ptr1+1
	ldy     #$09
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L082C
	inx
L082C:	jsr     pushax
	ldy     #$0B
	lda     (sp),y
	tay
	lda     _enemySpriteDataTemplate,y
	ldy     #$00
	jsr     staspidx
;
; for ( k = 0; k < ENEMY_DATA_SIZE; ++k ) {
;
	ldy     #$09
	clc
	lda     #$01
	adc     (sp),y
	jmp     L082E
;
; setSpriteFrame(enemySpriteData[enemyIndex], enemyFrames[0]);
;
L0836:	lda     _enemyIndex
	jsr     pusha0
	lda     #$11
	jsr     tosmula0
	clc
	adc     #<(_enemySpriteData)
	tay
	txa
	adc     #>(_enemySpriteData)
	tax
	tya
	jsr     pushax
	lda     #<(_enemyFrames)
	ldx     #>(_enemyFrames)
	jsr     _setSpriteFrame
;
; ++enemyIndex;
;
	inc     _enemyIndex
;
; ++mapX;
;
L0369:	ldy     #$08
	clc
	lda     #$01
	adc     (sp),y
	sta     (sp),y
;
; if ( mapX >= 16 ) {
;
	cmp     #$10
	bcc     L0357
;
; mapX = 0;
;
	lda     #$00
	sta     (sp),y
;
; ++mapY;
;
	dey
	clc
	lda     #$01
	adc     (sp),y
	sta     (sp),y
;
; for ( index = 0; index < COLLISION_MAP_SIZE; ++index ) {
;
L0357:	ldy     #$06
	clc
	lda     #$01
	adc     (sp),y
	jmp     L082F
;
; numEnemies = enemyIndex;
;
L0837:	lda     _enemyIndex
	sta     _numEnemies
;
; }
;
	ldy     #$0B
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ setSpriteFrame (__near__ unsigned char *, __near__ const unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_setSpriteFrame: near

.segment	"CODE"

;
; void __fastcall__ setSpriteFrame(u8 *sprite, const u8 *frame) {
;
	jsr     pushax
;
; sSpriteIndex = 2;
;
	lda     #$02
	sta     _sSpriteIndex
;
; sFrameIndex = 0;
;
	lda     #$00
	sta     _sFrameIndex
;
; *(sprite + 2) = *(frame);
;
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     #$02
	bcc     L03AB
	inx
L03AB:	jsr     pushax
	ldy     #$03
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	jsr     staspidx
;
; *(sprite + 6) = *(frame + 1);
;
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     #$06
	bcc     L03B0
	inx
L03B0:	jsr     pushax
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	dey
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	dey
	jsr     staspidx
;
; *(sprite + 10) = *(frame + 2);
;
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     #$0A
	bcc     L03B6
	inx
L03B6:	jsr     pushax
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
;
; *(sprite + 14) = *(frame + 3);
;
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     #$0E
	bcc     L03BC
	inx
L03BC:	jsr     pushax
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	iny
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
;
; }
;
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ setSpritePalette (__near__ unsigned char *, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_setSpritePalette: near

.segment	"CODE"

;
; void __fastcall__ setSpritePalette(u8 *sprite, u8 palette) {
;
	jsr     pusha
;
; for ( i = 3; i <= 15; i = i + 4 ) {
;
	jsr     decsp1
	lda     #$03
	ldy     #$00
L0838:	sta     (sp),y
	cmp     #$10
	bcs     L03C2
;
; sprite[i] &= ~(0x3);
;
	lda     (sp),y
	clc
	ldy     #$02
	adc     (sp),y
	sta     ptr1
	lda     #$00
	iny
	adc     (sp),y
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	and     #$FC
	sta     (ptr1),y
;
; sprite[i] |= palette;
;
	lda     (sp),y
	clc
	ldy     #$02
	adc     (sp),y
	pha
	lda     #$00
	iny
	adc     (sp),y
	tax
	pla
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     ptr1
	ldy     #$03
	lda     (sp),y
	ora     ptr1
	ldy     #$00
	jsr     staspidx
;
; for ( i = 3; i <= 15; i = i + 4 ) {
;
	ldy     #$00
	lda     (sp),y
	clc
	adc     #$04
	jmp     L0838
;
; }
;
L03C2:	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ setSpritePriority (__near__ unsigned char *, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_setSpritePriority: near

.segment	"CODE"

;
; void __fastcall__ setSpritePriority(u8 *sprite, u8 priority) {
;
	jsr     pusha
;
; if ( priority ) {
;
	ldy     #$00
	lda     (sp),y
	beq     L03D3
;
; sprite[3] |= OAM_BEHIND;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$03
	lda     (ptr1),y
	ora     #$20
	sta     (ptr1),y
;
; sprite[7] |= OAM_BEHIND;
;
	dey
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$07
	lda     (ptr1),y
	ora     #$20
	sta     (ptr1),y
;
; sprite[11] |= OAM_BEHIND;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$0B
	lda     (ptr1),y
	ora     #$20
	sta     (ptr1),y
;
; sprite[15] |= OAM_BEHIND;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$0F
	lda     (ptr1),y
	ora     #$20
;
; } else {
;
	jmp     L0839
;
; sprite[3] &= ~OAM_BEHIND;
;
L03D3:	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$03
	lda     (ptr1),y
	and     #$DF
	sta     (ptr1),y
;
; sprite[7] &= ~OAM_BEHIND;
;
	dey
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$07
	lda     (ptr1),y
	and     #$DF
	sta     (ptr1),y
;
; sprite[11] &= ~OAM_BEHIND;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$0B
	lda     (ptr1),y
	and     #$DF
	sta     (ptr1),y
;
; sprite[15] &= ~OAM_BEHIND;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$0F
	lda     (ptr1),y
	and     #$DF
L0839:	sta     (ptr1),y
;
; }
;
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ flipSprite (__near__ unsigned char *, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_flipSprite: near

.segment	"CODE"

;
; void __fastcall__ flipSprite(u8 *sprite, u8 flip) {
;
	jsr     pusha
;
; if ( flip ) {
;
	ldy     #$00
	lda     (sp),y
	jeq     L03EF
;
; sprite[0] = 8;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     #$08
	dey
	sta     (ptr1),y
;
; sprite[3] |= OAM_FLIP_H;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$03
	lda     (ptr1),y
	ora     #$40
	sta     (ptr1),y
;
; sprite[4] = 0;
;
	dey
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     #$00
	ldy     #$04
	sta     (ptr1),y
;
; sprite[7] |= OAM_FLIP_H;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$07
	lda     (ptr1),y
	ora     #$40
	sta     (ptr1),y
;
; sprite[8] = 8;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     #$08
	tay
	sta     (ptr1),y
;
; sprite[11] |= OAM_FLIP_H;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$0B
	lda     (ptr1),y
	ora     #$40
	sta     (ptr1),y
;
; sprite[12] = 0;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     #$00
	ldy     #$0C
	sta     (ptr1),y
;
; sprite[15] |= OAM_FLIP_H;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$0F
	lda     (ptr1),y
	ora     #$40
;
; } else {
;
	jmp     L083A
;
; sprite[0] = 0;
;
L03EF:	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     #$00
	dey
	sta     (ptr1),y
;
; sprite[3] &= ~OAM_FLIP_H;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$03
	lda     (ptr1),y
	and     #$BF
	sta     (ptr1),y
;
; sprite[4] = 8;
;
	dey
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     #$08
	ldy     #$04
	sta     (ptr1),y
;
; sprite[7] &= ~OAM_FLIP_H;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$07
	lda     (ptr1),y
	and     #$BF
	sta     (ptr1),y
;
; sprite[8] = 0;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     #$00
	ldy     #$08
	sta     (ptr1),y
;
; sprite[11] &= ~OAM_FLIP_H;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$0B
	lda     (ptr1),y
	and     #$BF
	sta     (ptr1),y
;
; sprite[12] = 8;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     #$08
	ldy     #$0C
	sta     (ptr1),y
;
; sprite[15] &= ~OAM_FLIP_H;  
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$0F
	lda     (ptr1),y
	and     #$BF
L083A:	sta     (ptr1),y
;
; }
;
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ spriteCount (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_spriteCount: near

.segment	"CODE"

;
; if ( ++enemySpriteCount >= numEnemies ) {
;
	inc     _enemySpriteCount
	lda     _enemySpriteCount
	cmp     _numEnemies
	bcc     L0423
;
; enemySpriteCount = 0;
;
	lda     #$00
	sta     _enemySpriteCount
;
; }
;
L0423:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ updateEnemySprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updateEnemySprites: near

.segment	"CODE"

;
; for ( i = 0; i < numEnemies; ++i ) {
;
	lda     #$00
	sta     _i
L083C:	lda     _i
	cmp     _numEnemies
	bcc     L083F
;
; }
;
	rts
;
; spriteCount();
;
L083F:	jsr     _spriteCount
;
; spriteFlickerIndex = enemySpriteCount;
;
	lda     _enemySpriteCount
	sta     _spriteFlickerIndex
;
; currentEnemy = &(enemyData[spriteFlickerIndex]);
;
	ldx     #$00
	lda     _spriteFlickerIndex
	jsr     mulax6
	clc
	adc     #<(_enemyData)
	tay
	txa
	adc     #>(_enemyData)
	tax
	tya
	sta     _currentEnemy
	stx     _currentEnemy+1
;
; if ( currentEnemy->state == ENEMY_STATE_NORMAL ) {
;
	sta     ptr1
	stx     ptr1+1
	ldy     #$05
	lda     (ptr1),y
	jne     L083E
;
; if ( ( frameCount & 0x0F ) == 0x0F ) {
;
	lda     _frameCount
	and     #$0F
	cmp     #$0F
	bne     L0439
;
; currentEnemy->frame ^= 1;
;
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	eor     #$01
	sta     (ptr1),y
;
; setSpriteFrame(enemySpriteData[spriteFlickerIndex], enemyFrames[currentEnemy->frame]);
;
	lda     _spriteFlickerIndex
	jsr     pusha0
	lda     #$11
	jsr     tosmula0
	clc
	adc     #<(_enemySpriteData)
	tay
	txa
	adc     #>(_enemySpriteData)
	tax
	tya
	jsr     pushax
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	ldy     #$02
	ldx     #$00
	lda     (ptr1),y
	jsr     aslax2
	clc
	adc     #<(_enemyFrames)
	tay
	txa
	adc     #>(_enemyFrames)
	tax
	tya
	jsr     _setSpriteFrame
;
; if ( currentEnemy->collidingWithPotion ) {
;
L0439:	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	ldy     #$04
	lda     (ptr1),y
	beq     L083D
;
; setSpritePalette(enemySpriteData[spriteFlickerIndex], 0x0);
;
	lda     _spriteFlickerIndex
	jsr     pusha0
	lda     #$11
	jsr     tosmula0
	clc
	adc     #<(_enemySpriteData)
	tay
	txa
	adc     #>(_enemySpriteData)
	tax
	tya
	jsr     pushax
	lda     #$00
;
; } else {
;
	jmp     L083B
;
; setSpritePalette(enemySpriteData[spriteFlickerIndex], 0x3);
;
L083D:	lda     _spriteFlickerIndex
	jsr     pusha0
	lda     #$11
	jsr     tosmula0
	clc
	adc     #<(_enemySpriteData)
	tay
	txa
	adc     #>(_enemySpriteData)
	tax
	tya
	jsr     pushax
	lda     #$03
L083B:	jsr     _setSpritePalette
;
; oamSpriteIndex = oam_meta_spr(currentEnemy->x, currentEnemy->y, oamSpriteIndex, enemySpriteData[spriteFlickerIndex]);    
;
	jsr     decsp3
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	ldy     #$02
	sta     (sp),y
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	dey
	lda     (ptr1),y
	sta     (sp),y
	lda     _oamSpriteIndex
	dey
	sta     (sp),y
	lda     _spriteFlickerIndex
	jsr     pusha0
	lda     #$11
	jsr     tosmula0
	clc
	adc     #<(_enemySpriteData)
	tay
	txa
	adc     #>(_enemySpriteData)
	tax
	tya
	jsr     _oam_meta_spr
	sta     _oamSpriteIndex
;
; for ( i = 0; i < numEnemies; ++i ) {
;
L083E:	inc     _i
	jmp     L083C

.endproc

; ---------------------------------------------------------------
; void __near__ updateGlueSprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updateGlueSprites: near

.segment	"CODE"

;
; for ( i = 0; i < MAX_GLUE_COUNT; ++i ) {
;
	lda     #$00
	sta     _i
L0840:	lda     _i
	cmp     #$05
	bcs     L0458
;
; gluePointer = &(glueData[i]);
;
	lda     _i
	jsr     pusha0
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_glueData)
	tay
	txa
	adc     #>(_glueData)
	tax
	tya
	sta     _gluePointer
	stx     _gluePointer+1
;
; if ( gluePointer->isActive == 1 ) {
;
	sta     ptr1
	stx     ptr1+1
	ldy     #$03
	lda     (ptr1),y
	cmp     #$01
	bne     L0841
;
; oamSpriteIndex = oam_meta_spr(gluePointer->x, gluePointer->y, oamSpriteIndex, glueSpriteDataTemplate); 
;
	jsr     decsp3
	lda     _gluePointer
	sta     ptr1
	lda     _gluePointer+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	ldy     #$02
	sta     (sp),y
	lda     _gluePointer
	sta     ptr1
	lda     _gluePointer+1
	sta     ptr1+1
	dey
	lda     (ptr1),y
	sta     (sp),y
	lda     _oamSpriteIndex
	dey
	sta     (sp),y
	lda     #<(_glueSpriteDataTemplate)
	ldx     #>(_glueSpriteDataTemplate)
	jsr     _oam_meta_spr
	sta     _oamSpriteIndex
;
; for ( i = 0; i < MAX_GLUE_COUNT; ++i ) {
;
L0841:	inc     _i
	jmp     L0840
;
; }
;
L0458:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ updatePlayerSprite (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updatePlayerSprite: near

.segment	"CODE"

;
; if ( playerState == PLAYER_STATE_NORMAL ) {
;
	lda     _playerState
	bne     L084A
;
; if ( ( pad & PAD_LEFT) || ( pad & PAD_RIGHT ) ) {
;
	lda     _pad
	and     #$40
	bne     L0846
	lda     _pad
	and     #$80
	beq     L0843
;
; if ( pad & PAD_RIGHT ) {
;
L0846:	lda     _pad
	and     #$80
	beq     L0847
;
; flipSprite(playerSpriteData, 1);
;
	lda     #<(_playerSpriteData)
	ldx     #>(_playerSpriteData)
	jsr     pushax
	lda     #$01
;
; } else if ( pad & PAD_LEFT ) {
;
	jmp     L0842
L0847:	lda     _pad
	and     #$40
	beq     L0848
;
; flipSprite(playerSpriteData, 0);
;
	lda     #<(_playerSpriteData)
	ldx     #>(_playerSpriteData)
	jsr     pushax
	lda     #$00
L0842:	jsr     _flipSprite
;
; if ( ( frameCount & PLAYER_WALK_ANIMATE_INTERVAL ) == PLAYER_WALK_ANIMATE_INTERVAL ) {
;
L0848:	lda     _frameCount
	and     #$07
	cmp     #$07
	bne     L0484
;
; playerFrame ^= 1;
;
	lda     _playerFrame
	eor     #$01
;
; playerFrame = PLAYER_FRAME_STANDING;
;
L0843:	sta     _playerFrame
;
; setSpriteFrame(playerSpriteData, playerFrames[playerFrame]);
;
L0484:	lda     #<(_playerSpriteData)
	ldx     #>(_playerSpriteData)
	jsr     pushax
	ldx     #$00
	lda     _playerFrame
	jsr     aslax2
	clc
	adc     #<(_playerFrames)
	tay
	txa
	adc     #>(_playerFrames)
	tax
	tya
;
; } else if ( playerState == PLAYER_STATE_JUMPING ) {
;
	jmp     L0844
L084A:	lda     _playerState
	cmp     #$03
	bne     L084C
;
; if ( pad & PAD_RIGHT ) {
;
	lda     _pad
	and     #$80
	beq     L084B
;
; flipSprite(playerSpriteData, 1);
;
	lda     #<(_playerSpriteData)
	ldx     #>(_playerSpriteData)
	jsr     pushax
	lda     #$01
;
; } else if ( pad & PAD_LEFT ) {
;
	jmp     L0845
L084B:	lda     _pad
	and     #$40
	beq     L0494
;
; flipSprite(playerSpriteData, 0);
;
	lda     #<(_playerSpriteData)
	ldx     #>(_playerSpriteData)
	jsr     pushax
	lda     #$00
L0845:	jsr     _flipSprite
;
; setSpriteFrame(playerSpriteData, playerFrames[PLAYER_FRAME_JUMPING]);
;
L0494:	lda     #<(_playerSpriteData)
	ldx     #>(_playerSpriteData)
	jsr     pushax
	lda     #<(_playerFrames+12)
	ldx     #>(_playerFrames+12)
;
; } else if ( playerState == PLAYER_STATE_CLIMBING ) {
;
	jmp     L0844
L084C:	lda     _playerState
	cmp     #$02
	bne     L049E
;
; if ( ( frameCount & PLAYER_WALK_ANIMATE_INTERVAL ) == PLAYER_WALK_ANIMATE_INTERVAL ) {
;
	lda     _frameCount
	and     #$07
	cmp     #$07
	bne     L04A0
;
; playerFrame ^= 1;
;
	lda     _playerFrame
	eor     #$01
	sta     _playerFrame
;
; flipSprite(playerSpriteData, playerFrame);
;
	lda     #<(_playerSpriteData)
	ldx     #>(_playerSpriteData)
	jsr     pushax
	lda     _playerFrame
	jsr     _flipSprite
;
; setSpriteFrame(playerSpriteData, playerFrames[PLAYER_FRAME_CLIMBING]);
;
L04A0:	lda     #<(_playerSpriteData)
	ldx     #>(_playerSpriteData)
	jsr     pushax
	lda     #<(_playerFrames+8)
	ldx     #>(_playerFrames+8)
L0844:	jsr     _setSpriteFrame
;
; oamSpriteIndex = oam_meta_spr(playerX, playerY, oamSpriteIndex, playerSpriteData); 
;
L049E:	jsr     decsp3
	lda     _playerX
	ldy     #$02
	sta     (sp),y
	lda     _playerY
	dey
	sta     (sp),y
	lda     _oamSpriteIndex
	dey
	sta     (sp),y
	lda     #<(_playerSpriteData)
	ldx     #>(_playerSpriteData)
	jsr     _oam_meta_spr
	sta     _oamSpriteIndex
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ drawScoreboard (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_drawScoreboard: near

.segment	"CODE"

;
; vram_adr(NTADR_A(0, 1));
;
	ldx     #$20
	txa
	jsr     _vram_adr
;
; vram_fill(0x10, 5);
;
	lda     #$10
	jsr     pusha
	ldx     #$00
	lda     #$05
	jmp     _vram_fill

.endproc

; ---------------------------------------------------------------
; void __near__ updateScoreboard (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updateScoreboard: near

.segment	"CODE"

;
; memcpy(updateList, updateListData, sizeof(updateListData));
;
	ldy     #$07
L04DE:	lda     _updateListData,y
	sta     _updateList,y
	dey
	bpl     L04DE
;
; set_vram_update(updateList);
;
	lda     #<(_updateList)
	ldx     #>(_updateList)
	jmp     _set_vram_update

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ four_Sides (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_four_Sides: near

.segment	"CODE"

;
; void __fastcall__ four_Sides(u8 originX, u8 originY) {
;
	jsr     pusha
;
; leftSide = originX + 1;
;
	ldy     #$01
	lda     (sp),y
	clc
	adc     #$01
	sta     _leftSide
;
; rightSide = originX + 15;
;
	lda     (sp),y
	clc
	adc     #$0F
	sta     _rightSide
;
; topSide = originY;
;
	dey
	lda     (sp),y
	sta     _topSide
;
; bottomSide = originY + 14;
;
	lda     (sp),y
	clc
	adc     #$0E
	sta     _bottomSide
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ four_SidesSmall (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_four_SidesSmall: near

.segment	"CODE"

;
; void __fastcall__ four_SidesSmall(u8 originX, u8 originY) {
;
	jsr     pusha
;
; leftSide = originX + 1;
;
	ldy     #$01
	lda     (sp),y
	clc
	adc     #$01
	sta     _leftSide
;
; rightSide = originX + 7;
;
	lda     (sp),y
	clc
	adc     #$07
	sta     _rightSide
;
; topSide = originY;
;
	dey
	lda     (sp),y
	sta     _topSide
;
; bottomSide = originY + 7;
;
	lda     (sp),y
	clc
	adc     #$07
	sta     _bottomSide
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ getCollisionIndex (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_getCollisionIndex: near

.segment	"CODE"

;
; void __fastcall__ getCollisionIndex(u8 screenX, u8 screenY) {
;
	jsr     pusha
;
; collisionIndex = ((screenX & 0xf0) >> 4) + (screenY & 0xf0);
;
	ldy     #$01
	lda     (sp),y
	ldx     #$00
	and     #$F0
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     (sp,x)
	and     #$F0
	clc
	adc     ptr1
	bcc     L084D
	inx
L084D:	sta     _collisionIndex
	stx     _collisionIndex+1
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ __fastcall__ smallCollideCheckVertical (unsigned char, unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_smallCollideCheckVertical: near

.segment	"CODE"

;
; u8 __fastcall__ smallCollideCheckVertical(u8 originX, u8 originY, u8 direction) {
;
	jsr     pusha
;
; leftSide = originX;
;
	ldy     #$02
	lda     (sp),y
	sta     _leftSide
;
; rightSide = originX + 8;
;
	lda     (sp),y
	clc
	adc     #$08
	sta     _rightSide
;
; topSide = originY;
;
	dey
	lda     (sp),y
	sta     _topSide
;
; bottomSide = originY + 8;
;
	lda     (sp),y
	clc
	adc     #$08
	sta     _bottomSide
;
; collisionIndex = 0;
;
	lda     #$00
	sta     _collisionIndex
	sta     _collisionIndex+1
;
; if ( direction & PAD_UP ) {
;
	dey
	lda     (sp),y
	and     #$10
	beq     L0850
;
; getCollisionIndex(rightSide, topSide);
;
	lda     _rightSide
	jsr     pusha
	lda     _topSide
	jsr     _getCollisionIndex
;
; if ( collisionMap[collisionIndex] != TILE_ALLCOLLIDE ) {
;
	lda     _collisionMap
	clc
	adc     _collisionIndex
	sta     ptr1
	lda     _collisionMap+1
	adc     _collisionIndex+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	cmp     #$01
	beq     L051D
;
; getCollisionIndex(leftSide, topSide);
;
	lda     _leftSide
	jsr     pusha
	lda     _topSide
;
; } else if ( direction & PAD_DOWN ) {
;
	jmp     L084E
L0850:	lda     (sp),y
	and     #$20
	beq     L051D
;
; getCollisionIndex(rightSide, bottomSide);
;
	lda     _rightSide
	jsr     pusha
	lda     _bottomSide
	jsr     _getCollisionIndex
;
; if ( collisionMap[collisionIndex] != TILE_ALLCOLLIDE ) {
;
	lda     _collisionMap
	clc
	adc     _collisionIndex
	sta     ptr1
	lda     _collisionMap+1
	adc     _collisionIndex+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	cmp     #$01
	beq     L051D
;
; getCollisionIndex(leftSide, bottomSide);
;
	lda     _leftSide
	jsr     pusha
	lda     _bottomSide
L084E:	jsr     _getCollisionIndex
;
; if ( collisionIndex ) {
;
L051D:	lda     _collisionIndex
	ora     _collisionIndex+1
	beq     L0523
;
; return collisionMap[collisionIndex]; 
;
	lda     _collisionMap
	clc
	adc     _collisionIndex
	sta     ptr1
	lda     _collisionMap+1
	adc     _collisionIndex+1
	sta     ptr1+1
	ldx     #$00
	lda     (ptr1,x)
	jmp     incsp3
;
; return 0;
;
L0523:	tax
;
; }
;
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ collideCheckVertical (unsigned char, unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_collideCheckVertical: near

.segment	"CODE"

;
; void __fastcall__ collideCheckVertical(u8 originX, u8 originY, u8 direction) {
;
	jsr     pusha
;
; leftSide = originX + 1;
;
	ldy     #$02
	lda     (sp),y
	clc
	adc     #$01
	sta     _leftSide
;
; rightSide = originX + 15;
;
	lda     (sp),y
	clc
	adc     #$0F
	sta     _rightSide
;
; topSide = originY + 1;
;
	dey
	lda     (sp),y
	clc
	adc     #$01
	sta     _topSide
;
; bottomSide = originY + 17;
;
	lda     (sp),y
	clc
	adc     #$11
	sta     _bottomSide
;
; collisionIndex = 0;
;
	lda     #$00
	sta     _collisionIndex
	sta     _collisionIndex+1
;
; if ( direction & PAD_UP ) {
;
	dey
	lda     (sp),y
	and     #$10
	beq     L0853
;
; getCollisionIndex(rightSide, topSide);
;
	lda     _rightSide
	jsr     pusha
	lda     _topSide
	jsr     _getCollisionIndex
;
; if ( collisionMap[collisionIndex] != TILE_ALLCOLLIDE )  {
;
	lda     _collisionMap
	clc
	adc     _collisionIndex
	sta     ptr1
	lda     _collisionMap+1
	adc     _collisionIndex+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	cmp     #$01
	beq     L0549
;
; getCollisionIndex(leftSide, topSide);
;
	lda     _leftSide
	jsr     pusha
	lda     _topSide
;
; } else if ( direction & PAD_DOWN ) {
;
	jmp     L0851
L0853:	lda     (sp),y
	and     #$20
	beq     L0549
;
; getCollisionIndex(rightSide, bottomSide);
;
	lda     _rightSide
	jsr     pusha
	lda     _bottomSide
	jsr     _getCollisionIndex
;
; if ( collisionMap[collisionIndex] != TILE_ALLCOLLIDE ) {
;
	lda     _collisionMap
	clc
	adc     _collisionIndex
	sta     ptr1
	lda     _collisionMap+1
	adc     _collisionIndex+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	cmp     #$01
	beq     L0549
;
; getCollisionIndex(leftSide, bottomSide);
;
	lda     _leftSide
	jsr     pusha
	lda     _bottomSide
L0851:	jsr     _getCollisionIndex
;
; verticalCollideCheck = collisionMap[collisionIndex]; 
;
L0549:	lda     _collisionMap
	clc
	adc     _collisionIndex
	sta     ptr1
	lda     _collisionMap+1
	adc     _collisionIndex+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     _verticalCollideCheck
;
; }
;
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ collideCheckHorizontal (unsigned char, unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_collideCheckHorizontal: near

.segment	"CODE"

;
; void __fastcall__ collideCheckHorizontal(u8 originX, u8 originY, u8 direction) {
;
	jsr     pusha
;
; leftSide = originX + 1;
;
	ldy     #$02
	lda     (sp),y
	clc
	adc     #$01
	sta     _leftSide
;
; rightSide = originX + 15;
;
	lda     (sp),y
	clc
	adc     #$0F
	sta     _rightSide
;
; topSide = originY + 4;
;
	dey
	lda     (sp),y
	clc
	adc     #$04
	sta     _topSide
;
; bottomSide = originY + 12;
;
	lda     (sp),y
	clc
	adc     #$0C
	sta     _bottomSide
;
; if ( direction & PAD_LEFT ) {
;
	dey
	lda     (sp),y
	and     #$40
	beq     L0856
;
; getCollisionIndex(leftSide, topSide);
;
	lda     _leftSide
	jsr     pusha
	lda     _topSide
	jsr     _getCollisionIndex
;
; if ( collisionMap[collisionIndex] == TILE_NOCOLLIDE ) {
;
	lda     _collisionMap
	clc
	adc     _collisionIndex
	sta     ptr1
	lda     _collisionMap+1
	adc     _collisionIndex+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	bne     L0570
;
; getCollisionIndex(leftSide, bottomSide);
;
	lda     _leftSide
;
; } else if ( direction & PAD_RIGHT ) {
;
	jmp     L0858
L0856:	lda     (sp),y
	and     #$80
	beq     L0570
;
; getCollisionIndex(rightSide, topSide);
;
	lda     _rightSide
	jsr     pusha
	lda     _topSide
	jsr     _getCollisionIndex
;
; if ( collisionMap[collisionIndex] == TILE_NOCOLLIDE ) {
;
	lda     _collisionMap
	clc
	adc     _collisionIndex
	sta     ptr1
	lda     _collisionMap+1
	adc     _collisionIndex+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	bne     L0570
;
; getCollisionIndex(rightSide, bottomSide);
;
	lda     _rightSide
L0858:	jsr     pusha
	lda     _bottomSide
	jsr     _getCollisionIndex
;
; horizontalCollideCheck = collisionMap[collisionIndex];
;
L0570:	lda     _collisionMap
	clc
	adc     _collisionIndex
	sta     ptr1
	lda     _collisionMap+1
	adc     _collisionIndex+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     _horizontalCollideCheck
;
; }
;
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ bgHorizCollideCheck (__near__ unsigned char *, __near__ unsigned char *, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bgHorizCollideCheck: near

.segment	"CODE"

;
; void __fastcall__ bgHorizCollideCheck(u8 *x, u8 *y, u8 dir) {
;
	jsr     pusha
;
; collideCheckHorizontal(*x, *y, dir);
;
	jsr     decsp2
	ldy     #$06
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	iny
	sta     (sp),y
	ldy     #$04
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	sta     (sp),y
	ldy     #$02
	lda     (sp),y
	jsr     _collideCheckHorizontal
;
; if ( horizontalCollideCheck == TILE_ALLCOLLIDE ) {
;
	lda     _horizontalCollideCheck
	cmp     #$01
	bne     L0587
;
; if ( dir & PAD_LEFT ) {
;
	ldy     #$00
	lda     (sp),y
	and     #$40
	beq     L085B
;
; *x = (*x & 0xf8) + 7;
;
	ldy     #$06
	jsr     pushwysp
	ldy     #$06
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	and     #$F8
	clc
	adc     #$07
;
; } else if ( dir & PAD_RIGHT ) {
;
	jmp     L0859
L085B:	lda     (sp),y
	and     #$80
	beq     L0587
;
; *x = (*x & 0xf8);
;
	ldy     #$06
	jsr     pushwysp
	ldy     #$06
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	and     #$F8
L0859:	jsr     staspidx
;
; }
;
L0587:	jmp     incsp5

.endproc

; ---------------------------------------------------------------
; void __near__ checkPlayerLadderCollision (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_checkPlayerLadderCollision: near

.segment	"CODE"

;
; leftSide = playerX + 3;
;
	lda     _playerX
	clc
	adc     #$03
	sta     _leftSide
;
; rightSide = playerX + 11;
;
	lda     _playerX
	clc
	adc     #$0B
	sta     _rightSide
;
; bottomSide = playerY + 15;
;
	lda     _playerY
	clc
	adc     #$0F
	sta     _bottomSide
;
; getCollisionIndex(leftSide, bottomSide);
;
	lda     _leftSide
	jsr     pusha
	lda     _bottomSide
	jsr     _getCollisionIndex
;
; collisionLeft = collisionMap[collisionIndex];
;
	lda     _collisionMap
	clc
	adc     _collisionIndex
	sta     ptr1
	lda     _collisionMap+1
	adc     _collisionIndex+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     _collisionLeft
;
; getCollisionIndex(rightSide, bottomSide);
;
	lda     _rightSide
	jsr     pusha
	lda     _bottomSide
	jsr     _getCollisionIndex
;
; collisionRight = collisionMap[collisionIndex];
;
	lda     _collisionMap
	clc
	adc     _collisionIndex
	sta     ptr1
	lda     _collisionMap+1
	adc     _collisionIndex+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     _collisionRight
;
; ( ( collisionLeft == TILE_LADDER ) || ( collisionLeft == TILE_LADDER_TOP ) ) &&
;
	lda     _collisionLeft
	cmp     #$06
	beq     L085C
	cmp     #$07
	beq     L085C
	tya
	jmp     L0867
;
; ( ( collisionRight == TILE_LADDER ) || ( collisionRight == TILE_LADDER_TOP ) ) 
;
L085C:	lda     _collisionRight
	cmp     #$06
	beq     L0862
	cmp     #$07
	beq     L0862
	tya
	jmp     L0867
;
; playerState = PLAYER_STATE_CLIMBING;
;
L0862:	lda     #$02
	sta     _playerState
;
; if ( ( collisionLeft == TILE_LADDER ) || ( collisionLeft == TILE_LADDER_TOP ) ) {
;
	lda     _collisionLeft
	cmp     #$06
	beq     L0863
	cmp     #$07
	bne     L0864
;
; playerX = ( playerX + 3 ) & 0xf0; 
;
L0863:	lda     _playerX
	clc
	adc     #$03
	and     #$F0
	sta     _playerX
;
; } else if ( ( collisionRight == TILE_LADDER )  || ( collisionRight == TILE_LADDER_TOP ) ) {
;
	rts
L0864:	lda     _collisionRight
	cmp     #$06
	beq     L0865
	cmp     #$07
	bne     L05BA
;
; playerX = ( playerX - 3 ) & 0xf0;
;
L0865:	lda     _playerX
	sec
	sbc     #$03
	and     #$F0
	sta     _playerX
;
; } else {
;
L05BA:	rts
;
; playerState = PLAYER_STATE_NORMAL;
;
L0867:	sta     _playerState
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ bgVertCollideCheck (__near__ unsigned char *, __near__ unsigned char *, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bgVertCollideCheck: near

.segment	"CODE"

;
; void __fastcall__ bgVertCollideCheck(u8 *x, u8 *y, u8 dir) {
;
	jsr     pusha
;
; collideCheckVertical(*x, *y, dir);
;
	jsr     decsp2
	ldy     #$06
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	iny
	sta     (sp),y
	ldy     #$04
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	sta     (sp),y
	ldy     #$02
	lda     (sp),y
	jsr     _collideCheckVertical
;
; if ( verticalCollideCheck ) {
;
	lda     _verticalCollideCheck
	beq     L05D3
;
; if ( dir & PAD_UP ) {
;
	ldy     #$00
	lda     (sp),y
	and     #$10
	beq     L05CD
;
; *y = (*y & 0xf8) + 15;
;
	ldy     #$04
	jsr     pushwysp
	ldy     #$04
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	and     #$F8
	clc
	adc     #$0F
;
; } else {
;
	jmp     L0868
;
; *y = (*y & 0xf8);
;
L05CD:	ldy     #$04
	jsr     pushwysp
	ldy     #$04
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	and     #$F8
L0868:	jsr     staspidx
;
; }
;
L05D3:	jmp     incsp5

.endproc

; ---------------------------------------------------------------
; void __near__ enemyCollideCheck (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enemyCollideCheck: near

.segment	"CODE"

;
; enemyIndex = 0;
;
	lda     #$00
	sta     _enemyIndex
;
; enemyColliding = 0;
;
	sta     _enemyColliding
;
; enemyCollidedIndex = 0;
;
	sta     _enemyCollidedIndex
;
; while ( !enemyColliding && ( enemyIndex < numEnemies ) ) {
;
	jmp     L05E0
;
; currentEnemy = &(enemyData[enemyIndex]);
;
L086A:	lda     _enemyIndex
	jsr     mulax6
	clc
	adc     #<(_enemyData)
	tay
	txa
	adc     #>(_enemyData)
	tax
	tya
	sta     _currentEnemy
	stx     _currentEnemy+1
;
; enemyTop = currentEnemy->y + 2;
;
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	clc
	adc     #$02
	sta     _enemyTop
;
; enemyBottom = currentEnemy->y + 14;
;
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	lda     (ptr1),y
	clc
	adc     #$0E
	sta     _enemyBottom
;
; enemyLeft = currentEnemy->x + 2;
;
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	dey
	lda     (ptr1),y
	clc
	adc     #$02
	sta     _enemyLeft
;
; enemyRight = currentEnemy->x + 14;
;
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	lda     (ptr1),y
	clc
	adc     #$0E
	sta     _enemyRight
;
; if ( !( rightSide  <  enemyLeft  || 
;
	lda     _rightSide
	cmp     _enemyLeft
	bcc     L086B
;
; leftSide   >= enemyRight || 
;
	lda     _leftSide
	cmp     _enemyRight
	bcs     L086B
;
; bottomSide <  enemyTop   || 
;
	lda     _bottomSide
	cmp     _enemyTop
	bcc     L086B
;
; topSide    >= enemyBottom ) ) {
;
	lda     _topSide
	cmp     _enemyBottom
	bcs     L086B
	tya
	jmp     L05F8
L086B:	lda     #$01
L05F8:	jsr     bnega
	beq     L086D
;
; switch ( currentEnemy->state ) {
;
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	ldy     #$05
	lda     (ptr1),y
;
; }
;
	beq     L086C
	cmp     #$01
	beq     L0603
	cmp     #$03
	beq     L086D
	jmp     L086D
;
; enemyColliding = 1;
;
L086C:	lda     #$01
	sta     _enemyColliding
;
; enemyCollidedIndex = enemyIndex;
;
	lda     _enemyIndex
	sta     _enemyCollidedIndex
;
; break;
;
	jmp     L086D
;
; currentEnemy->state = ENEMY_STATE_DEAD;
;
L0603:	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	lda     #$03
	sta     (ptr1),y
;
; ++enemyIndex;
;
L086D:	inc     _enemyIndex
;
; while ( !enemyColliding && ( enemyIndex < numEnemies ) ) {
;
L05E0:	lda     _enemyColliding
	bne     L086E
	tax
	lda     _enemyIndex
	cmp     _numEnemies
	jcc     L086A
L086E:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ updateEnemyMovement (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updateEnemyMovement: near

.segment	"CODE"

;
; for ( i = 0; i < numEnemies; i++ ) {
;
	lda     #$00
	sta     _i
	tax
L0871:	lda     _i
	cmp     _numEnemies
	bcc     L087B
;
; }
;
	rts
;
; currentEnemy = &(enemyData[i]);
;
L087B:	jsr     mulax6
	clc
	adc     #<(_enemyData)
	tay
	txa
	adc     #>(_enemyData)
	tax
	tya
	sta     _currentEnemy
	stx     _currentEnemy+1
;
; if ( currentEnemy->state == ENEMY_STATE_MUSHROOM ) {
;
	sta     ptr1
	stx     ptr1+1
	ldy     #$05
	ldx     #$00
	lda     (ptr1),y
	cmp     #$01
;
; continue;
;
	jeq     L087A
;
; collideCheckVertical(currentEnemy->x, currentEnemy->y + 1, PAD_DOWN);
;
	jsr     decsp2
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	lda     (ptr1,x)
	ldy     #$01
	sta     (sp),y
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	lda     (ptr1),y
	clc
	adc     #$01
	dey
	sta     (sp),y
	lda     #$20
	jsr     _collideCheckVertical
;
; if ( ( verticalCollideCheck != TILE_ALLCOLLIDE ) && ( verticalCollideCheck != TILE_LADDER_TOP ) ) {
;
	lda     _verticalCollideCheck
	cmp     #$01
	beq     L061D
	cmp     #$07
	beq     L061D
;
; currentEnemy->y += 1;
;
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	clc
	adc     #$01
;
; } else {
;
	jmp     L0870
;
; if ( currentEnemy->direction == PAD_RIGHT ) {
;
L061D:	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	ldy     #$03
	lda     (ptr1),y
	cmp     #$80
	bne     L0626
;
; currentEnemy->x += 1;
;
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	clc
	adc     #$01
	sta     (ptr1),y
;
; collideCheckHorizontal(currentEnemy->x, currentEnemy->y, PAD_RIGHT);
;
	jsr     decsp2
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	lda     (ptr1),y
	iny
	sta     (sp),y
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	lda     (ptr1),y
	dey
	sta     (sp),y
	lda     #$80
	jsr     _collideCheckHorizontal
;
; if ( ( horizontalCollideCheck == TILE_ALLCOLLIDE ) || ( horizontalCollideCheck == TILE_ENEMYCOLLIDE ) ) {
;
	ldx     #$00
	lda     _horizontalCollideCheck
	cmp     #$01
	beq     L0876
	cmp     #$02
	jne     L087A
;
; flipSprite(enemySpriteData[i], 0);
;
L0876:	lda     _i
	jsr     pusha0
	lda     #$11
	jsr     tosmula0
	clc
	adc     #<(_enemySpriteData)
	tay
	txa
	adc     #>(_enemySpriteData)
	tax
	tya
	jsr     pushax
	lda     #$00
	jsr     _flipSprite
;
; currentEnemy->direction = PAD_LEFT;
;
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	ldx     #$00
	lda     #$40
	ldy     #$03
	sta     (ptr1),y
;
; } else {
;
	jmp     L087A
;
; currentEnemy->x -= 1;
;
L0626:	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; collideCheckHorizontal(currentEnemy->x, currentEnemy->y, PAD_LEFT);
;
	jsr     decsp2
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	lda     (ptr1),y
	iny
	sta     (sp),y
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	lda     (ptr1),y
	dey
	sta     (sp),y
	lda     #$40
	jsr     _collideCheckHorizontal
;
; if ( ( horizontalCollideCheck == TILE_ALLCOLLIDE ) || ( horizontalCollideCheck == TILE_ENEMYCOLLIDE ) ) {
;
	ldx     #$00
	lda     _horizontalCollideCheck
	cmp     #$01
	beq     L0879
	cmp     #$02
	bne     L087A
;
; flipSprite(enemySpriteData[i], 1);
;
L0879:	lda     _i
	jsr     pusha0
	lda     #$11
	jsr     tosmula0
	clc
	adc     #<(_enemySpriteData)
	tay
	txa
	adc     #>(_enemySpriteData)
	tax
	tya
	jsr     pushax
	lda     #$01
	jsr     _flipSprite
;
; currentEnemy->direction = PAD_RIGHT;
;
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	lda     #$80
	ldy     #$03
L0870:	sta     (ptr1),y
;
; for ( i = 0; i < numEnemies; i++ ) {
;
	ldx     #$00
L087A:	lda     _i
	clc
	adc     #$01
	sta     _i
	jmp     L0871

.endproc

; ---------------------------------------------------------------
; void __near__ updatePlayerJumpFall (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updatePlayerJumpFall: near

.segment	"CODE"

;
; collideBottom = 0;
;
	lda     #$00
	sta     _collideBottom
;
; if ( playerState == PLAYER_STATE_JUMPING ) {
;
	lda     _playerState
	cmp     #$03
	jne     L088B
;
; playerY -= playerVertVel;
;
	lda     _playerVertVel
	eor     #$FF
	sec
	adc     _playerY
	sta     _playerY
;
; if ( playerVertVel > 0 ) {
;
	lda     _playerVertVel
	sec
	sbc     #$01
	bvs     L0656
	eor     #$80
L0656:	bpl     L0653
;
; collideCheckVertical(playerX, playerY, PAD_UP);
;
	jsr     decsp2
	lda     _playerX
	ldy     #$01
	sta     (sp),y
	lda     _playerY
	dey
	sta     (sp),y
	lda     #$10
	jsr     _collideCheckVertical
;
; if ( ( verticalCollideCheck == TILE_ALLCOLLIDE ) || ( verticalCollideCheck == TILE_LADDER_TOP ) ) { 
;
	lda     _verticalCollideCheck
	cmp     #$01
	beq     L0881
	cmp     #$07
	bne     L0885
;
; playerY = (playerY & 0xF8) + 6;
;
L0881:	lda     _playerY
	and     #$F8
	clc
	adc     #$06
	sta     _playerY
;
; } else {
;
	jmp     L0885
;
; collideCheckVertical(playerX, playerY + 2, PAD_DOWN);
;
L0653:	jsr     decsp2
	lda     _playerX
	ldy     #$01
	sta     (sp),y
	lda     _playerY
	clc
	adc     #$02
	dey
	sta     (sp),y
	lda     #$20
	jsr     _collideCheckVertical
;
; if ( ( verticalCollideCheck == TILE_ALLCOLLIDE ) || ( verticalCollideCheck == TILE_LADDER_TOP ) ) { 
;
	lda     _verticalCollideCheck
	cmp     #$01
	beq     L0884
	cmp     #$07
	bne     L0885
;
; playerY = (playerY & 0xF8) + 7;
;
L0884:	lda     _playerY
	and     #$F8
	clc
	adc     #$07
	sta     _playerY
;
; collideBottom = 1;
;
	lda     #$01
	sta     _collideBottom
;
; playerState = PLAYER_STATE_NORMAL;       
;
	lda     #$00
	sta     _playerState
;
; playerFrame = PLAYER_FRAME_STANDING;
;
	sta     _playerFrame
;
; if ( ( playerVertVel > -3 ) && ( playerJumpCounter == PLAYER_JUMP_COUNTER_INTERVAL ) ) {
;
L0885:	lda     _playerVertVel
	sec
	sbc     #$FE
	bvs     L067D
	eor     #$80
L067D:	bpl     L088A
	lda     _playerJumpCounter
	cmp     #$06
	bne     L088A
;
; playerVertVel -= GRAVITY_ACCELERATION; 
;
	lda     _playerVertVel
	sec
	sbc     #$02
	sta     _playerVertVel
;
; playerJumpCounter = 0;
;
	lda     #$00
	sta     _playerJumpCounter
;
; ++playerJumpCounter;
;
L088A:	inc     _playerJumpCounter
;
; } else if ( ( playerState == PLAYER_STATE_NORMAL ) || ( playerState == PLAYER_STATE_FALLING ) ) {
;
	jmp     L069F
L088B:	lda     _playerState
	beq     L088C
	cmp     #$04
	bne     L069F
;
; collideCheckVertical(playerX, playerY + 4, PAD_DOWN);
;
L088C:	jsr     decsp2
	lda     _playerX
	ldy     #$01
	sta     (sp),y
	lda     _playerY
	clc
	adc     #$04
	dey
	sta     (sp),y
	lda     #$20
	jsr     _collideCheckVertical
;
; if ( ( verticalCollideCheck == TILE_ALLCOLLIDE ) || ( verticalCollideCheck == TILE_LADDER_TOP ) ) { 
;
	lda     _verticalCollideCheck
	cmp     #$01
	beq     L088F
	cmp     #$07
	bne     L0890
;
; playerY = (playerY & 0xF8) + 7;
;
L088F:	lda     _playerY
	and     #$F8
	clc
	adc     #$07
	sta     _playerY
;
; collideBottom = 1;
;
	lda     #$01
	sta     _collideBottom
;
; playerState = PLAYER_STATE_NORMAL;   
;
	lda     #$00
;
; } else {
;
	jmp     L087C
;
; playerY += PLAYER_FALL_SPEED;
;
L0890:	lda     #$03
	clc
	adc     _playerY
	sta     _playerY
;
; collideBottom = 0;
;
	lda     #$00
	sta     _collideBottom
;
; playerState = PLAYER_STATE_FALLING;
;
	lda     #$04
L087C:	sta     _playerState
;
; if ( collideBottom ) {
;
L069F:	lda     _collideBottom
	beq     L06BE
;
; if ( ( jumpButtonReset != 0 ) && ( pad & PAD_A ) ) {
;
	lda     _jumpButtonReset
	beq     L0894
	lda     _pad
	and     #$01
	beq     L0894
;
; playerVertVel = PLAYER_INIT_JUMP_VEL;
;
	lda     #$03
	sta     _playerVertVel
;
; playerState = PLAYER_STATE_JUMPING;
;
	sta     _playerState
;
; playerJumpCounter = 0;
;
	lda     #$00
	sta     _playerJumpCounter
;
; jumpButtonReset = 0;
;
	sta     _jumpButtonReset
;
; sfx_play(SFX_JUMP, CHANNEL_SQUARE1);
;
	jsr     pusha
	jmp     _sfx_play
;
; } else if ( pad & PAD_UP ) {
;
L0894:	lda     _pad
	and     #$10
	cmp     #$00
;
; checkPlayerLadderCollision();
;
	jne     _checkPlayerLadderCollision
;
; } else if ( ( pad & PAD_DOWN ) && ( verticalCollideCheck == TILE_LADDER_TOP ) ) {
;
	lda     _pad
	and     #$20
	beq     L0897
	lda     _verticalCollideCheck
	cmp     #$07
	beq     L0898
L0897:	rts
;
; playerY++;
;
L0898:	lda     _playerY
	clc
	adc     #$01
	sta     _playerY
;
; checkPlayerLadderCollision();
;
	jmp     _checkPlayerLadderCollision
;
; }
;
L06BE:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ updatePlayerClimbing (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updatePlayerClimbing: near

.segment	"CODE"

;
; checkPlayerLadderCollision();
;
	jsr     _checkPlayerLadderCollision
;
; if ( pad & PAD_UP ) { 
;
	lda     _pad
	and     #$10
	beq     L0899
;
; --playerY;
;
	dec     _playerY
;
; } else if ( pad & PAD_DOWN ) {
;
	rts
L0899:	lda     _pad
	and     #$20
	beq     L06D4
;
; ++playerY;
;
	inc     _playerY
;
; collideCheckVertical(playerX, playerY + 1, PAD_DOWN);
;
	jsr     decsp2
	lda     _playerX
	ldy     #$01
	sta     (sp),y
	lda     _playerY
	clc
	adc     #$01
	dey
	sta     (sp),y
	lda     #$20
	jsr     _collideCheckVertical
;
; if ( ( verticalCollideCheck == TILE_ALLCOLLIDE ) ) {  
;
	lda     _verticalCollideCheck
	cmp     #$01
	bne     L06D4
;
; playerState = PLAYER_STATE_NORMAL;
;
	lda     #$00
	sta     _playerState
;
; }
;
L06D4:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ updatePlayerVerticalMovement (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updatePlayerVerticalMovement: near

.segment	"CODE"

;
; if ( !( pad & PAD_A ) ) {
;
	lda     _pad
	and     #$01
	bne     L089A
;
; jumpButtonReset = 1;
;
	lda     #$01
	sta     _jumpButtonReset
;
; if ( playerState == PLAYER_STATE_CLIMBING ) {
;
L089A:	lda     _playerState
	cmp     #$02
;
; updatePlayerClimbing(); 
;
	jeq     _updatePlayerClimbing
;
; updatePlayerJumpFall();
;
	jmp     _updatePlayerJumpFall

.endproc

; ---------------------------------------------------------------
; void __near__ updatePlayerHorizontalMovement (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updatePlayerHorizontalMovement: near

.segment	"CODE"

;
; if ( ( playerState != PLAYER_STATE_NORMAL ) && ( playerState != PLAYER_STATE_JUMPING ) ) {
;
	lda     _playerState
	beq     L089F
	cmp     #$03
	beq     L089F
;
; return;
;
	rts
;
; if ( pad & PAD_LEFT ) {
;
L089F:	lda     _pad
	and     #$40
	beq     L08A0
;
; playerDir = PAD_LEFT;
;
	lda     #$40
	sta     _playerDir
;
; if ( playerX > 0 ) {
;
	lda     _playerX
	beq     L06F8
;
; playerX -= PLAYER_MOVE_VEL;
;
	dec     _playerX
;
; } else if ( pad & PAD_RIGHT ) {
;
	jmp     L06F8
L08A0:	lda     _pad
	and     #$80
	beq     L06F8
;
; playerDir = PAD_RIGHT;
;
	lda     #$80
	sta     _playerDir
;
; if ( playerX < 240 ) {
;
	lda     _playerX
	cmp     #$F0
	bcs     L06F8
;
; playerX += PLAYER_MOVE_VEL;
;
	inc     _playerX
;
; bgHorizCollideCheck(&playerX, &playerY, pad);
;
L06F8:	jsr     decsp4
	lda     #<(_playerX)
	ldy     #$02
	sta     (sp),y
	iny
	lda     #>(_playerX)
	sta     (sp),y
	lda     #<(_playerY)
	ldy     #$00
	sta     (sp),y
	iny
	lda     #>(_playerY)
	sta     (sp),y
	lda     _pad
	jmp     _bgHorizCollideCheck

.endproc

; ---------------------------------------------------------------
; void __near__ updatePlayerGlue (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updatePlayerGlue: near

.segment	"CODE"

;
; u8 newGlueIndex = 255;
;
	jsr     decsp2
	lda     #$FF
	jsr     pusha
;
; u8 duplicateFound = 0;
;
	lda     #$00
	jsr     pusha
;
; if ( ! ( pad & PAD_B ) ) {
;
	lda     _pad
	and     #$02
	bne     L08A5
;
; glueButtonReset = 1;
;
	lda     #$01
	sta     _glueButtonReset
;
; if ( ( pad & PAD_B ) && ( glueButtonReset == 1 ) ) {
;
L08A5:	lda     _pad
	and     #$02
	bne     L08B5
;
; }
;
	jmp     incsp4
;
; if ( ( pad & PAD_B ) && ( glueButtonReset == 1 ) ) {
;
L08B5:	lda     _glueButtonReset
	cmp     #$01
	jne     incsp4
;
; glueButtonReset = 0;
;
	lda     #$00
	sta     _glueButtonReset
;
; glueY = ((playerY + 8) & 0xf0);
;
	lda     _playerY
	clc
	adc     #$08
	and     #$F0
	ldy     #$02
	sta     (sp),y
;
; if ( playerDir == PAD_RIGHT ) {
;
	lda     _playerDir
	cmp     #$80
	bne     L08AB
;
; glueX = (((playerX + 8) & 0xf0)) + 16;
;
	lda     _playerX
	clc
	adc     #$08
	and     #$F0
	clc
	adc     #$10
;
; } else {
;
	jmp     L08B3
;
; glueX = (((playerX + 8) & 0xf0)) - 16;
;
L08AB:	lda     _playerX
	clc
	adc     #$08
	and     #$F0
	sec
	sbc     #$10
L08B3:	iny
	sta     (sp),y
;
; getCollisionIndex(glueX, glueY);
;
	jsr     pusha
	ldy     #$03
	lda     (sp),y
	jsr     _getCollisionIndex
;
; if ( ( collisionMap[collisionIndex] != TILE_ALLCOLLIDE ) && ( collisionMap[collisionIndex] != TILE_LADDER_TOP ) ) {
;
	lda     _collisionMap
	clc
	adc     _collisionIndex
	sta     ptr1
	lda     _collisionMap+1
	adc     _collisionIndex+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	cmp     #$01
	bne     L08B6
;
; }
;
	jmp     incsp4
;
; if ( ( collisionMap[collisionIndex] != TILE_ALLCOLLIDE ) && ( collisionMap[collisionIndex] != TILE_LADDER_TOP ) ) {
;
L08B6:	lda     _collisionMap
	clc
	adc     _collisionIndex
	sta     ptr1
	lda     _collisionMap+1
	adc     _collisionIndex+1
	sta     ptr1+1
	lda     (ptr1),y
	cmp     #$07
	jeq     incsp4
;
; i = 0;
;
	sty     _i
;
; if ( glueData[i].isActive == 0 ) {
;
L08AE:	lda     _i
	jsr     pusha0
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_glueData)
	sta     ptr1
	txa
	adc     #>(_glueData)
	sta     ptr1+1
	ldy     #$03
	ldx     #$00
	lda     (ptr1),y
	bne     L08AF
;
; newGlueIndex = i; 
;
	lda     _i
	ldy     #$01
;
; } else if ( glueData[i].collisionIndex == collisionIndex ) {
;
	jmp     L08A4
L08AF:	lda     _i
	jsr     pusha0
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_glueData)
	sta     ptr1
	txa
	adc     #>(_glueData)
	sta     ptr1+1
	ldy     #$04
	ldx     #$00
	lda     (ptr1),y
	cpx     _collisionIndex+1
	bne     L08B0
	cmp     _collisionIndex
	bne     L08B0
;
; duplicateFound = 1;
;
	lda     #$01
	ldy     #$00
L08A4:	sta     (sp),y
;
; ++i;
;
L08B0:	inc     _i
;
; } while ( ( newGlueIndex == 255 ) && ( i < MAX_GLUE_COUNT ) && !duplicateFound );
;
	ldy     #$01
	lda     (sp),y
	cmp     #$FF
	bne     L08B4
	lda     _i
	cmp     #$05
	bcs     L08B4
	lda     (sp,x)
	beq     L08AE
;
; if ( newGlueIndex < 255 ) {
;
	ldy     #$01
L08B4:	lda     (sp),y
	cmp     #$FF
	bcc     L08B7
;
; }
;
	jmp     incsp4
;
; gluePointer = &(glueData[newGlueIndex]);
;
L08B7:	jsr     pusha0
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_glueData)
	tay
	txa
	adc     #>(_glueData)
	tax
	tya
	sta     _gluePointer
	stx     _gluePointer+1
;
; gluePointer->x = glueX;
;
	sta     ptr1
	stx     ptr1+1
	ldy     #$03
	lda     (sp),y
	ldy     #$00
	sta     (ptr1),y
;
; gluePointer->y = glueY - 1;
;
	lda     _gluePointer
	sta     ptr1
	lda     _gluePointer+1
	sta     ptr1+1
	ldy     #$02
	lda     (sp),y
	sec
	sbc     #$01
	dey
	sta     (ptr1),y
;
; gluePointer->isActive = 1;
;
	lda     _gluePointer
	sta     ptr1
	lda     _gluePointer+1
	sta     ptr1+1
	tya
	ldy     #$03
	sta     (ptr1),y
;
; gluePointer->timeLeft = GLUE_INIT_LIFESPAN;
;
	lda     _gluePointer
	sta     ptr1
	lda     _gluePointer+1
	sta     ptr1+1
	lda     #$F0
	dey
	sta     (ptr1),y
;
; gluePointer->collisionIndex = collisionIndex;
;
	lda     _gluePointer
	sta     ptr1
	lda     _gluePointer+1
	sta     ptr1+1
	lda     _collisionIndex
	ldy     #$04
	sta     (ptr1),y
;
; collisionMap[collisionIndex] = TILE_GLUE;
;
	lda     _collisionMap
	clc
	adc     _collisionIndex
	sta     ptr1
	lda     _collisionMap+1
	adc     _collisionIndex+1
	sta     ptr1+1
	lda     #$08
	ldy     #$00
	sta     (ptr1),y
;
; sfx_play(SFX_GLUEDROP, CHANNEL_SQUARE1);        
;
	lda     #$01
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; }
;
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ updateGlues (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updateGlues: near

.segment	"CODE"

;
; for ( i = 0; i < MAX_GLUE_COUNT; ++i ) {
;
	lda     #$00
	sta     _i
L08B8:	lda     _i
	cmp     #$05
	bcs     L07AF
;
; gluePointer = &(glueData[i]);
;
	lda     _i
	jsr     pusha0
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_glueData)
	tay
	txa
	adc     #>(_glueData)
	tax
	tya
	sta     _gluePointer
	stx     _gluePointer+1
;
; if ( gluePointer->isActive ) {
;
	sta     ptr1
	stx     ptr1+1
	ldy     #$03
	lda     (ptr1),y
	beq     L08B9
;
; --(gluePointer->timeLeft); 
;
	lda     _gluePointer
	sta     ptr1
	lda     _gluePointer+1
	sta     ptr1+1
	dey
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; if ( gluePointer->timeLeft <= 0 ) {
;
	lda     _gluePointer
	sta     ptr1
	lda     _gluePointer+1
	sta     ptr1+1
	lda     (ptr1),y
	bne     L08B9
;
; gluePointer->isActive = 0;
;
	lda     _gluePointer
	sta     ptr1
	lda     _gluePointer+1
	sta     ptr1+1
	lda     #$00
	iny
	sta     (ptr1),y
;
; gluePointer->collisionIndex = 0;
;
	lda     _gluePointer
	sta     ptr1
	lda     _gluePointer+1
	sta     ptr1+1
	lda     #$00
	iny
	sta     (ptr1),y
;
; for ( i = 0; i < MAX_GLUE_COUNT; ++i ) {
;
L08B9:	inc     _i
	jmp     L08B8
;
; }
;
L07AF:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; memcpy(palSprites, paldat, 16);
;
	ldy     #$0F
L07C9:	lda     _paldat,y
	sta     _palSprites,y
	dey
	bpl     L07C9
;
; memcpy(palBG, paldat + 16, 4);
;
	ldy     #$03
L07CE:	lda     _paldat+16,y
	sta     _palBG,y
	dey
	bpl     L07CE
;
; memcpy(tileUpdateList, tileUpdateListInit, sizeof(tileUpdateListInit));
;
	ldy     #$0C
L07D4:	lda     _tileUpdateListInit,y
	sta     _tileUpdateList,y
	dey
	bpl     L07D4
;
; tileUpdateList[2] = glueTileData[0];
;
	lda     _glueTileData
	sta     _tileUpdateList+2
;
; tileUpdateList[5] = glueTileData[1];
;
	lda     _glueTileData+1
	sta     _tileUpdateList+5
;
; tileUpdateList[8] = glueTileData[2];
;
	lda     _glueTileData+2
	sta     _tileUpdateList+8
;
; tileUpdateList[11] = glueTileData[3];
;
	lda     _glueTileData+3
	sta     _tileUpdateList+11
;
; pal_spr(palSprites);
;
	lda     #<(_palSprites)
	ldx     #>(_palSprites)
	jsr     _pal_spr
;
; pal_bg(palBG);
;
	lda     #<(_palBG)
	ldx     #>(_palBG)
	jsr     _pal_bg
;
; vram_adr(NAMETABLE_A); //unpack nametable into VRAM
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(newmap); 
;
	lda     #<(_newmap)
	ldx     #>(_newmap)
	jsr     _vram_unrle
;
; drawScoreboard();
;
	jsr     _drawScoreboard
;
; ppu_on_all(); //enable rendering
;
	jsr     _ppu_on_all
;
; playerDir = PAD_LEFT;
;
	lda     #$40
	sta     _playerDir
;
; touch = 0; // collision flag
;
	lda     #$00
	sta     _touch
;
; frameCount = 0; // frame counter
;
	sta     _frameCount
;
; playerFrame = 0;
;
	sta     _playerFrame
;
; setSpriteFrame(playerSpriteData, playerFrames[playerFrame]);
;
	lda     #<(_playerSpriteData)
	ldx     #>(_playerSpriteData)
	jsr     pushax
	ldx     #$00
	lda     _playerFrame
	jsr     aslax2
	clc
	adc     #<(_playerFrames)
	tay
	txa
	adc     #>(_playerFrames)
	tax
	tya
	jsr     _setSpriteFrame
;
; setupMap();
;
	jsr     _setupMap
;
; playerX = playerStartX;
;
	lda     _playerStartX
	sta     _playerX
;
; playerY = playerStartY;
;
	lda     _playerStartY
	sta     _playerY
;
; ppu_wait_frame(); // wait for next TV frame
;
L0800:	jsr     _ppu_wait_frame
;
; oamSpriteIndex = 0;
;
	lda     #$00
	sta     _oamSpriteIndex
;
; i = 0;
;
	sta     _i
;
; sprPriorityToggle = frameCount & 0xFE;
;
	lda     _frameCount
	and     #$FE
	sta     _sprPriorityToggle
;
; pad = pad_poll(i);
;
	lda     _i
	jsr     _pad_poll
	sta     _pad
;
; updateScoreboard();
;
	jsr     _updateScoreboard
;
; updatePlayerSprite();
;
	jsr     _updatePlayerSprite
;
; updateEnemySprites();
;
	jsr     _updateEnemySprites
;
; updateGlueSprites();
;
	jsr     _updateGlueSprites
;
; spriteCount();
;
	jsr     _spriteCount
;
; updateEnemyMovement();
;
	jsr     _updateEnemyMovement
;
; updatePlayerHorizontalMovement();
;
	jsr     _updatePlayerHorizontalMovement
;
; updatePlayerVerticalMovement();
;
	jsr     _updatePlayerVerticalMovement
;
; updatePlayerGlue();
;
	jsr     _updatePlayerGlue
;
; updateGlues();
;
	jsr     _updateGlues
;
; enemyColliding = 0;
;
	lda     #$00
	sta     _enemyColliding
;
; four_Sides(playerX, playerY);
;
	lda     _playerX
	jsr     pusha
	lda     _playerY
	jsr     _four_Sides
;
; enemyCollideCheck();
;
	jsr     _enemyCollideCheck
;
; playerEnemyColliding = enemyColliding;
;
	lda     _enemyColliding
	sta     _playerEnemyColliding
;
; if ( playerEnemyColliding ) {
;
	lda     _playerEnemyColliding
	beq     L0820
;
; setSpritePalette(playerSpriteData, 0x0);
;
	lda     #<(_playerSpriteData)
	ldx     #>(_playerSpriteData)
	jsr     pushax
	lda     #$00
;
; } else {
;
	jmp     L08BA
;
; setSpritePalette(playerSpriteData, 0x3);
;
L0820:	lda     #<(_playerSpriteData)
	ldx     #>(_playerSpriteData)
	jsr     pushax
	lda     #$03
L08BA:	jsr     _setSpritePalette
;
; oam_hide_rest(oamSpriteIndex);
;
	lda     _oamSpriteIndex
	jsr     _oam_hide_rest
;
; ++frameCount;
;
	inc     _frameCount
;
; while ( 1 )
;
	jmp     L0800

.endproc

