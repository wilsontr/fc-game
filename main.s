;
; File generated by cc65 v 2.16 - Git N/A
;
	.fopt		compiler,"cc65 v 2.16 - Git N/A"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_memcpy
	.import		_pal_bg
	.import		_pal_spr
	.import		_ppu_wait_frame
	.import		_ppu_on_all
	.import		_oam_meta_spr
	.import		_oam_hide_rest
	.import		_pad_poll
	.import		_set_vram_update
	.import		_vram_adr
	.import		_vram_fill
	.import		_vram_unrle
	.export		_map1
	.export		_map1_coll
	.export		_oam_off
	.import		_paldat
	.export		_playerFrames
	.export		_playerSpriteData
	.export		_nametableUpdateList
	.export		_potionSpriteData
	.export		_mushroomSpriteDataTemplate
	.export		_enemyData
	.export		_enemyFrames
	.export		_enemySpriteDataTemplate
	.export		_killPotion
	.export		_setupMap
	.export		_setSpriteFrame
	.export		_setSpritePalette
	.export		_setSpritePriority
	.export		_flipSprite
	.export		_spriteCount
	.export		_updateEnemySprites
	.export		_updatePlayerSprite
	.export		_updatePotionSprite
	.export		_drawScoreboard
	.export		_updateListData
	.export		_updateList
	.export		_updateScoreboard
	.export		_four_Sides
	.export		_four_SidesSmall
	.export		_getCollisionIndex
	.export		_smallCollideCheckVertical
	.export		_collideCheckVertical
	.export		_collideCheckHorizontal
	.export		_checkPlayerLadderCollision
	.export		_bgVertCollideCheck
	.export		_bgHorizCollideCheck
	.export		_enemyCollideCheck
	.export		_potionEnemyCollideCheck
	.export		_updateEnemyMovement
	.export		_updatePlayerJumpFall
	.export		_updatePlayerClimbing
	.export		_updatePlayerVerticalMovement
	.export		_playerMoveHorizontal
	.export		_updatePlayerAttack
	.export		_updatePotionMovement
	.export		_simpleUpdatePotionMovement
	.export		_main

.segment	"DATA"

.segment	"ZEROPAGE"
_enemyIndex:
	.byte	$00
_enemyColliding:
	.byte	$00
.segment	"DATA"
_spriteFlickerIndex:
	.byte	$00
_sprPriorityToggle:
	.byte	$00
_playerFrame:
	.byte	$00
_playerJumping:
	.byte	$00
_playerJumpCounter:
	.byte	$00
_playerJumpDirection:
	.byte	$00
_playerState:
	.byte	$00
_playerVertVel:
	.byte	$00
_jumpButtonReset:
	.byte	$01
_playerSpriteData:
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$09
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$19
	.byte	$03
	.byte	$80
_potionIsActive:
	.byte	$00
_potionVerticalVel:
	.byte	$00
_potionMoveCounter:
	.byte	$00
_potionSpriteData:
	.byte	$00
	.byte	$00
	.byte	$2A
	.byte	$00
	.byte	$80
_enemySpriteCount:
	.byte	$00
_enemyCollidedIndex:
	.byte	$00
_updateListData:
	.byte	$60
	.byte	$20
	.byte	$04
	.byte	$A1
	.byte	$A2
	.byte	$A3
	.byte	$A4
	.byte	$FF

.segment	"RODATA"

_map1:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$3F
	.byte	$41
	.byte	$01
	.byte	$20
	.byte	$00
	.byte	$01
	.byte	$0D
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$0E
	.byte	$41
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$0D
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$0E
	.byte	$41
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$0D
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$0E
	.byte	$41
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$41
	.byte	$01
	.byte	$09
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$41
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$41
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$41
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$41
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$41
	.byte	$01
	.byte	$0D
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$41
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$41
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$13
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$08
	.byte	$41
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$13
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$08
	.byte	$41
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$13
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$08
	.byte	$41
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$13
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$08
	.byte	$41
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$41
	.byte	$01
	.byte	$09
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$41
	.byte	$01
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$41
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$41
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$41
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$41
	.byte	$01
	.byte	$12
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$41
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$41
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$41
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$41
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$41
	.byte	$01
	.byte	$07
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$41
	.byte	$01
	.byte	$02
	.byte	$43
	.byte	$44
	.byte	$41
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$41
	.byte	$01
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$0E
	.byte	$43
	.byte	$44
	.byte	$00
	.byte	$01
	.byte	$0C
	.byte	$41
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$0E
	.byte	$43
	.byte	$44
	.byte	$00
	.byte	$01
	.byte	$0C
	.byte	$41
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$0E
	.byte	$43
	.byte	$44
	.byte	$00
	.byte	$01
	.byte	$0C
	.byte	$41
	.byte	$01
	.byte	$20
	.byte	$00
	.byte	$01
	.byte	$1E
	.byte	$00
	.byte	$01
	.byte	$00
_map1_coll:
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$07
	.byte	$07
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_playerFrames:
	.byte	$08
	.byte	$09
	.byte	$18
	.byte	$19
	.byte	$28
	.byte	$29
	.byte	$38
	.byte	$39
	.byte	$68
	.byte	$69
	.byte	$78
	.byte	$79
_mushroomSpriteDataTemplate:
	.byte	$00
	.byte	$00
	.byte	$2B
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$2C
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$3B
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$3C
	.byte	$02
	.byte	$80
_enemyFrames:
	.byte	$06
	.byte	$07
	.byte	$16
	.byte	$17
	.byte	$26
	.byte	$27
	.byte	$36
	.byte	$37
_enemySpriteDataTemplate:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$00
	.byte	$03
	.byte	$80

.segment	"BSS"

.segment	"ZEROPAGE"
.segment	"BSS"
.segment	"ZEROPAGE"
_oam_off:
	.res	1,$00
.segment	"ZEROPAGE"
_playerX:
	.res	1,$00
.segment	"ZEROPAGE"
_playerY:
	.res	1,$00
.segment	"ZEROPAGE"
_frameCount:
	.res	1,$00
.segment	"ZEROPAGE"
_i:
	.res	1,$00
.segment	"ZEROPAGE"
_collisionIndex:
	.res	2,$00
.segment	"ZEROPAGE"
_leftSide:
	.res	1,$00
.segment	"ZEROPAGE"
_rightSide:
	.res	1,$00
.segment	"ZEROPAGE"
_topSide:
	.res	1,$00
.segment	"ZEROPAGE"
_bottomSide:
	.res	1,$00
.segment	"ZEROPAGE"
_enemyVertCollide:
	.res	1,$00
.segment	"ZEROPAGE"
_potionX:
	.res	1,$00
.segment	"ZEROPAGE"
_potionY:
	.res	1,$00
.segment	"ZEROPAGE"
_potionTossTimer:
	.res	1,$00
.segment	"BSS"
_collisionMap:
	.res	2,$00
.segment	"BSS"
_pad:
	.res	1,$00
.segment	"BSS"
_oamSpriteIndex:
	.res	1,$00
.segment	"BSS"
_touch:
	.res	1,$00
.segment	"BSS"
_palSprites:
	.res	4,$00
.segment	"BSS"
_palBG:
	.res	4,$00
.segment	"BSS"
_horizontalCollideCheck:
	.res	1,$00
.segment	"BSS"
_verticalCollideCheck:
	.res	1,$00
.segment	"BSS"
_jumpCollideCheckTile:
	.res	1,$00
.segment	"BSS"
_collideBottom:
	.res	1,$00
.segment	"BSS"
_collisionLeft:
	.res	1,$00
.segment	"BSS"
_collisionRight:
	.res	1,$00
.segment	"BSS"
_playerDir:
	.res	1,$00
.segment	"BSS"
_playerEnemyColliding:
	.res	1,$00
.segment	"BSS"
_initPlayerJumpY:
	.res	1,$00
.segment	"BSS"
_nametableUpdateList:
	.res	2,$00
.segment	"BSS"
_potionDirection:
	.res	1,$00
.segment	"BSS"
_numEnemies:
	.res	1,$00
.segment	"BSS"
_enemyTop:
	.res	1,$00
.segment	"BSS"
_enemyBottom:
	.res	1,$00
.segment	"BSS"
_enemyLeft:
	.res	1,$00
.segment	"BSS"
_enemyRight:
	.res	1,$00
.segment	"BSS"
_enemyData:
	.res	120,$00
.segment	"BSS"
_enemySpriteData:
	.res	170,$00
.segment	"BSS"
_currentEnemy:
	.res	2,$00
.segment	"BSS"
_currentEnemySprite:
	.res	2,$00
.segment	"BSS"
_sSpriteIndex:
	.res	1,$00
.segment	"BSS"
_sFrameIndex:
	.res	1,$00
.segment	"BSS"
_sSpritePtr:
	.res	2,$00
.segment	"BSS"
_sFramePtr:
	.res	1,$00
.segment	"BSS"
_updateList:
	.res	8,$00

; ---------------------------------------------------------------
; void __near__ killPotion (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_killPotion: near

.segment	"CODE"

;
; potionIsActive = 0;
;
	lda     #$00
	sta     _potionIsActive
;
; potionX = -8;
;
	lda     #$F8
	sta     _potionX
;
; potionY = -8;
;
	sta     _potionY
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ setupMap (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_setupMap: near

.segment	"RODATA"

L0528:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$40
	.res	2,$00

.segment	"CODE"

;
; u8 mapX = 0;
;
	jsr     decsp2
	lda     #$00
	jsr     pusha
;
; u8 mapY = 0;
;
	jsr     pusha
;
; u16 index = 0;
;
	jsr     push0
;
; enemy newEnemy = { 0, 0, 0, PAD_LEFT };
;
	jsr     decsp6
	ldy     #$05
L052D:	lda     L0528,y
	sta     (sp),y
	dey
	bpl     L052D
;
; potionTossTimer = 0;
;
	lda     #$00
	sta     _potionTossTimer
;
; potionX = -8;
;
	lda     #$F8
	sta     _potionX
;
; potionY = -8;
;
	sta     _potionY
;
; collisionMap = (u8 *) map1_coll;
;
	lda     #<(_map1_coll)
	sta     _collisionMap
	lda     #>(_map1_coll)
	sta     _collisionMap+1
;
; enemyIndex = 0;
;
	lda     #$00
	sta     _enemyIndex
;
; for ( index; index <= COLLISION_MAP_SIZE; ++index ) {
;
L0538:	ldy     #$07
	lda     (sp),y
	cmp     #$03
	bne     L053E
	dey
	lda     (sp),y
	cmp     #$C1
L053E:	jcs     L0539
;
; collByte = collisionMap[index];
;
	ldy     #$07
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     _collisionMap
	sta     ptr1
	txa
	adc     _collisionMap+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	ldy     #$0B
	sta     (sp),y
;
; if ( collByte == TILE_PLAYERSTART ) {
;
	cmp     #$03
	bne     L09E5
;
; playerX = mapX << 3;
;
	ldy     #$09
	lda     (sp),y
	asl     a
	asl     a
	asl     a
	sta     _playerX
;
; playerY = (mapY << 3) - 1;
;
	dey
	lda     (sp),y
	asl     a
	asl     a
	asl     a
	sec
	sbc     #$01
	sta     _playerY
;
; if ( ( collByte == TILE_ENEMY1START_RIGHT ) || ( collByte == TILE_ENEMY1START_LEFT ) ) {
;
	ldy     #$0B
L09E5:	lda     (sp),y
	cmp     #$05
	beq     L09E6
	cmp     #$04
	jne     L054B
;
; enemyData[enemyIndex] = newEnemy;
;
L09E6:	ldx     #$00
	lda     _enemyIndex
	jsr     mulax6
	clc
	adc     #<(_enemyData)
	tay
	txa
	adc     #>(_enemyData)
	tax
	tya
	jsr     pushax
	lda     sp
	ldx     sp+1
	clc
	adc     #$02
	bcc     L0553
	inx
L0553:	jsr     pushax
	ldx     #$00
	lda     #$06
	jsr     _memcpy
;
; enemyData[enemyIndex].x = mapX << 3;
;
	ldx     #$00
	lda     _enemyIndex
	jsr     mulax6
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	ldy     #$09
	lda     (sp),y
	asl     a
	asl     a
	asl     a
	ldy     #$00
	sta     (ptr1),y
;
; enemyData[enemyIndex].y = (mapY << 3) - 1;
;
	ldx     #$00
	lda     _enemyIndex
	jsr     mulax6
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	ldy     #$08
	lda     (sp),y
	asl     a
	asl     a
	asl     a
	sec
	sbc     #$01
	ldy     #$01
	sta     (ptr1),y
;
; enemyData[enemyIndex].direction = ( collByte == TILE_ENEMY1START_RIGHT ) ? PAD_RIGHT : PAD_LEFT;
;
	ldx     #$00
	lda     _enemyIndex
	jsr     mulax6
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	ldy     #$0B
	lda     (sp),y
	cmp     #$05
	bne     L09E7
	lda     #$80
	jmp     L09E8
L09E7:	lda     #$40
L09E8:	ldy     #$03
	sta     (ptr1),y
;
; enemyData[enemyIndex].collidingWithPotion = 0;
;
	ldx     #$00
	lda     _enemyIndex
	jsr     mulax6
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	lda     #$00
	iny
	sta     (ptr1),y
;
; enemyData[enemyIndex].state = ENEMY_STATE_NORMAL;
;
	tax
	lda     _enemyIndex
	jsr     mulax6
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	lda     #$00
	iny
	sta     (ptr1),y
;
; for ( k = 0; k < ENEMY_DATA_SIZE; ++k ) {
;
	ldy     #$0A
L09E3:	sta     (sp),y
	lda     (sp),y
	cmp     #$11
	bcs     L09E9
;
; enemySpriteData[enemyIndex][k] = enemySpriteDataTemplate[k];
;
	lda     _enemyIndex
	jsr     pusha0
	lda     #$11
	jsr     tosmula0
	clc
	adc     #<(_enemySpriteData)
	sta     ptr1
	txa
	adc     #>(_enemySpriteData)
	sta     ptr1+1
	ldy     #$0A
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L09E2
	inx
L09E2:	jsr     pushax
	ldy     #$0C
	lda     (sp),y
	tay
	lda     _enemySpriteDataTemplate,y
	ldy     #$00
	jsr     staspidx
;
; for ( k = 0; k < ENEMY_DATA_SIZE; ++k ) {
;
	ldy     #$0A
	clc
	lda     #$01
	adc     (sp),y
	jmp     L09E3
;
; setSpriteFrame(enemySpriteData[enemyIndex], enemyFrames[0]);
;
L09E9:	lda     _enemyIndex
	jsr     pusha0
	lda     #$11
	jsr     tosmula0
	clc
	adc     #<(_enemySpriteData)
	tay
	txa
	adc     #>(_enemySpriteData)
	tax
	tya
	jsr     pushax
	lda     #<(_enemyFrames)
	ldx     #>(_enemyFrames)
	jsr     _setSpriteFrame
;
; ++enemyIndex;
;
	inc     _enemyIndex
;
; ++mapX;
;
L054B:	ldy     #$09
	clc
	lda     #$01
	adc     (sp),y
	sta     (sp),y
;
; if ( mapX >= 32 ) {
;
	cmp     #$20
	bcc     L053A
;
; mapX = 0;
;
	lda     #$00
	sta     (sp),y
;
; ++mapY;
;
	dey
	clc
	lda     #$01
	adc     (sp),y
	sta     (sp),y
;
; for ( index; index <= COLLISION_MAP_SIZE; ++index ) {
;
L053A:	ldy     #$06
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	jmp     L0538
;
; numEnemies = enemyIndex;
;
L0539:	lda     _enemyIndex
	sta     _numEnemies
;
; }
;
	ldy     #$0C
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ setSpriteFrame (__near__ unsigned char *, __near__ const unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_setSpriteFrame: near

.segment	"CODE"

;
; void __fastcall__ setSpriteFrame(u8 *sprite, const u8 *frame) {
;
	jsr     pushax
;
; sSpriteIndex = 2;
;
	lda     #$02
	sta     _sSpriteIndex
;
; sFrameIndex = 0;
;
	lda     #$00
	sta     _sFrameIndex
;
; *(sprite + 2) = *(frame);
;
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     #$02
	bcc     L058D
	inx
L058D:	jsr     pushax
	ldy     #$03
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	jsr     staspidx
;
; *(sprite + 6) = *(frame + 1);
;
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     #$06
	bcc     L0592
	inx
L0592:	jsr     pushax
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	dey
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	dey
	jsr     staspidx
;
; *(sprite + 10) = *(frame + 2);
;
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     #$0A
	bcc     L0598
	inx
L0598:	jsr     pushax
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
;
; *(sprite + 14) = *(frame + 3);
;
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     #$0E
	bcc     L059E
	inx
L059E:	jsr     pushax
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	iny
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
;
; }
;
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ setSpritePalette (__near__ unsigned char *, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_setSpritePalette: near

.segment	"CODE"

;
; void __fastcall__ setSpritePalette(u8 *sprite, u8 palette) {
;
	jsr     pusha
;
; for ( i = 3; i <= 15; i = i + 4 ) {
;
	jsr     decsp1
	lda     #$03
	ldy     #$00
L09EA:	sta     (sp),y
	cmp     #$10
	bcs     L05A4
;
; sprite[i] &= ~(0x3);
;
	lda     (sp),y
	clc
	ldy     #$02
	adc     (sp),y
	sta     ptr1
	lda     #$00
	iny
	adc     (sp),y
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	and     #$FC
	sta     (ptr1),y
;
; sprite[i] |= palette;
;
	lda     (sp),y
	clc
	ldy     #$02
	adc     (sp),y
	pha
	lda     #$00
	iny
	adc     (sp),y
	tax
	pla
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     ptr1
	ldy     #$03
	lda     (sp),y
	ora     ptr1
	ldy     #$00
	jsr     staspidx
;
; for ( i = 3; i <= 15; i = i + 4 ) {
;
	ldy     #$00
	lda     (sp),y
	clc
	adc     #$04
	jmp     L09EA
;
; }
;
L05A4:	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ setSpritePriority (__near__ unsigned char *, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_setSpritePriority: near

.segment	"CODE"

;
; void __fastcall__ setSpritePriority(u8 *sprite, u8 priority) {
;
	jsr     pusha
;
; if ( priority ) {
;
	ldy     #$00
	lda     (sp),y
	beq     L05B5
;
; sprite[3] |= OAM_BEHIND;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$03
	lda     (ptr1),y
	ora     #$20
	sta     (ptr1),y
;
; sprite[7] |= OAM_BEHIND;
;
	dey
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$07
	lda     (ptr1),y
	ora     #$20
	sta     (ptr1),y
;
; sprite[11] |= OAM_BEHIND;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$0B
	lda     (ptr1),y
	ora     #$20
	sta     (ptr1),y
;
; sprite[15] |= OAM_BEHIND;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$0F
	lda     (ptr1),y
	ora     #$20
;
; } else {
;
	jmp     L09EB
;
; sprite[3] &= ~OAM_BEHIND;
;
L05B5:	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$03
	lda     (ptr1),y
	and     #$DF
	sta     (ptr1),y
;
; sprite[7] &= ~OAM_BEHIND;
;
	dey
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$07
	lda     (ptr1),y
	and     #$DF
	sta     (ptr1),y
;
; sprite[11] &= ~OAM_BEHIND;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$0B
	lda     (ptr1),y
	and     #$DF
	sta     (ptr1),y
;
; sprite[15] &= ~OAM_BEHIND;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$0F
	lda     (ptr1),y
	and     #$DF
L09EB:	sta     (ptr1),y
;
; }
;
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ flipSprite (__near__ unsigned char *, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_flipSprite: near

.segment	"CODE"

;
; void __fastcall__ flipSprite(u8 *sprite, u8 flip) {
;
	jsr     pusha
;
; if ( flip ) {
;
	ldy     #$00
	lda     (sp),y
	jeq     L05D1
;
; sprite[0] = 8;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     #$08
	dey
	sta     (ptr1),y
;
; sprite[3] |= OAM_FLIP_H;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$03
	lda     (ptr1),y
	ora     #$40
	sta     (ptr1),y
;
; sprite[4] = 0;
;
	dey
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     #$00
	ldy     #$04
	sta     (ptr1),y
;
; sprite[7] |= OAM_FLIP_H;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$07
	lda     (ptr1),y
	ora     #$40
	sta     (ptr1),y
;
; sprite[8] = 8;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     #$08
	tay
	sta     (ptr1),y
;
; sprite[11] |= OAM_FLIP_H;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$0B
	lda     (ptr1),y
	ora     #$40
	sta     (ptr1),y
;
; sprite[12] = 0;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     #$00
	ldy     #$0C
	sta     (ptr1),y
;
; sprite[15] |= OAM_FLIP_H;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$0F
	lda     (ptr1),y
	ora     #$40
;
; } else {
;
	jmp     L09EC
;
; sprite[0] = 0;
;
L05D1:	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     #$00
	dey
	sta     (ptr1),y
;
; sprite[3] &= ~OAM_FLIP_H;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$03
	lda     (ptr1),y
	and     #$BF
	sta     (ptr1),y
;
; sprite[4] = 8;
;
	dey
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     #$08
	ldy     #$04
	sta     (ptr1),y
;
; sprite[7] &= ~OAM_FLIP_H;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$07
	lda     (ptr1),y
	and     #$BF
	sta     (ptr1),y
;
; sprite[8] = 0;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     #$00
	ldy     #$08
	sta     (ptr1),y
;
; sprite[11] &= ~OAM_FLIP_H;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$0B
	lda     (ptr1),y
	and     #$BF
	sta     (ptr1),y
;
; sprite[12] = 8;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     #$08
	ldy     #$0C
	sta     (ptr1),y
;
; sprite[15] &= ~OAM_FLIP_H;  
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$0F
	lda     (ptr1),y
	and     #$BF
L09EC:	sta     (ptr1),y
;
; }
;
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ spriteCount (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_spriteCount: near

.segment	"CODE"

;
; if ( ++enemySpriteCount >= numEnemies ) {
;
	inc     _enemySpriteCount
	lda     _enemySpriteCount
	cmp     _numEnemies
	bcc     L0605
;
; enemySpriteCount = 0;
;
	lda     #$00
	sta     _enemySpriteCount
;
; }
;
L0605:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ updateEnemySprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updateEnemySprites: near

.segment	"CODE"

;
; for ( i = 0; i < numEnemies; ++i ) {
;
	lda     #$00
	sta     _i
L09EF:	lda     _i
	cmp     _numEnemies
	bcc     L09F3
;
; }
;
	rts
;
; spriteCount();
;
L09F3:	jsr     _spriteCount
;
; spriteFlickerIndex = enemySpriteCount;
;
	lda     _enemySpriteCount
	sta     _spriteFlickerIndex
;
; currentEnemy = &(enemyData[spriteFlickerIndex]);
;
	ldx     #$00
	lda     _spriteFlickerIndex
	jsr     mulax6
	clc
	adc     #<(_enemyData)
	tay
	txa
	adc     #>(_enemyData)
	tax
	tya
	sta     _currentEnemy
	stx     _currentEnemy+1
;
; if ( (*currentEnemy).state == ENEMY_STATE_NORMAL ) {
;
	sta     ptr1
	stx     ptr1+1
	ldy     #$05
	lda     (ptr1),y
	jne     L0619
;
; if ( ( frameCount & 0x0F ) == 0x0F ) {
;
	lda     _frameCount
	and     #$0F
	cmp     #$0F
	bne     L061C
;
; (*currentEnemy).frame ^= 1;
;
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	eor     #$01
	sta     (ptr1),y
;
; setSpriteFrame(enemySpriteData[spriteFlickerIndex], enemyFrames[(*currentEnemy).frame]);
;
	lda     _spriteFlickerIndex
	jsr     pusha0
	lda     #$11
	jsr     tosmula0
	clc
	adc     #<(_enemySpriteData)
	tay
	txa
	adc     #>(_enemySpriteData)
	tax
	tya
	jsr     pushax
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	ldy     #$02
	ldx     #$00
	lda     (ptr1),y
	jsr     aslax2
	clc
	adc     #<(_enemyFrames)
	tay
	txa
	adc     #>(_enemyFrames)
	tax
	tya
	jsr     _setSpriteFrame
;
; if ( (*currentEnemy).collidingWithPotion ) {
;
L061C:	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	ldy     #$04
	lda     (ptr1),y
	beq     L09F0
;
; setSpritePalette(enemySpriteData[spriteFlickerIndex], 0x0);
;
	lda     _spriteFlickerIndex
	jsr     pusha0
	lda     #$11
	jsr     tosmula0
	clc
	adc     #<(_enemySpriteData)
	tay
	txa
	adc     #>(_enemySpriteData)
	tax
	tya
	jsr     pushax
	lda     #$00
;
; } else {
;
	jmp     L09ED
;
; setSpritePalette(enemySpriteData[spriteFlickerIndex], 0x3);
;
L09F0:	lda     _spriteFlickerIndex
	jsr     pusha0
	lda     #$11
	jsr     tosmula0
	clc
	adc     #<(_enemySpriteData)
	tay
	txa
	adc     #>(_enemySpriteData)
	tax
	tya
	jsr     pushax
	lda     #$03
L09ED:	jsr     _setSpritePalette
;
; oamSpriteIndex = oam_meta_spr((*currentEnemy).x, (*currentEnemy).y, oamSpriteIndex, enemySpriteData[spriteFlickerIndex]);    
;
	jsr     decsp3
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	ldy     #$02
	sta     (sp),y
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	dey
	lda     (ptr1),y
	sta     (sp),y
	lda     _oamSpriteIndex
	dey
	sta     (sp),y
	lda     _spriteFlickerIndex
	jsr     pusha0
	lda     #$11
	jsr     tosmula0
	clc
	adc     #<(_enemySpriteData)
	tay
	txa
	adc     #>(_enemySpriteData)
	tax
	tya
;
; } else if ( (*currentEnemy).state == ENEMY_STATE_MUSHROOM ) {
;
	jmp     L09F2
L0619:	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	lda     (ptr1),y
	cmp     #$01
	bne     L09F1
;
; oamSpriteIndex = oam_meta_spr((*currentEnemy).x, (*currentEnemy).y, oamSpriteIndex, mushroomSpriteDataTemplate);       
;
	jsr     decsp3
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	ldy     #$02
	sta     (sp),y
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	dey
	lda     (ptr1),y
	sta     (sp),y
	lda     _oamSpriteIndex
	dey
	sta     (sp),y
	lda     #<(_mushroomSpriteDataTemplate)
	ldx     #>(_mushroomSpriteDataTemplate)
L09F2:	jsr     _oam_meta_spr
	sta     _oamSpriteIndex
;
; for ( i = 0; i < numEnemies; ++i ) {
;
L09F1:	inc     _i
	jmp     L09EF

.endproc

; ---------------------------------------------------------------
; void __near__ updatePlayerSprite (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updatePlayerSprite: near

.segment	"CODE"

;
; if ( ( playerState == PLAYER_STATE_NORMAL ) || ( playerState == PLAYER_STATE_JUMPING ) ) {
;
	lda     _playerState
	beq     L09F5
	cmp     #$03
	bne     L09F7
;
; if ( pad & PAD_RIGHT ) {
;
L09F5:	lda     _pad
	and     #$80
	beq     L09F6
;
; flipSprite(playerSpriteData, 1);
;
	lda     #<(_playerSpriteData)
	ldx     #>(_playerSpriteData)
	jsr     pushax
	lda     #$01
;
; } else if ( pad & PAD_LEFT ) {
;
	jmp     L09F4
L09F6:	lda     _pad
	and     #$40
	beq     L0656
;
; flipSprite(playerSpriteData, 0);
;
	lda     #<(_playerSpriteData)
	ldx     #>(_playerSpriteData)
	jsr     pushax
	lda     #$00
L09F4:	jsr     _flipSprite
;
; setSpriteFrame(playerSpriteData, playerFrames[playerFrame]);
;
L0656:	lda     #<(_playerSpriteData)
	ldx     #>(_playerSpriteData)
	jsr     pushax
	ldx     #$00
	lda     _playerFrame
	jsr     aslax2
	clc
	adc     #<(_playerFrames)
	tay
	txa
	adc     #>(_playerFrames)
	tax
	tya
	jsr     _setSpriteFrame
;
; if ( ( frameCount & 0x0F ) == 0x0F ) {
;
	lda     _frameCount
	and     #$0F
	cmp     #$0F
	bne     L0670
;
; playerFrame ^= 1;
;
	lda     _playerFrame
	eor     #$01
	sta     _playerFrame
;
; setSpriteFrame(playerSpriteData, playerFrames[playerFrame]);
;
	lda     #<(_playerSpriteData)
	ldx     #>(_playerSpriteData)
	jsr     pushax
	ldx     #$00
	lda     _playerFrame
	jsr     aslax2
	clc
	adc     #<(_playerFrames)
	tay
	txa
	adc     #>(_playerFrames)
	tax
	tya
	jsr     _setSpriteFrame
;
; } else if ( playerState == PLAYER_STATE_CLIMBING ) {
;
	jmp     L0670
L09F7:	lda     _playerState
	cmp     #$02
	bne     L0670
;
; setSpriteFrame(playerSpriteData, playerFrames[PLAYER_FRAME_CLIMBING]);
;
	lda     #<(_playerSpriteData)
	ldx     #>(_playerSpriteData)
	jsr     pushax
	lda     #<(_playerFrames+8)
	ldx     #>(_playerFrames+8)
	jsr     _setSpriteFrame
;
; if ( ( frameCount & 0x0F ) == 0x0F ) {
;
	lda     _frameCount
	and     #$0F
	cmp     #$0F
	bne     L0670
;
; playerFrame ^= 1;
;
	lda     _playerFrame
	eor     #$01
	sta     _playerFrame
;
; flipSprite(playerSpriteData, playerFrame);
;
	lda     #<(_playerSpriteData)
	ldx     #>(_playerSpriteData)
	jsr     pushax
	lda     _playerFrame
	jsr     _flipSprite
;
; oamSpriteIndex = oam_meta_spr(playerX, playerY, oamSpriteIndex, playerSpriteData); 
;
L0670:	jsr     decsp3
	lda     _playerX
	ldy     #$02
	sta     (sp),y
	lda     _playerY
	dey
	sta     (sp),y
	lda     _oamSpriteIndex
	dey
	sta     (sp),y
	lda     #<(_playerSpriteData)
	ldx     #>(_playerSpriteData)
	jsr     _oam_meta_spr
	sta     _oamSpriteIndex
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ updatePotionSprite (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updatePotionSprite: near

.segment	"CODE"

;
; oamSpriteIndex = oam_meta_spr(potionX, potionY, oamSpriteIndex, potionSpriteData); 
;
	jsr     decsp3
	lda     _potionX
	ldy     #$02
	sta     (sp),y
	lda     _potionY
	dey
	sta     (sp),y
	lda     _oamSpriteIndex
	dey
	sta     (sp),y
	lda     #<(_potionSpriteData)
	ldx     #>(_potionSpriteData)
	jsr     _oam_meta_spr
	sta     _oamSpriteIndex
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ drawScoreboard (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_drawScoreboard: near

.segment	"CODE"

;
; vram_adr(NTADR_A(0, 1));
;
	ldx     #$20
	txa
	jsr     _vram_adr
;
; vram_fill(0x10, 5);
;
	lda     #$10
	jsr     pusha
	ldx     #$00
	lda     #$05
	jmp     _vram_fill

.endproc

; ---------------------------------------------------------------
; void __near__ updateScoreboard (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updateScoreboard: near

.segment	"CODE"

;
; memcpy(updateList, updateListData, sizeof(updateListData));
;
	ldy     #$07
L06B1:	lda     _updateListData,y
	sta     _updateList,y
	dey
	bpl     L06B1
;
; set_vram_update(updateList);
;
	lda     #<(_updateList)
	ldx     #>(_updateList)
	jmp     _set_vram_update

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ four_Sides (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_four_Sides: near

.segment	"CODE"

;
; void __fastcall__ four_Sides(u8 originX, u8 originY) {
;
	jsr     pusha
;
; leftSide = originX + 1;
;
	ldy     #$01
	lda     (sp),y
	clc
	adc     #$01
	sta     _leftSide
;
; rightSide = originX + 15;
;
	lda     (sp),y
	clc
	adc     #$0F
	sta     _rightSide
;
; topSide = originY;
;
	dey
	lda     (sp),y
	sta     _topSide
;
; bottomSide = originY + 14;
;
	lda     (sp),y
	clc
	adc     #$0E
	sta     _bottomSide
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ four_SidesSmall (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_four_SidesSmall: near

.segment	"CODE"

;
; void __fastcall__ four_SidesSmall(u8 originX, u8 originY) {
;
	jsr     pusha
;
; leftSide = originX + 1;
;
	ldy     #$01
	lda     (sp),y
	clc
	adc     #$01
	sta     _leftSide
;
; rightSide = originX + 7;
;
	lda     (sp),y
	clc
	adc     #$07
	sta     _rightSide
;
; topSide = originY;
;
	dey
	lda     (sp),y
	sta     _topSide
;
; bottomSide = originY + 7;
;
	lda     (sp),y
	clc
	adc     #$07
	sta     _bottomSide
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ getCollisionIndex (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_getCollisionIndex: near

.segment	"CODE"

;
; void __fastcall__ getCollisionIndex(u8 screenX, u8 screenY) {
;
	jsr     pusha
;
; collisionIndex = ( screenX >> 3 ) + ( ( screenY & 0xF8 ) << 2);
;
	ldy     #$01
	ldx     #$00
	lda     (sp),y
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	stx     ptr1+1
	lda     (sp,x)
	and     #$F8
	jsr     shlax2
	clc
	adc     ptr1
	sta     _collisionIndex
	txa
	adc     ptr1+1
	sta     _collisionIndex+1
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ __fastcall__ smallCollideCheckVertical (unsigned char, unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_smallCollideCheckVertical: near

.segment	"CODE"

;
; u8 __fastcall__ smallCollideCheckVertical(u8 originX, u8 originY, u8 direction) {
;
	jsr     pusha
;
; leftSide = originX;
;
	ldy     #$02
	lda     (sp),y
	sta     _leftSide
;
; rightSide = originX + 8;
;
	lda     (sp),y
	clc
	adc     #$08
	sta     _rightSide
;
; topSide = originY;
;
	dey
	lda     (sp),y
	sta     _topSide
;
; bottomSide = originY + 8;
;
	lda     (sp),y
	clc
	adc     #$08
	sta     _bottomSide
;
; collisionIndex = 0;
;
	ldx     #$00
	txa
	sta     _collisionIndex
	sta     _collisionIndex+1
;
; if ( direction & PAD_UP ) {
;
	dey
	lda     (sp),y
	and     #$10
	beq     L09FA
;
; collisionIndex = ( rightSide >> 3 ) + ( ( topSide & 0xF8 ) << 2);
;
	lda     _rightSide
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	stx     ptr1+1
	lda     _topSide
	and     #$F8
	jsr     shlax2
	clc
	adc     ptr1
	sta     _collisionIndex
	txa
	adc     ptr1+1
	sta     _collisionIndex+1
;
; if ( collisionMap[collisionIndex] != TILE_ALLCOLLIDE ) {
;
	lda     _collisionMap
	clc
	adc     _collisionIndex
	sta     ptr1
	lda     _collisionMap+1
	adc     _collisionIndex+1
	sta     ptr1+1
	lda     (ptr1),y
	cmp     #$01
	beq     L06F6
;
; collisionIndex = ( leftSide >> 3 ) + ( ( topSide & 0xF8 ) << 2);
;
	ldx     #$00
	lda     _leftSide
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	stx     ptr1+1
	lda     _topSide
;
; } else if ( direction & PAD_DOWN ) {
;
	jmp     L0A02
L09FA:	lda     (sp),y
	and     #$20
	beq     L06F6
;
; collisionIndex = ( rightSide >> 3 ) + ( ( bottomSide & 0xF8 ) << 2);
;
	lda     _rightSide
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _bottomSide
	and     #$F8
	jsr     shlax2
	clc
	adc     ptr1
	sta     _collisionIndex
	txa
	adc     ptr1+1
	sta     _collisionIndex+1
;
; if ( collisionMap[collisionIndex] != TILE_ALLCOLLIDE ) {
;
	lda     _collisionMap
	clc
	adc     _collisionIndex
	sta     ptr1
	lda     _collisionMap+1
	adc     _collisionIndex+1
	sta     ptr1+1
	lda     (ptr1),y
	cmp     #$01
	beq     L06F6
;
; collisionIndex = ( leftSide >> 3 ) + ( ( bottomSide & 0xF8 ) << 2);
;
	ldx     #$00
	lda     _leftSide
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	stx     ptr1+1
	lda     _bottomSide
L0A02:	and     #$F8
	jsr     shlax2
	clc
	adc     ptr1
	sta     _collisionIndex
	txa
	adc     ptr1+1
	sta     _collisionIndex+1
;
; if ( collisionIndex ) {
;
L06F6:	lda     _collisionIndex
	ora     _collisionIndex+1
	beq     L06FE
;
; return collisionMap[collisionIndex]; 
;
	lda     _collisionMap
	clc
	adc     _collisionIndex
	sta     ptr1
	lda     _collisionMap+1
	adc     _collisionIndex+1
	sta     ptr1+1
	ldx     #$00
	lda     (ptr1),y
	jmp     incsp3
;
; return 0;
;
L06FE:	tax
;
; }
;
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ collideCheckVertical (unsigned char, unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_collideCheckVertical: near

.segment	"CODE"

;
; void __fastcall__ collideCheckVertical(u8 originX, u8 originY, u8 direction) {
;
	jsr     pusha
;
; leftSide = originX + 2;
;
	ldy     #$02
	lda     (sp),y
	clc
	adc     #$02
	sta     _leftSide
;
; rightSide = originX + 14;
;
	lda     (sp),y
	clc
	adc     #$0E
	sta     _rightSide
;
; topSide = originY + 1;
;
	dey
	lda     (sp),y
	clc
	adc     #$01
	sta     _topSide
;
; bottomSide = originY + 17;
;
	lda     (sp),y
	clc
	adc     #$11
	sta     _bottomSide
;
; collisionIndex = 0;
;
	ldx     #$00
	txa
	sta     _collisionIndex
	sta     _collisionIndex+1
;
; if ( direction & PAD_UP ) {
;
	dey
	lda     (sp),y
	and     #$10
	beq     L0A05
;
; collisionIndex = ( rightSide >> 3 ) + ( ( topSide & 0xF8 ) << 2);
;
	lda     _rightSide
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	stx     ptr1+1
	lda     _topSide
	and     #$F8
	jsr     shlax2
	clc
	adc     ptr1
	sta     _collisionIndex
	txa
	adc     ptr1+1
	sta     _collisionIndex+1
;
; if ( collisionMap[collisionIndex] != TILE_ALLCOLLIDE )  {
;
	lda     _collisionMap
	clc
	adc     _collisionIndex
	sta     ptr1
	lda     _collisionMap+1
	adc     _collisionIndex+1
	sta     ptr1+1
	lda     (ptr1),y
	cmp     #$01
	beq     L072A
;
; collisionIndex = ( leftSide >> 3 ) + ( ( topSide & 0xF8 ) << 2);
;
	ldx     #$00
	lda     _leftSide
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	stx     ptr1+1
	lda     _topSide
;
; } else if ( direction & PAD_DOWN ) {
;
	jmp     L0A0D
L0A05:	lda     (sp),y
	and     #$20
	beq     L072A
;
; collisionIndex = ( rightSide >> 3 ) + ( ( bottomSide & 0xF8 ) << 2);
;
	lda     _rightSide
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _bottomSide
	and     #$F8
	jsr     shlax2
	clc
	adc     ptr1
	sta     _collisionIndex
	txa
	adc     ptr1+1
	sta     _collisionIndex+1
;
; if ( collisionMap[collisionIndex] != TILE_ALLCOLLIDE ) {
;
	lda     _collisionMap
	clc
	adc     _collisionIndex
	sta     ptr1
	lda     _collisionMap+1
	adc     _collisionIndex+1
	sta     ptr1+1
	lda     (ptr1),y
	cmp     #$01
	beq     L072A
;
; collisionIndex = ( leftSide >> 3 ) + ( ( bottomSide & 0xF8 ) << 2);
;
	ldx     #$00
	lda     _leftSide
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	stx     ptr1+1
	lda     _bottomSide
L0A0D:	and     #$F8
	jsr     shlax2
	clc
	adc     ptr1
	sta     _collisionIndex
	txa
	adc     ptr1+1
	sta     _collisionIndex+1
;
; verticalCollideCheck = collisionMap[collisionIndex]; 
;
L072A:	lda     _collisionMap
	clc
	adc     _collisionIndex
	sta     ptr1
	lda     _collisionMap+1
	adc     _collisionIndex+1
	sta     ptr1+1
	lda     (ptr1),y
	sta     _verticalCollideCheck
;
; }
;
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ collideCheckHorizontal (unsigned char, unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_collideCheckHorizontal: near

.segment	"CODE"

;
; void __fastcall__ collideCheckHorizontal(u8 originX, u8 originY, u8 direction) {
;
	jsr     pusha
;
; leftSide = originX;
;
	ldy     #$02
	lda     (sp),y
	sta     _leftSide
;
; rightSide = originX + 16;
;
	lda     (sp),y
	clc
	adc     #$10
	sta     _rightSide
;
; topSide = originY + 4;
;
	dey
	lda     (sp),y
	clc
	adc     #$04
	sta     _topSide
;
; bottomSide = originY + 12;
;
	lda     (sp),y
	clc
	adc     #$0C
	sta     _bottomSide
;
; if ( direction & PAD_LEFT ) {
;
	dey
	lda     (sp),y
	and     #$40
	beq     L0A10
;
; collisionIndex = ( leftSide >> 3 ) + ( ( topSide & 0xF8 ) << 2);
;
	ldx     #$00
	lda     _leftSide
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	stx     ptr1+1
	lda     _topSide
	and     #$F8
	jsr     shlax2
	clc
	adc     ptr1
	sta     _collisionIndex
	txa
	adc     ptr1+1
	sta     _collisionIndex+1
;
; if ( collisionMap[collisionIndex] == TILE_NOCOLLIDE ) {
;
	lda     _collisionMap
	clc
	adc     _collisionIndex
	sta     ptr1
	lda     _collisionMap+1
	adc     _collisionIndex+1
	sta     ptr1+1
	lda     (ptr1),y
	bne     L0756
;
; collisionIndex = ( leftSide >> 3 ) + ( ( bottomSide & 0xF8 ) << 2);
;
	tax
	lda     _leftSide
;
; } else if ( direction & PAD_RIGHT ) {
;
	jmp     L0A1E
L0A10:	lda     (sp),y
	and     #$80
	beq     L0756
;
; getCollisionIndex(rightSide, topSide);
;
	lda     _rightSide
	jsr     pusha
	lda     _topSide
	jsr     _getCollisionIndex
;
; if ( collisionMap[collisionIndex] == TILE_NOCOLLIDE ) {
;
	lda     _collisionMap
	clc
	adc     _collisionIndex
	sta     ptr1
	lda     _collisionMap+1
	adc     _collisionIndex+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	bne     L0756
;
; collisionIndex = ( rightSide >> 3 ) + ( ( bottomSide & 0xF8 ) << 2);
;
	tax
	lda     _rightSide
L0A1E:	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	stx     ptr1+1
	lda     _bottomSide
	and     #$F8
	jsr     shlax2
	clc
	adc     ptr1
	sta     _collisionIndex
	txa
	adc     ptr1+1
	sta     _collisionIndex+1
;
; horizontalCollideCheck = collisionMap[collisionIndex];
;
L0756:	lda     _collisionMap
	clc
	adc     _collisionIndex
	sta     ptr1
	lda     _collisionMap+1
	adc     _collisionIndex+1
	sta     ptr1+1
	lda     (ptr1),y
	sta     _horizontalCollideCheck
;
; }
;
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ checkPlayerLadderCollision (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_checkPlayerLadderCollision: near

.segment	"CODE"

;
; leftSide = playerX + 3;
;
	lda     _playerX
	clc
	adc     #$03
	sta     _leftSide
;
; rightSide = playerX + 11;
;
	lda     _playerX
	clc
	adc     #$0B
	sta     _rightSide
;
; topSide = playerY + 9;
;
	lda     _playerY
	clc
	adc     #$09
	sta     _topSide
;
; bottomSide = playerY + 16;
;
	lda     _playerY
	clc
	adc     #$10
	sta     _bottomSide
;
; collisionLeft = collisionMap[( leftSide >> 3 ) + ( ( bottomSide & 0xF8 ) << 2)];
;
	ldx     #$00
	lda     _leftSide
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	stx     ptr1+1
	lda     _bottomSide
	and     #$F8
	jsr     shlax2
	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	clc
	adc     _collisionMap
	sta     ptr1
	txa
	adc     _collisionMap+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     _collisionLeft
;
; collisionRight = collisionMap[( rightSide >> 3 ) + ( ( bottomSide & 0xF8 ) << 2)];
;
	ldx     #$00
	lda     _rightSide
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	stx     ptr1+1
	lda     _bottomSide
	and     #$F8
	jsr     shlax2
	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	clc
	adc     _collisionMap
	sta     ptr1
	txa
	adc     _collisionMap+1
	sta     ptr1+1
	lda     (ptr1),y
	sta     _collisionRight
;
; ( ( collisionLeft == TILE_LADDER )  || ( collisionLeft == TILE_LADDER_TOP ) ) &&
;
	lda     _collisionLeft
	cmp     #$06
	beq     L0A1F
	cmp     #$07
	beq     L0A1F
	tya
	jmp     L0A28
;
; ( ( collisionRight == TILE_LADDER ) || ( collisionRight == TILE_LADDER_TOP ) ) 
;
L0A1F:	lda     _collisionRight
	cmp     #$06
	beq     L0A25
	cmp     #$07
	beq     L0A25
	tya
	jmp     L0A28
;
; playerState = PLAYER_STATE_CLIMBING;
;
L0A25:	lda     #$02
	sta     _playerState
;
; if ( collisionLeft == TILE_LADDER ) {
;
	lda     _collisionLeft
	cmp     #$06
	bne     L0A26
;
; playerX = ( playerX + 3 ) & 0xf8; 
;
	lda     _playerX
	clc
	adc     #$03
	and     #$F8
	sta     _playerX
;
; } else if ( collisionRight == TILE_LADDER ) {
;
	rts
L0A26:	lda     _collisionRight
	cmp     #$06
	bne     L0795
;
; playerX = ( playerX - 3 ) & 0xf8;
;
	lda     _playerX
	sec
	sbc     #$03
	and     #$F8
	sta     _playerX
;
; } else {
;
	rts
;
; playerState = PLAYER_STATE_NORMAL;
;
L0A28:	sta     _playerState
;
; }
;
L0795:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ bgVertCollideCheck (__near__ unsigned char *, __near__ unsigned char *, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bgVertCollideCheck: near

.segment	"CODE"

;
; void __fastcall__ bgVertCollideCheck(u8 *x, u8 *y, u8 dir) {
;
	jsr     pusha
;
; collideCheckVertical(*x, *y, dir);
;
	jsr     decsp2
	ldy     #$06
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	iny
	sta     (sp),y
	ldy     #$04
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	sta     (sp),y
	ldy     #$02
	lda     (sp),y
	jsr     _collideCheckVertical
;
; if ( verticalCollideCheck ) {
;
	lda     _verticalCollideCheck
	beq     L07A5
;
; if ( dir & PAD_UP ) {
;
	ldy     #$00
	lda     (sp),y
	and     #$10
	beq     L079F
;
; *y = (*y & 0xf8) + 7;
;
	ldy     #$04
	jsr     pushwysp
	ldy     #$04
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	and     #$F8
	clc
	adc     #$07
;
; } else {
;
	jmp     L0A29
;
; *y = (*y & 0xf8) - 1;
;
L079F:	ldy     #$04
	jsr     pushwysp
	ldy     #$04
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	and     #$F8
	sec
	sbc     #$01
L0A29:	jsr     staspidx
;
; }
;
L07A5:	jmp     incsp5

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ bgHorizCollideCheck (__near__ unsigned char *, __near__ unsigned char *, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bgHorizCollideCheck: near

.segment	"CODE"

;
; void __fastcall__ bgHorizCollideCheck(u8 *x, u8 *y, u8 dir) {
;
	jsr     pusha
;
; collideCheckHorizontal(*x, *y, dir);
;
	jsr     decsp2
	ldy     #$06
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	iny
	sta     (sp),y
	ldy     #$04
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	sta     (sp),y
	ldy     #$02
	lda     (sp),y
	jsr     _collideCheckHorizontal
;
; if ( horizontalCollideCheck == TILE_ALLCOLLIDE ) {
;
	lda     _horizontalCollideCheck
	cmp     #$01
	bne     L07B8
;
; if ( dir & PAD_LEFT ) {
;
	ldy     #$00
	lda     (sp),y
	and     #$40
	beq     L0A2C
;
; *x = (*x & 0xf8) + 7;
;
	ldy     #$06
	jsr     pushwysp
	ldy     #$06
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	and     #$F8
	clc
	adc     #$07
;
; } else if ( dir & PAD_RIGHT ) {
;
	jmp     L0A2A
L0A2C:	lda     (sp),y
	and     #$80
	beq     L07B8
;
; *x = (*x & 0xf8);
;
	ldy     #$06
	jsr     pushwysp
	ldy     #$06
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	and     #$F8
L0A2A:	jsr     staspidx
;
; }
;
L07B8:	jmp     incsp5

.endproc

; ---------------------------------------------------------------
; void __near__ enemyCollideCheck (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enemyCollideCheck: near

.segment	"CODE"

;
; enemyIndex = 0;
;
	lda     #$00
	sta     _enemyIndex
;
; enemyColliding = 0;
;
	sta     _enemyColliding
;
; enemyCollidedIndex = 0;
;
	sta     _enemyCollidedIndex
;
; while ( !enemyColliding && ( enemyIndex < numEnemies ) ) {
;
	jmp     L07C6
;
; currentEnemy = &(enemyData[enemyIndex]);
;
L0A2E:	lda     _enemyIndex
	jsr     mulax6
	clc
	adc     #<(_enemyData)
	tay
	txa
	adc     #>(_enemyData)
	tax
	tya
	sta     _currentEnemy
	stx     _currentEnemy+1
;
; enemyTop = (*currentEnemy).y + 2;
;
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	clc
	adc     #$02
	sta     _enemyTop
;
; enemyBottom = (*currentEnemy).y + 14;
;
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	lda     (ptr1),y
	clc
	adc     #$0E
	sta     _enemyBottom
;
; enemyLeft = (*currentEnemy).x + 2;
;
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	dey
	lda     (ptr1),y
	clc
	adc     #$02
	sta     _enemyLeft
;
; enemyRight = (*currentEnemy).x + 14;
;
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	lda     (ptr1),y
	clc
	adc     #$0E
	sta     _enemyRight
;
; if ( !( rightSide  <  enemyLeft  || 
;
	lda     _rightSide
	cmp     _enemyLeft
	bcc     L0A2F
;
; leftSide   >= enemyRight || 
;
	lda     _leftSide
	cmp     _enemyRight
	bcs     L0A2F
;
; bottomSide <  enemyTop   || 
;
	lda     _bottomSide
	cmp     _enemyTop
	bcc     L0A2F
;
; topSide    >= enemyBottom ) ) {
;
	lda     _topSide
	cmp     _enemyBottom
	bcs     L0A2F
	tya
	jmp     L07E2
L0A2F:	lda     #$01
L07E2:	jsr     bnega
	beq     L0A31
;
; switch ( (*currentEnemy).state ) {
;
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	ldy     #$05
	lda     (ptr1),y
;
; }
;
	beq     L0A30
	cmp     #$01
	beq     L07EE
	cmp     #$03
	beq     L0A31
	jmp     L0A31
;
; enemyColliding = 1;
;
L0A30:	lda     #$01
	sta     _enemyColliding
;
; enemyCollidedIndex = enemyIndex;
;
	lda     _enemyIndex
	sta     _enemyCollidedIndex
;
; break;
;
	jmp     L0A31
;
; (*currentEnemy).state = ENEMY_STATE_DEAD;
;
L07EE:	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	lda     #$03
	sta     (ptr1),y
;
; ++enemyIndex;
;
L0A31:	inc     _enemyIndex
;
; while ( !enemyColliding && ( enemyIndex < numEnemies ) ) {
;
L07C6:	lda     _enemyColliding
	bne     L0A32
	tax
	lda     _enemyIndex
	cmp     _numEnemies
	jcc     L0A2E
L0A32:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ potionEnemyCollideCheck (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_potionEnemyCollideCheck: near

.segment	"CODE"

;
; enemyColliding = 0;
;
	lda     #$00
	sta     _enemyColliding
;
; if ( potionIsActive ) {
;
	lda     _potionIsActive
	beq     L0A35
;
; four_SidesSmall(potionX, potionY);
;
	lda     _potionX
	jsr     pusha
	lda     _potionY
	jsr     _four_SidesSmall
;
; enemyCollideCheck();
;
	jsr     _enemyCollideCheck
;
; if ( enemyColliding ) {
;
	lda     _enemyColliding
	beq     L0A35
;
; killPotion();
;
	jsr     _killPotion
;
; enemyData[enemyCollidedIndex].state = ENEMY_STATE_MUSHROOM;
;
	ldx     #$00
	lda     _enemyCollidedIndex
	jsr     mulax6
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	lda     #$01
	ldy     #$05
	sta     (ptr1),y
;
; enemyColliding = 0;
;
	lda     #$00
L0A35:	sta     _enemyColliding
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ updateEnemyMovement (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updateEnemyMovement: near

.segment	"CODE"

;
; for ( i = 0; i < numEnemies; i++ ) {
;
	lda     #$00
	sta     _i
	tax
L0A37:	lda     _i
	cmp     _numEnemies
	bcc     L0A3F
;
; }
;
	rts
;
; currentEnemy = &(enemyData[i]);
;
L0A3F:	jsr     mulax6
	clc
	adc     #<(_enemyData)
	tay
	txa
	adc     #>(_enemyData)
	tax
	tya
	sta     _currentEnemy
	stx     _currentEnemy+1
;
; if ( (*currentEnemy).state == ENEMY_STATE_MUSHROOM ) {
;
	sta     ptr1
	stx     ptr1+1
	ldy     #$05
	ldx     #$00
	lda     (ptr1),y
	cmp     #$01
;
; continue;
;
	jeq     L0A3E
;
; collideCheckVertical((*currentEnemy).x, (*currentEnemy).y + 1, PAD_DOWN);
;
	jsr     decsp2
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	lda     (ptr1,x)
	ldy     #$01
	sta     (sp),y
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	lda     (ptr1),y
	clc
	adc     #$01
	dey
	sta     (sp),y
	lda     #$20
	jsr     _collideCheckVertical
;
; if ( verticalCollideCheck != TILE_ALLCOLLIDE ) {
;
	lda     _verticalCollideCheck
	cmp     #$01
	beq     L081D
;
; (*currentEnemy).y += 1;
;
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	clc
	adc     #$01
;
; } else {
;
	jmp     L0A36
;
; if ( (*currentEnemy).direction == PAD_RIGHT ) {
;
L081D:	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	ldy     #$03
	lda     (ptr1),y
	cmp     #$80
	bne     L0823
;
; (*currentEnemy).x += 1;
;
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	clc
	adc     #$01
	sta     (ptr1),y
;
; collideCheckHorizontal((*currentEnemy).x, (*currentEnemy).y, PAD_RIGHT);
;
	jsr     decsp2
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	lda     (ptr1),y
	iny
	sta     (sp),y
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	lda     (ptr1),y
	dey
	sta     (sp),y
	lda     #$80
	jsr     _collideCheckHorizontal
;
; if ( ( horizontalCollideCheck == TILE_ALLCOLLIDE ) || ( horizontalCollideCheck == TILE_ENEMYCOLLIDE ) ) {
;
	ldx     #$00
	lda     _horizontalCollideCheck
	cmp     #$01
	beq     L0A3A
	cmp     #$02
	jne     L0A3E
;
; flipSprite(enemySpriteData[i], 0);
;
L0A3A:	lda     _i
	jsr     pusha0
	lda     #$11
	jsr     tosmula0
	clc
	adc     #<(_enemySpriteData)
	tay
	txa
	adc     #>(_enemySpriteData)
	tax
	tya
	jsr     pushax
	lda     #$00
	jsr     _flipSprite
;
; (*currentEnemy).direction = PAD_LEFT;
;
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	ldx     #$00
	lda     #$40
	ldy     #$03
	sta     (ptr1),y
;
; } else {
;
	jmp     L0A3E
;
; (*currentEnemy).x -= 1;
;
L0823:	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; collideCheckHorizontal((*currentEnemy).x, (*currentEnemy).y, PAD_LEFT);
;
	jsr     decsp2
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	lda     (ptr1),y
	iny
	sta     (sp),y
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	lda     (ptr1),y
	dey
	sta     (sp),y
	lda     #$40
	jsr     _collideCheckHorizontal
;
; if ( ( horizontalCollideCheck == TILE_ALLCOLLIDE ) || ( horizontalCollideCheck == TILE_ENEMYCOLLIDE ) ) {
;
	ldx     #$00
	lda     _horizontalCollideCheck
	cmp     #$01
	beq     L0A3D
	cmp     #$02
	bne     L0A3E
;
; flipSprite(enemySpriteData[i], 1);
;
L0A3D:	lda     _i
	jsr     pusha0
	lda     #$11
	jsr     tosmula0
	clc
	adc     #<(_enemySpriteData)
	tay
	txa
	adc     #>(_enemySpriteData)
	tax
	tya
	jsr     pushax
	lda     #$01
	jsr     _flipSprite
;
; (*currentEnemy).direction = PAD_RIGHT;
;
	lda     _currentEnemy
	sta     ptr1
	lda     _currentEnemy+1
	sta     ptr1+1
	lda     #$80
	ldy     #$03
L0A36:	sta     (ptr1),y
;
; for ( i = 0; i < numEnemies; i++ ) {
;
	ldx     #$00
L0A3E:	lda     _i
	clc
	adc     #$01
	sta     _i
	jmp     L0A37

.endproc

; ---------------------------------------------------------------
; void __near__ updatePlayerJumpFall (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updatePlayerJumpFall: near

.segment	"CODE"

;
; collideBottom = 0;
;
	lda     #$00
	sta     _collideBottom
;
; if ( !(pad & PAD_A ) ) {
;
	lda     _pad
	and     #$01
	bne     L0A41
;
; jumpButtonReset = 1;
;
	lda     #$01
	sta     _jumpButtonReset
;
; if ( !( pad & PAD_A ) && playerJumping && ( playerVertVel > 0 ) ) {
;
L0A41:	lda     _pad
	and     #$01
	bne     L0A45
	lda     _playerJumping
	beq     L0A45
	lda     _playerVertVel
	sec
	sbc     #$01
	bvs     L085F
	eor     #$80
L085F:	bpl     L0A45
;
; playerVertVel = 0;
;
	lda     #$00
	sta     _playerVertVel
;
; if ( playerState == PLAYER_STATE_JUMPING ) {
;
L0A45:	lda     _playerState
	cmp     #$03
	bne     L0863
;
; playerY -= playerVertVel;
;
	lda     _playerVertVel
	eor     #$FF
	sec
	adc     _playerY
	sta     _playerY
;
; if ( playerVertVel > 0 ) {
;
	lda     _playerVertVel
	sec
	sbc     #$01
	bvs     L086B
	eor     #$80
L086B:	bpl     L0868
;
; collideCheckVertical(playerX, playerY, PAD_UP);
;
	jsr     decsp2
	lda     _playerX
	ldy     #$01
	sta     (sp),y
	lda     _playerY
	dey
	sta     (sp),y
	lda     #$10
	jsr     _collideCheckVertical
;
; if ( verticalCollideCheck == TILE_ALLCOLLIDE ) { 
;
	lda     _verticalCollideCheck
	cmp     #$01
	jne     L089C
;
; playerY = (playerY & 0xF8) + 8;
;
	lda     _playerY
	and     #$F8
	clc
	adc     #$08
	sta     _playerY
;
; } else {
;
	jmp     L089C
;
; collideCheckVertical(playerX, playerY + 2, PAD_DOWN);
;
L0868:	jsr     decsp2
	lda     _playerX
	ldy     #$01
	sta     (sp),y
	lda     _playerY
	clc
	adc     #$02
	dey
	sta     (sp),y
	lda     #$20
	jsr     _collideCheckVertical
;
; if ( ( verticalCollideCheck == TILE_ALLCOLLIDE ) || ( verticalCollideCheck == TILE_LADDER_TOP ) ) { 
;
	lda     _verticalCollideCheck
	cmp     #$01
	beq     L0A4A
	cmp     #$07
	bne     L089C
;
; playerY = (playerY & 0xF8) + 7;
;
L0A4A:	lda     _playerY
	and     #$F8
	clc
	adc     #$07
	sta     _playerY
;
; collideBottom = 1;
;
	lda     #$01
	sta     _collideBottom
;
; playerState = PLAYER_STATE_NORMAL;       
;
	lda     #$00
;
; } else {
;
	jmp     L0A40
;
; collideCheckVertical(playerX, playerY + 2, PAD_DOWN);
;
L0863:	jsr     decsp2
	lda     _playerX
	ldy     #$01
	sta     (sp),y
	lda     _playerY
	clc
	adc     #$02
	dey
	sta     (sp),y
	lda     #$20
	jsr     _collideCheckVertical
;
; if ( ( verticalCollideCheck == TILE_ALLCOLLIDE ) || ( verticalCollideCheck == TILE_LADDER_TOP ) ) { 
;
	lda     _verticalCollideCheck
	cmp     #$01
	beq     L0A4D
	cmp     #$07
	bne     L0A4E
;
; playerY = (playerY & 0xF8) + 7;
;
L0A4D:	lda     _playerY
	and     #$F8
	clc
	adc     #$07
	sta     _playerY
;
; collideBottom = 1;
;
	lda     #$01
	sta     _collideBottom
;
; playerState = PLAYER_STATE_NORMAL;   
;
	lda     #$00
;
; } else {
;
	jmp     L0A40
;
; playerY += PLAYER_FALL_SPEED;
;
L0A4E:	lda     #$03
	clc
	adc     _playerY
	sta     _playerY
;
; collideBottom = 0;
;
	lda     #$00
	sta     _collideBottom
;
; playerState = PLAYER_STATE_FALLING;
;
	lda     #$04
L0A40:	sta     _playerState
;
; if ( collideBottom ) {
;
L089C:	lda     _collideBottom
	beq     L0A54
;
; if ( pad & PAD_UP )  {
;
	lda     _pad
	and     #$10
	beq     L0A4F
;
; checkPlayerLadderCollision();
;
	jsr     _checkPlayerLadderCollision
;
; if ( ( pad & PAD_DOWN ) && ( verticalCollideCheck == TILE_LADDER_TOP ) ) {
;
L0A4F:	lda     _pad
	and     #$20
	beq     L08A8
	lda     _verticalCollideCheck
	cmp     #$07
	bne     L08A8
;
; playerY++;
;
	lda     _playerY
	clc
	adc     #$01
	sta     _playerY
;
; checkPlayerLadderCollision();
;
	jsr     _checkPlayerLadderCollision
;
; if ( ( jumpButtonReset ) && ( pad & PAD_A ) ) {
;
L08A8:	lda     _jumpButtonReset
	beq     L0A54
	lda     _pad
	and     #$01
	beq     L0A54
;
; playerVertVel = PLAYER_INIT_JUMP_VEL;
;
	lda     #$03
	sta     _playerVertVel
;
; playerState = PLAYER_STATE_JUMPING;
;
	sta     _playerState
;
; playerJumpCounter = 0;
;
	lda     #$00
	sta     _playerJumpCounter
;
; jumpButtonReset = 0;
;
	sta     _jumpButtonReset
;
; if ( ( playerVertVel > -3 ) && ( playerJumpCounter == 4 ) ) {
;
L0A54:	lda     _playerVertVel
	sec
	sbc     #$FE
	bvs     L08C2
	eor     #$80
L08C2:	bpl     L0A59
	lda     _playerJumpCounter
	cmp     #$04
	bne     L0A59
;
; playerVertVel -= 1; 
;
	dec     _playerVertVel
;
; playerJumpCounter = 0;
;
	lda     #$00
	sta     _playerJumpCounter
;
; ++playerJumpCounter;
;
L0A59:	inc     _playerJumpCounter
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ updatePlayerClimbing (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updatePlayerClimbing: near

.segment	"CODE"

;
; checkPlayerLadderCollision();
;
	jsr     decsp1
	jsr     _checkPlayerLadderCollision
;
; if ( pad & PAD_UP ) { 
;
	lda     _pad
	and     #$10
	beq     L0A5A
;
; --playerY;
;
	dec     _playerY
;
; } else if ( pad & PAD_DOWN ) {
;
	jmp     incsp1
L0A5A:	lda     _pad
	and     #$20
	beq     L08DA
;
; ++playerY;
;
	inc     _playerY
;
; collideCheckVertical(playerX, playerY + 4, PAD_DOWN);
;
	jsr     decsp2
	lda     _playerX
	ldy     #$01
	sta     (sp),y
	lda     _playerY
	clc
	adc     #$04
	dey
	sta     (sp),y
	lda     #$20
	jsr     _collideCheckVertical
;
; if ( ( verticalCollideCheck == TILE_ALLCOLLIDE ) || ( verticalCollideCheck == TILE_LADDER_TOP ) ) {  
;
	lda     _verticalCollideCheck
	cmp     #$01
	beq     L0A5D
	cmp     #$07
	jne     incsp1
;
; playerState = PLAYER_STATE_NORMAL;
;
L0A5D:	lda     #$00
	sta     _playerState
;
; }
;
L08DA:	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ updatePlayerVerticalMovement (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updatePlayerVerticalMovement: near

.segment	"CODE"

;
; if ( playerState == PLAYER_STATE_CLIMBING ) {
;
	lda     _playerState
	cmp     #$02
;
; updatePlayerClimbing(); 
;
	jeq     _updatePlayerClimbing
;
; updatePlayerJumpFall();
;
	jmp     _updatePlayerJumpFall

.endproc

; ---------------------------------------------------------------
; void __near__ playerMoveHorizontal (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_playerMoveHorizontal: near

.segment	"CODE"

;
; if ( ( playerState != PLAYER_STATE_NORMAL ) && ( playerState != PLAYER_STATE_JUMPING ) ) {
;
	lda     _playerState
	beq     L0A62
	cmp     #$03
	beq     L0A62
;
; return;
;
	rts
;
; if ( pad & PAD_DOWN ) {
;
L0A62:	lda     _pad
	and     #$20
;
; return;
;
	bne     L08E7
;
; if ( pad & PAD_LEFT ) {
;
	lda     _pad
	and     #$40
	beq     L0A63
;
; playerDir = PAD_LEFT;
;
	lda     #$40
	sta     _playerDir
;
; if ( playerX > 0 ) {
;
	lda     _playerX
	beq     L08FD
;
; playerX -= PLAYER_MOVE_VEL;
;
	dec     _playerX
;
; } else if ( pad & PAD_RIGHT ) {
;
	jmp     L08FD
L0A63:	lda     _pad
	and     #$80
	beq     L08FD
;
; playerDir = PAD_RIGHT;
;
	lda     #$80
	sta     _playerDir
;
; if ( playerX < 240 ) {
;
	lda     _playerX
	cmp     #$F0
	bcs     L08FD
;
; playerX += PLAYER_MOVE_VEL;
;
	inc     _playerX
;
; bgHorizCollideCheck(&playerX, &playerY, pad);
;
L08FD:	jsr     decsp4
	lda     #<(_playerX)
	ldy     #$02
	sta     (sp),y
	iny
	lda     #>(_playerX)
	sta     (sp),y
	lda     #<(_playerY)
	ldy     #$00
	sta     (sp),y
	iny
	lda     #>(_playerY)
	sta     (sp),y
	lda     _pad
	jmp     _bgHorizCollideCheck
;
; }
;
L08E7:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ updatePlayerAttack (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updatePlayerAttack: near

.segment	"CODE"

;
; if ( ( pad & PAD_B ) && ( potionTossTimer == 0 ) ) {
;
	lda     _pad
	and     #$02
	beq     L0A66
	lda     _potionTossTimer
	beq     L0A67
L0A66:	rts
;
; if ( !potionIsActive ) {
;
L0A67:	lda     _potionIsActive
	bne     L090C
;
; potionIsActive = 1;
;
	lda     #$01
	sta     _potionIsActive
;
; potionMoveCounter = 0;
;
	lda     #$00
	sta     _potionMoveCounter
;
; potionY = playerY + 6;
;
	lda     _playerY
	clc
	adc     #$06
	sta     _potionY
;
; if ( playerDir == PAD_RIGHT ) {
;
	lda     _playerDir
	cmp     #$80
	bne     L0A68
;
; potionX = playerX + 12;
;
	lda     _playerX
	clc
	adc     #$0C
;
; } else {
;
	jmp     L0A64
;
; potionX = playerX - 4;
;
L0A68:	lda     _playerX
	sec
	sbc     #$04
L0A64:	sta     _potionX
;
; potionDirection = playerDir;
;
	lda     _playerDir
	sta     _potionDirection
;
; potionVerticalVel = POTION_INIT_VERTICAL_VEL;
;
	lda     #$02
	sta     _potionVerticalVel
;
; ++potionTossTimer;
;
	inc     _potionTossTimer
;
; }
;
L090C:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ updatePotionMovement (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updatePotionMovement: near

.segment	"CODE"

;
; u8 potionCollided = 0;
;
	lda     #$00
	jsr     pusha
;
; if ( potionTossTimer > 0 ) {
;
	lda     _potionTossTimer
	beq     L0928
;
; ++potionTossTimer;
;
	inc     _potionTossTimer
;
; if ( potionTossTimer >= POTION_TOSS_WAIT_TIME ) {
;
	lda     _potionTossTimer
	cmp     #$3C
	bcc     L0928
;
; potionTossTimer = 0;
;
	lda     #$00
	sta     _potionTossTimer
;
; if ( potionIsActive ) {
;
L0928:	lda     _potionIsActive
	bne     L0A7C
;
; }
;
	jmp     incsp1
;
; if ( potionDirection == PAD_LEFT ) {
;
L0A7C:	lda     _potionDirection
	cmp     #$40
	bne     L0A6B
;
; potionX -= POTION_HORIZ_VELOCITY;
;
	lda     _potionX
	sec
	sbc     #$02
;
; } else {
;
	jmp     L0A69
;
; potionX += POTION_HORIZ_VELOCITY;
;
L0A6B:	lda     #$02
	clc
	adc     _potionX
L0A69:	sta     _potionX
;
; if ( ( potionX <= 8 ) || ( potionX >= 248 ) ) {
;
	cmp     #$09
	bcc     L0A6C
	lda     _potionX
	cmp     #$F8
	bcc     L0A6D
;
; potionCollided = 1;
;
L0A6C:	lda     #$01
	ldy     #$00
	sta     (sp),y
;
; if ( potionVerticalVel > 0 ) {
;
L0A6D:	lda     _potionVerticalVel
	sec
	sbc     #$01
	bvs     L093F
	eor     #$80
L093F:	bpl     L093C
;
; if ( smallCollideCheckVertical(potionX, potionY + 8, PAD_UP) == TILE_ALLCOLLIDE ) { 
;
	jsr     decsp2
	lda     _potionX
	ldy     #$01
	sta     (sp),y
	lda     _potionY
	clc
	adc     #$08
	dey
	sta     (sp),y
	lda     #$10
	jsr     _smallCollideCheckVertical
	cmp     #$01
	bne     L094D
;
; potionCollided = 1;    
;
	ldy     #$00
	sta     (sp),y
;
; } else {
;
	jmp     L0A72
;
; if ( smallCollideCheckVertical(potionX, potionY, PAD_DOWN) == TILE_ALLCOLLIDE ) { 
;
L093C:	jsr     decsp2
	lda     _potionX
	ldy     #$01
	sta     (sp),y
	lda     _potionY
	dey
	sta     (sp),y
	lda     #$20
	jsr     _smallCollideCheckVertical
	cmp     #$01
	bne     L094D
;
; potionCollided = 1;    
;
	ldy     #$00
	sta     (sp),y
;
; } else {
;
	jmp     L0A72
;
; potionY -= potionVerticalVel;
;
L094D:	lda     _potionVerticalVel
	eor     #$FF
	sec
	adc     _potionY
	sta     _potionY
;
; if ( potionY >= 240 ) {
;
L0A72:	lda     _potionY
	cmp     #$F0
	bcc     L0A73
;
; potionCollided = 1;
;
	lda     #$01
	ldy     #$00
	sta     (sp),y
;
; if ( ( potionVerticalVel >= -3 ) && ( potionMoveCounter == 3 ) ) {
;
L0A73:	lda     _potionVerticalVel
	sec
	sbc     #$FD
	bvs     L0960
	eor     #$80
L0960:	bpl     L0A78
	lda     _potionMoveCounter
	cmp     #$03
	bne     L0A78
;
; potionVerticalVel -= 1; 
;
	dec     _potionVerticalVel
;
; potionMoveCounter = 0;
;
	lda     #$00
	sta     _potionMoveCounter
;
; ++potionMoveCounter;
;
L0A78:	inc     _potionMoveCounter
;
; if ( potionCollided ) {
;
	ldy     #$00
	lda     (sp),y
	beq     L096A
;
; potionIsActive = 0;
;
	sty     _potionIsActive
;
; potionX = -8;
;
	lda     #$F8
	sta     _potionX
;
; potionY = -8;
;
	sta     _potionY
;
; }
;
L096A:	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ simpleUpdatePotionMovement (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_simpleUpdatePotionMovement: near

.segment	"CODE"

;
; u8 potionCollided = 0;
;
	lda     #$00
	jsr     pusha
;
; if ( potionIsActive ) {
;
	lda     _potionIsActive
	beq     L0985
;
; if ( potionDirection == PAD_LEFT ) {
;
	lda     _potionDirection
	cmp     #$40
	bne     L0A7E
;
; potionX -= POTION_HORIZ_VELOCITY;
;
	lda     _potionX
	sec
	sbc     #$02
;
; } else {
;
	jmp     L0A7D
;
; potionX += POTION_HORIZ_VELOCITY;
;
L0A7E:	lda     #$02
	clc
	adc     _potionX
L0A7D:	sta     _potionX
;
; if ( ( potionX <= 8 ) || ( potionX >= 248 ) ) {
;
	cmp     #$09
	bcc     L0A7F
	lda     _potionX
	cmp     #$F8
	bcc     L0A80
;
; potionCollided = 1;
;
L0A7F:	lda     #$01
	ldy     #$00
	sta     (sp),y
;
; ++potionMoveCounter;
;
L0A80:	inc     _potionMoveCounter
;
; if ( potionCollided ) {
;
	ldy     #$00
	lda     (sp),y
	beq     L0985
;
; killPotion();
;
	jsr     _killPotion
;
; }
;
L0985:	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; memcpy(palSprites, paldat, 16);
;
	ldy     #$0F
L0994:	lda     _paldat,y
	sta     _palSprites,y
	dey
	bpl     L0994
;
; memcpy(palBG, paldat + 16, 4);
;
	ldy     #$03
L0999:	lda     _paldat+16,y
	sta     _palBG,y
	dey
	bpl     L0999
;
; pal_spr(palSprites);
;
	lda     #<(_palSprites)
	ldx     #>(_palSprites)
	jsr     _pal_spr
;
; pal_bg(palBG);
;
	lda     #<(_palBG)
	ldx     #>(_palBG)
	jsr     _pal_bg
;
; vram_adr(NAMETABLE_A); //unpack nametable into VRAM
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(map1); 
;
	lda     #<(_map1)
	ldx     #>(_map1)
	jsr     _vram_unrle
;
; drawScoreboard();
;
	jsr     _drawScoreboard
;
; ppu_on_all(); //enable rendering
;
	jsr     _ppu_on_all
;
; playerX = 0;
;
	lda     #$00
	sta     _playerX
;
; playerY = 0;
;
	sta     _playerY
;
; playerDir = PAD_LEFT;
;
	lda     #$40
	sta     _playerDir
;
; touch = 0; // collision flag
;
	lda     #$00
	sta     _touch
;
; frameCount = 0; // frame counter
;
	sta     _frameCount
;
; playerFrame = 0;
;
	sta     _playerFrame
;
; setSpriteFrame(playerSpriteData, playerFrames[playerFrame]);
;
	lda     #<(_playerSpriteData)
	ldx     #>(_playerSpriteData)
	jsr     pushax
	ldx     #$00
	lda     _playerFrame
	jsr     aslax2
	clc
	adc     #<(_playerFrames)
	tay
	txa
	adc     #>(_playerFrames)
	tax
	tya
	jsr     _setSpriteFrame
;
; setupMap();
;
	jsr     _setupMap
;
; ppu_wait_frame(); // wait for next TV frame
;
L09B5:	jsr     _ppu_wait_frame
;
; oamSpriteIndex = 0;
;
	lda     #$00
	sta     _oamSpriteIndex
;
; i = 0;
;
	sta     _i
;
; sprPriorityToggle = frameCount & 0xFE;
;
	lda     _frameCount
	and     #$FE
	sta     _sprPriorityToggle
;
; pad = pad_poll(i);
;
	lda     _i
	jsr     _pad_poll
	sta     _pad
;
; updateScoreboard();
;
	jsr     _updateScoreboard
;
; updatePlayerSprite();
;
	jsr     _updatePlayerSprite
;
; updateEnemySprites();
;
	jsr     _updateEnemySprites
;
; updatePotionSprite();
;
	jsr     _updatePotionSprite
;
; spriteCount();
;
	jsr     _spriteCount
;
; updateEnemyMovement();
;
	jsr     _updateEnemyMovement
;
; playerMoveHorizontal();
;
	jsr     _playerMoveHorizontal
;
; updatePlayerVerticalMovement();
;
	jsr     _updatePlayerVerticalMovement
;
; updatePlayerAttack();
;
	jsr     _updatePlayerAttack
;
; updatePotionMovement();
;
	jsr     _updatePotionMovement
;
; enemyColliding = 0;
;
	lda     #$00
	sta     _enemyColliding
;
; four_Sides(playerX, playerY);
;
	lda     _playerX
	jsr     pusha
	lda     _playerY
	jsr     _four_Sides
;
; enemyCollideCheck();
;
	jsr     _enemyCollideCheck
;
; playerEnemyColliding = enemyColliding;
;
	lda     _enemyColliding
	sta     _playerEnemyColliding
;
; potionEnemyCollideCheck();
;
	jsr     _potionEnemyCollideCheck
;
; if ( playerEnemyColliding ) {
;
	lda     _playerEnemyColliding
	beq     L09D6
;
; setSpritePalette(playerSpriteData, 0x0);
;
	lda     #<(_playerSpriteData)
	ldx     #>(_playerSpriteData)
	jsr     pushax
	lda     #$00
;
; } else {
;
	jmp     L0A81
;
; setSpritePalette(playerSpriteData, 0x3);
;
L09D6:	lda     #<(_playerSpriteData)
	ldx     #>(_playerSpriteData)
	jsr     pushax
	lda     #$03
L0A81:	jsr     _setSpritePalette
;
; oam_hide_rest(oamSpriteIndex);
;
	lda     _oamSpriteIndex
	jsr     _oam_hide_rest
;
; ++frameCount;
;
	inc     _frameCount
;
; while ( 1 )
;
	jmp     L09B5

.endproc

