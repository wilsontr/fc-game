;
; File generated by cc65 v 2.16 - Git N/A
;
	.fopt		compiler,"cc65 v 2.16 - Git N/A"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_memcpy
	.import		_pal_bg
	.import		_pal_spr
	.import		_ppu_wait_frame
	.import		_ppu_on_all
	.import		_oam_meta_spr
	.import		_pad_poll
	.import		_vram_adr
	.import		_vram_unrle
	.export		_test_nam
	.export		_collisionMap
	.export		_oam_off
	.export		_enemyData
	.import		_paldat
	.export		_playerFrames
	.export		_enemyFrames
	.export		_playerSpriteData
	.export		_enemySpriteDataTemplate
	.export		_setSpriteFrame
	.export		_setSpritePalette
	.export		_setSpritePriority
	.export		_flipSprite
	.export		_four_Sides
	.export		_getCollisionIndex
	.export		_collideCheckVertical
	.export		_collideCheckHorizontal
	.export		_bgVertCollideCheck
	.export		_bgHorizCollideCheck
	.export		_updateEnemies
	.export		_playerEnemyCollideCheck
	.export		_spriteCount
	.export		_setupMap
	.export		_main

.segment	"DATA"

.segment	"ZEROPAGE"
.segment	"DATA"
_enemyInitX:
	.byte	$96
_enemyInitY:
	.byte	$32
_enemySpriteCount:
	.byte	$00
_playerSpriteData:
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$05
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$14
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$15
	.byte	$02
	.byte	$80

.segment	"RODATA"

_test_nam:
	.byte	$01
	.byte	$40
	.byte	$01
	.byte	$40
	.byte	$41
	.byte	$01
	.byte	$09
	.byte	$00
	.byte	$41
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$0E
	.byte	$41
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$41
	.byte	$00
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$0D
	.byte	$41
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$0C
	.byte	$41
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$0A
	.byte	$41
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$41
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$0A
	.byte	$41
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1C
	.byte	$41
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$06
	.byte	$40
	.byte	$01
	.byte	$0F
	.byte	$41
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$41
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1C
	.byte	$41
	.byte	$40
	.byte	$40
	.byte	$50
	.byte	$00
	.byte	$01
	.byte	$13
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$06
	.byte	$41
	.byte	$40
	.byte	$40
	.byte	$50
	.byte	$00
	.byte	$01
	.byte	$1B
	.byte	$41
	.byte	$40
	.byte	$40
	.byte	$50
	.byte	$00
	.byte	$01
	.byte	$1B
	.byte	$41
	.byte	$40
	.byte	$40
	.byte	$50
	.byte	$00
	.byte	$01
	.byte	$1B
	.byte	$41
	.byte	$40
	.byte	$40
	.byte	$50
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$40
	.byte	$01
	.byte	$05
	.byte	$41
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$40
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$19
	.byte	$41
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$12
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$06
	.byte	$41
	.byte	$01
	.byte	$02
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$01
	.byte	$04
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$40
	.byte	$01
	.byte	$09
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$40
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$40
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$40
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$40
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$41
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$41
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$41
	.byte	$01
	.byte	$06
	.byte	$00
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$41
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$16
	.byte	$40
	.byte	$01
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$3E
	.byte	$00
	.byte	$01
	.byte	$00
_collisionMap:
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_playerFrames:
	.byte	$04
	.byte	$05
	.byte	$14
	.byte	$15
	.byte	$24
	.byte	$25
	.byte	$34
	.byte	$35
_enemyFrames:
	.byte	$06
	.byte	$07
	.byte	$16
	.byte	$17
	.byte	$26
	.byte	$27
	.byte	$36
	.byte	$37
_enemySpriteDataTemplate:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$00
	.byte	$03
	.byte	$80

.segment	"BSS"

.segment	"ZEROPAGE"
.segment	"BSS"
.segment	"ZEROPAGE"
_oam_off:
	.res	1,$00
.segment	"BSS"
_player_x:
	.res	1,$00
.segment	"BSS"
_player_y:
	.res	1,$00
.segment	"BSS"
_playerDir:
	.res	1,$00
.segment	"BSS"
_enemy_x:
	.res	1,$00
.segment	"BSS"
_enemy_y:
	.res	1,$00
.segment	"BSS"
_leftSide:
	.res	1,$00
.segment	"BSS"
_rightSide:
	.res	1,$00
.segment	"BSS"
_topSide:
	.res	1,$00
.segment	"BSS"
_bottomSide:
	.res	1,$00
.segment	"BSS"
_testCorner:
	.res	2,$00
.segment	"BSS"
_i:
	.res	1,$00
.segment	"BSS"
_pad:
	.res	1,$00
.segment	"BSS"
_spr:
	.res	1,$00
.segment	"BSS"
_touch:
	.res	1,$00
.segment	"BSS"
_frame:
	.res	1,$00
.segment	"BSS"
_playerFrame:
	.res	1,$00
.segment	"BSS"
_playerEnemyColliding:
	.res	1,$00
.segment	"BSS"
_numEnemies:
	.res	1,$00
.segment	"BSS"
_X1_Right_Side:
	.res	1,$00
.segment	"BSS"
_X1_Left_Side:
	.res	1,$00
.segment	"BSS"
_Y1_Bottom:
	.res	1,$00
.segment	"BSS"
_Y1_Top:
	.res	1,$00
.segment	"BSS"
_enemyData:
	.res	80,$00
.segment	"BSS"
_enemySpriteData:
	.res	170,$00
.segment	"BSS"
_palSprites:
	.res	4,$00
.segment	"BSS"
_palBG:
	.res	4,$00

; ---------------------------------------------------------------
; void __near__ __fastcall__ setSpriteFrame (__near__ unsigned char *, __near__ const unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_setSpriteFrame: near

.segment	"CODE"

;
; void __fastcall__ setSpriteFrame(u8 *sprite, const u8 *frame) {
;
	jsr     pushax
;
; sprite[2] = frame[0];
;
	ldy     #$05
	jsr     pushwysp
	ldy     #$03
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	ldy     #$02
	jsr     staspidx
;
; sprite[6] = frame[1];
;
	ldy     #$05
	jsr     pushwysp
	ldy     #$03
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	dey
	lda     (ptr1),y
	ldy     #$06
	jsr     staspidx
;
; sprite[10] = frame[2];
;
	ldy     #$05
	jsr     pushwysp
	ldy     #$03
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     (ptr1),y
	ldy     #$0A
	jsr     staspidx
;
; sprite[14] = frame[3];
;
	ldy     #$05
	jsr     pushwysp
	ldy     #$03
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	iny
	lda     (ptr1),y
	ldy     #$0E
	jsr     staspidx
;
; }
;
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ setSpritePalette (__near__ unsigned char *, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_setSpritePalette: near

.segment	"CODE"

;
; void __fastcall__ setSpritePalette(u8 *sprite, u8 palette) {
;
	jsr     pusha
;
; for ( i = 3; i <= 15; i = i + 4 ) {
;
	jsr     decsp1
	lda     #$03
	ldy     #$00
L07B3:	sta     (sp),y
	cmp     #$10
	bcs     L0533
;
; sprite[i] &= ~(0x3);
;
	lda     (sp),y
	clc
	ldy     #$02
	adc     (sp),y
	sta     ptr1
	lda     #$00
	iny
	adc     (sp),y
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	and     #$FC
	sta     (ptr1),y
;
; sprite[i] |= palette;
;
	lda     (sp),y
	clc
	ldy     #$02
	adc     (sp),y
	pha
	lda     #$00
	iny
	adc     (sp),y
	tax
	pla
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     ptr1
	ldy     #$03
	lda     (sp),y
	ora     ptr1
	ldy     #$00
	jsr     staspidx
;
; for ( i = 3; i <= 15; i = i + 4 ) {
;
	ldy     #$00
	lda     (sp),y
	clc
	adc     #$04
	jmp     L07B3
;
; }
;
L0533:	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ setSpritePriority (__near__ unsigned char *, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_setSpritePriority: near

.segment	"CODE"

;
; void __fastcall__ setSpritePriority(u8 *sprite, u8 priority) {
;
	jsr     pusha
;
; if ( priority ) {
;
	ldy     #$00
	lda     (sp),y
	beq     L0544
;
; sprite[3] |= OAM_BEHIND;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$03
	lda     (ptr1),y
	ora     #$20
	sta     (ptr1),y
;
; sprite[7] |= OAM_BEHIND;
;
	dey
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$07
	lda     (ptr1),y
	ora     #$20
	sta     (ptr1),y
;
; sprite[11] |= OAM_BEHIND;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$0B
	lda     (ptr1),y
	ora     #$20
	sta     (ptr1),y
;
; sprite[15] |= OAM_BEHIND;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$0F
	lda     (ptr1),y
	ora     #$20
;
; } else {
;
	jmp     L07B4
;
; sprite[3] &= ~OAM_BEHIND;
;
L0544:	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$03
	lda     (ptr1),y
	and     #$DF
	sta     (ptr1),y
;
; sprite[7] &= ~OAM_BEHIND;
;
	dey
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$07
	lda     (ptr1),y
	and     #$DF
	sta     (ptr1),y
;
; sprite[11] &= ~OAM_BEHIND;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$0B
	lda     (ptr1),y
	and     #$DF
	sta     (ptr1),y
;
; sprite[15] &= ~OAM_BEHIND;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$0F
	lda     (ptr1),y
	and     #$DF
L07B4:	sta     (ptr1),y
;
; }
;
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ flipSprite (__near__ unsigned char *, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_flipSprite: near

.segment	"CODE"

;
; void __fastcall__ flipSprite(u8 *sprite, u8 flip) {
;
	jsr     pusha
;
; if ( flip ) {
;
	ldy     #$00
	lda     (sp),y
	jeq     L0560
;
; sprite[0] = 8;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     #$08
	dey
	sta     (ptr1),y
;
; sprite[3] |= OAM_FLIP_H;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$03
	lda     (ptr1),y
	ora     #$40
	sta     (ptr1),y
;
; sprite[4] = 0;
;
	dey
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     #$00
	ldy     #$04
	sta     (ptr1),y
;
; sprite[7] |= OAM_FLIP_H;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$07
	lda     (ptr1),y
	ora     #$40
	sta     (ptr1),y
;
; sprite[8] = 8;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     #$08
	tay
	sta     (ptr1),y
;
; sprite[11] |= OAM_FLIP_H;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$0B
	lda     (ptr1),y
	ora     #$40
	sta     (ptr1),y
;
; sprite[12] = 0;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     #$00
	ldy     #$0C
	sta     (ptr1),y
;
; sprite[15] |= OAM_FLIP_H;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$0F
	lda     (ptr1),y
	ora     #$40
;
; } else {
;
	jmp     L07B5
;
; sprite[0] = 0;
;
L0560:	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     #$00
	dey
	sta     (ptr1),y
;
; sprite[3] &= ~OAM_FLIP_H;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$03
	lda     (ptr1),y
	and     #$BF
	sta     (ptr1),y
;
; sprite[4] = 8;
;
	dey
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     #$08
	ldy     #$04
	sta     (ptr1),y
;
; sprite[7] &= ~OAM_FLIP_H;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$07
	lda     (ptr1),y
	and     #$BF
	sta     (ptr1),y
;
; sprite[8] = 0;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     #$00
	ldy     #$08
	sta     (ptr1),y
;
; sprite[11] &= ~OAM_FLIP_H;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$0B
	lda     (ptr1),y
	and     #$BF
	sta     (ptr1),y
;
; sprite[12] = 8;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     #$08
	ldy     #$0C
	sta     (ptr1),y
;
; sprite[15] &= ~OAM_FLIP_H;  
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$0F
	lda     (ptr1),y
	and     #$BF
L07B5:	sta     (ptr1),y
;
; }
;
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ four_Sides (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_four_Sides: near

.segment	"CODE"

;
; void __fastcall__ four_Sides(u8 originX, u8 originY) {
;
	jsr     pusha
;
; if (originX < (255 - 1)){ // find the left side
;
	ldy     #$01
	lda     (sp),y
	cmp     #$FE
	bcs     L07B9
;
; X1_Left_Side = originX + 1;
;
	clc
	adc     #$01
;
; else {
;
	jmp     L07B6
;
; X1_Left_Side = 255;
;
L07B9:	lda     #$FF
L07B6:	sta     _X1_Left_Side
;
; if (originX < (255 - 15)){ // find the right side
;
	lda     (sp),y
	cmp     #$F0
	bcs     L07BA
;
; X1_Right_Side = originX + 15;
;
	clc
	adc     #$0F
;
; else {
;
	jmp     L07B7
;
; X1_Right_Side = 255;
;
L07BA:	lda     #$FF
L07B7:	sta     _X1_Right_Side
;
; Y1_Top = originY + 1; // our top is the same as the master Y
;
	dey
	lda     (sp),y
	clc
	adc     #$01
	sta     _Y1_Top
;
; if (originY < (255)){ // find the bottom side
;
	lda     (sp),y
	cmp     #$FF
	bcs     L07BB
;
; Y1_Bottom = originY + 16;
;
	clc
	adc     #$10
;
; else {
;
	jmp     L07B8
;
; Y1_Bottom = 255;
;
L07BB:	lda     #$FF
L07B8:	sta     _Y1_Bottom
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; unsigned int __near__ __fastcall__ getCollisionIndex (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_getCollisionIndex: near

.segment	"CODE"

;
; u16 __fastcall__ getCollisionIndex(u8 screenX, u8 screenY) {
;
	jsr     pusha
;
; return ((u16) screenX >> 3) + (((u16) screenY >> 3) << 5);
;
	ldy     #$01
	lda     (sp),y
	ldx     #$00
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	stx     ptr1+1
	lda     (sp,x)
	lsr     a
	lsr     a
	lsr     a
	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     ptr1
	pha
	lda     tmp1
	adc     ptr1+1
	tax
	pla
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ __fastcall__ collideCheckVertical (unsigned char, unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_collideCheckVertical: near

.segment	"CODE"

;
; u8 __fastcall__ collideCheckVertical(u8 originX, u8 originY, u8 direction) {
;
	jsr     pusha
;
; leftSide = originX + 1;
;
	ldy     #$02
	lda     (sp),y
	clc
	adc     #$01
	sta     _leftSide
;
; rightSide = originX + 15;
;
	lda     (sp),y
	clc
	adc     #$0F
	sta     _rightSide
;
; topSide = originY + 1;
;
	dey
	lda     (sp),y
	clc
	adc     #$01
	sta     _topSide
;
; bottomSide = originY + 16;
;
	lda     (sp),y
	clc
	adc     #$10
	sta     _bottomSide
;
; if ( ( (direction & PAD_UP) != 0) ) {
;
	dey
	lda     (sp),y
	and     #$10
	beq     L07BE
;
; testCorner = getCollisionIndex(rightSide, topSide);
;
	lda     _rightSide
	jsr     pusha
	lda     _topSide
	jsr     _getCollisionIndex
	sta     _testCorner
	stx     _testCorner+1
;
; if ( collisionMap[testCorner] == 0 ) {
;
	lda     #<(_collisionMap)
	sta     ptr1
	lda     #>(_collisionMap)
	clc
	adc     _testCorner+1
	sta     ptr1+1
	ldy     _testCorner
	lda     (ptr1),y
	bne     L05D4
;
; testCorner = getCollisionIndex(leftSide, topSide);
;
	lda     _leftSide
	jsr     pusha
	lda     _topSide
;
; } else if ( (direction & PAD_DOWN) != 0 ) {
;
	jmp     L07C0
L07BE:	lda     (sp),y
	and     #$20
	beq     L05D4
;
; testCorner = getCollisionIndex(rightSide, bottomSide);
;
	lda     _rightSide
	jsr     pusha
	lda     _bottomSide
	jsr     _getCollisionIndex
	sta     _testCorner
	stx     _testCorner+1
;
; if ( collisionMap[testCorner] == 0 ) {
;
	lda     #<(_collisionMap)
	sta     ptr1
	lda     #>(_collisionMap)
	clc
	adc     _testCorner+1
	sta     ptr1+1
	ldy     _testCorner
	lda     (ptr1),y
	bne     L05D4
;
; testCorner = getCollisionIndex(leftSide, bottomSide);
;
	lda     _leftSide
	jsr     pusha
	lda     _bottomSide
L07C0:	jsr     _getCollisionIndex
	sta     _testCorner
	stx     _testCorner+1
;
; return collisionMap[testCorner];
;
L05D4:	lda     #<(_collisionMap)
	sta     ptr1
	lda     #>(_collisionMap)
	clc
	adc     _testCorner+1
	sta     ptr1+1
	ldy     _testCorner
	ldx     #$00
	lda     (ptr1),y
;
; }
;
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ __fastcall__ collideCheckHorizontal (unsigned char, unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_collideCheckHorizontal: near

.segment	"CODE"

;
; u8 __fastcall__ collideCheckHorizontal(u8 originX, u8 originY, u8 direction) {
;
	jsr     pusha
;
; leftSide = originX + 1;
;
	ldy     #$02
	lda     (sp),y
	clc
	adc     #$01
	sta     _leftSide
;
; rightSide = originX + 15;
;
	lda     (sp),y
	clc
	adc     #$0F
	sta     _rightSide
;
; topSide = originY + 1;
;
	dey
	lda     (sp),y
	clc
	adc     #$01
	sta     _topSide
;
; bottomSide = originY + 16;
;
	lda     (sp),y
	clc
	adc     #$10
	sta     _bottomSide
;
; if ( ( (direction & PAD_LEFT) != 0 ) ) {
;
	dey
	lda     (sp),y
	and     #$40
	beq     L07C3
;
; testCorner = getCollisionIndex(leftSide, topSide);
;
	lda     _leftSide
	jsr     pusha
	lda     _topSide
	jsr     _getCollisionIndex
	sta     _testCorner
	stx     _testCorner+1
;
; if ( collisionMap[testCorner] == 0 ) {
;
	lda     #<(_collisionMap)
	sta     ptr1
	lda     #>(_collisionMap)
	clc
	adc     _testCorner+1
	sta     ptr1+1
	ldy     _testCorner
	lda     (ptr1),y
	bne     L0603
;
; testCorner = getCollisionIndex(leftSide, bottomSide);
;
	lda     _leftSide
;
; } else if ( (direction & PAD_RIGHT) != 0 ) {
;
	jmp     L07C7
L07C3:	lda     (sp),y
	and     #$80
	beq     L0603
;
; testCorner = getCollisionIndex(rightSide, topSide);
;
	lda     _rightSide
	jsr     pusha
	lda     _topSide
	jsr     _getCollisionIndex
	sta     _testCorner
	stx     _testCorner+1
;
; if ( collisionMap[testCorner] == 0 ) {
;
	lda     #<(_collisionMap)
	sta     ptr1
	lda     #>(_collisionMap)
	clc
	adc     _testCorner+1
	sta     ptr1+1
	ldy     _testCorner
	lda     (ptr1),y
	bne     L0603
;
; testCorner = getCollisionIndex(rightSide, bottomSide);
;
	lda     _rightSide
L07C7:	jsr     pusha
	lda     _bottomSide
	jsr     _getCollisionIndex
	sta     _testCorner
	stx     _testCorner+1
;
; return collisionMap[testCorner];
;
L0603:	lda     #<(_collisionMap)
	sta     ptr1
	lda     #>(_collisionMap)
	clc
	adc     _testCorner+1
	sta     ptr1+1
	ldy     _testCorner
	ldx     #$00
	lda     (ptr1),y
;
; }
;
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ bgVertCollideCheck (__near__ unsigned char *, __near__ unsigned char *, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bgVertCollideCheck: near

.segment	"CODE"

;
; void __fastcall__ bgVertCollideCheck(u8 *x, u8 *y, u8 dir) {
;
	jsr     pusha
;
; u8 colliding = collideCheckVertical(*x, *y, dir);
;
	jsr     decsp2
	ldy     #$06
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	iny
	sta     (sp),y
	ldy     #$04
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	sta     (sp),y
	ldy     #$02
	lda     (sp),y
	jsr     _collideCheckVertical
	jsr     pusha
;
; if ( colliding == 1 ) {
;
	ldy     #$00
	lda     (sp),y
	cmp     #$01
	bne     L0623
;
; if ( dir & PAD_UP ) {
;
	iny
	lda     (sp),y
	and     #$10
	beq     L07CA
;
; *y = (*y & 0xf8) + 7;
;
	ldy     #$05
	jsr     pushwysp
	ldy     #$05
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	and     #$F8
	clc
	adc     #$07
;
; } else if ( dir & PAD_DOWN ) {
;
	jmp     L07C8
L07CA:	lda     (sp),y
	and     #$20
	beq     L0623
;
; *y = (*y & 0xf8) - 1;
;
	ldy     #$05
	jsr     pushwysp
	ldy     #$05
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	and     #$F8
	sec
	sbc     #$01
L07C8:	jsr     staspidx
;
; }
;
L0623:	jmp     incsp6

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ bgHorizCollideCheck (__near__ unsigned char *, __near__ unsigned char *, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bgHorizCollideCheck: near

.segment	"CODE"

;
; void __fastcall__ bgHorizCollideCheck(u8 *x, u8 *y, u8 dir) {
;
	jsr     pusha
;
; u8 colliding = collideCheckHorizontal(*x, *y, dir);
;
	jsr     decsp2
	ldy     #$06
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	iny
	sta     (sp),y
	ldy     #$04
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	sta     (sp),y
	ldy     #$02
	lda     (sp),y
	jsr     _collideCheckHorizontal
	jsr     pusha
;
; if ( colliding == 1 ) {
;
	ldy     #$00
	lda     (sp),y
	cmp     #$01
	bne     L0637
;
; if ( dir & PAD_LEFT ) {
;
	iny
	lda     (sp),y
	and     #$40
	beq     L07CD
;
; *x = (*x & 0xf8) + 8;
;
	ldy     #$07
	jsr     pushwysp
	ldy     #$07
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	and     #$F8
	clc
	adc     #$08
;
; } else if ( dir & PAD_RIGHT ) {
;
	jmp     L07CB
L07CD:	lda     (sp),y
	and     #$80
	beq     L0637
;
; *x = (*x & 0xf8);
;
	ldy     #$07
	jsr     pushwysp
	ldy     #$07
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	and     #$F8
L07CB:	jsr     staspidx
;
; }
;
L0637:	jmp     incsp6

.endproc

; ---------------------------------------------------------------
; void __near__ updateEnemies (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updateEnemies: near

.segment	"BSS"

L063D:
	.res	1,$00
L063E:
	.res	1,$00
L063F:
	.res	1,$00

.segment	"CODE"

;
; for ( i = 0; i < numEnemies; i++ ) {
;
	lda     #$00
	sta     L063D
	tax
L07CF:	lda     L063D
	cmp     _numEnemies
	bcc     L07D9
;
; }
;
	rts
;
; vertCollide = collideCheckVertical(enemyData[i].x, enemyData[i].y + 1, PAD_DOWN);
;
L07D9:	jsr     decsp2
	lda     L063D
	jsr     aslax2
	sta     ptr1
	txa
	clc
	adc     #>(_enemyData)
	sta     ptr1+1
	ldy     #<(_enemyData)
	lda     (ptr1),y
	ldy     #$01
	sta     (sp),y
	ldx     #$00
	lda     L063D
	jsr     aslax2
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	lda     (ptr1),y
	clc
	adc     #$01
	dey
	sta     (sp),y
	lda     #$20
	jsr     _collideCheckVertical
	sta     L063E
;
; if ( vertCollide != TILE_ALLCOLLIDE ) {
;
	ldx     #$00
	lda     L063E
	cmp     #$01
	beq     L07D0
;
; enemyData[i].y += 1;
;
	lda     L063D
	jsr     aslax2
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	clc
	adc     #$01
;
; } else {
;
	jmp     L07CE
;
; if ( enemyData[i].direction == PAD_RIGHT ) {
;
L07D0:	lda     L063D
	jsr     aslax2
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	ldy     #$03
	ldx     #$00
	lda     (ptr1),y
	cmp     #$80
	jne     L07D4
;
; enemyData[i].x += 1;
;
	lda     L063D
	jsr     aslax2
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	clc
	adc     #$01
	sta     (ptr1),y
;
; horizCollide = collideCheckHorizontal(enemyData[i].x, enemyData[i].y, PAD_RIGHT);
;
	jsr     decsp2
	ldx     #$00
	lda     L063D
	jsr     aslax2
	sta     ptr1
	txa
	clc
	adc     #>(_enemyData)
	sta     ptr1+1
	ldy     #<(_enemyData)
	lda     (ptr1),y
	ldy     #$01
	sta     (sp),y
	ldx     #$00
	lda     L063D
	jsr     aslax2
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	lda     (ptr1),y
	dey
	sta     (sp),y
	lda     #$80
	jsr     _collideCheckHorizontal
	sta     L063F
;
; if ( ( horizCollide == TILE_ALLCOLLIDE ) || ( horizCollide == TILE_ENEMYCOLLIDE ) ) {
;
	ldx     #$00
	lda     L063F
	cmp     #$01
	beq     L07D3
	cmp     #$02
	jne     L07D8
;
; flipSprite(enemySpriteData[i], 0);
;
L07D3:	lda     L063D
	jsr     pusha0
	lda     #$11
	jsr     tosmula0
	clc
	adc     #<(_enemySpriteData)
	tay
	txa
	adc     #>(_enemySpriteData)
	tax
	tya
	jsr     pushax
	lda     #$00
	jsr     _flipSprite
;
; enemyData[i].direction = PAD_LEFT;
;
	ldx     #$00
	lda     L063D
	jsr     aslax2
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	ldx     #$00
	lda     #$40
	ldy     #$03
	sta     (ptr1),y
;
; } else {
;
	jmp     L07D8
;
; enemyData[i].x -= 1;
;
L07D4:	lda     L063D
	jsr     aslax2
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; horizCollide = collideCheckHorizontal(enemyData[i].x, enemyData[i].y, PAD_LEFT);
;
	jsr     decsp2
	ldx     #$00
	lda     L063D
	jsr     aslax2
	sta     ptr1
	txa
	clc
	adc     #>(_enemyData)
	sta     ptr1+1
	ldy     #<(_enemyData)
	lda     (ptr1),y
	ldy     #$01
	sta     (sp),y
	ldx     #$00
	lda     L063D
	jsr     aslax2
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	lda     (ptr1),y
	dey
	sta     (sp),y
	lda     #$40
	jsr     _collideCheckHorizontal
	sta     L063F
;
; if ( ( horizCollide == TILE_ALLCOLLIDE ) || ( horizCollide == TILE_ENEMYCOLLIDE ) ) {
;
	ldx     #$00
	lda     L063F
	cmp     #$01
	beq     L07D7
	cmp     #$02
	bne     L07D8
;
; flipSprite(enemySpriteData[i], 1);
;
L07D7:	lda     L063D
	jsr     pusha0
	lda     #$11
	jsr     tosmula0
	clc
	adc     #<(_enemySpriteData)
	tay
	txa
	adc     #>(_enemySpriteData)
	tax
	tya
	jsr     pushax
	lda     #$01
	jsr     _flipSprite
;
; enemyData[i].direction = PAD_RIGHT;
;
	ldx     #$00
	lda     L063D
	jsr     aslax2
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	lda     #$80
	ldy     #$03
L07CE:	sta     (ptr1),y
;
; for ( i = 0; i < numEnemies; i++ ) {
;
	ldx     #$00
L07D8:	lda     L063D
	clc
	adc     #$01
	sta     L063D
	jmp     L07CF

.endproc

; ---------------------------------------------------------------
; void __near__ playerEnemyCollideCheck (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_playerEnemyCollideCheck: near

.segment	"BSS"

L0687:
	.res	1,$00
L0688:
	.res	1,$00
L0689:
	.res	1,$00
L068A:
	.res	1,$00
L068B:
	.res	1,$00

.segment	"CODE"

;
; playerEnemyColliding = 0;
;
	lda     #$00
	sta     _playerEnemyColliding
;
; for ( j = 0; j < numEnemies; ++j ) {
;
	sta     L068B
	tax
L07DA:	lda     L068B
	cmp     _numEnemies
	bcc     L07DC
;
; }
;
	rts
;
; enemyTop = enemyData[j].y + 2;
;
L07DC:	jsr     aslax2
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	clc
	adc     #$02
	sta     L0687
;
; enemyBottom = enemyData[j].y + 14;
;
	ldx     #$00
	lda     L068B
	jsr     aslax2
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	lda     (ptr1),y
	clc
	adc     #$0E
	sta     L0688
;
; enemyLeft = enemyData[j].x + 2;
;
	ldx     #$00
	lda     L068B
	jsr     aslax2
	sta     ptr1
	txa
	clc
	adc     #>(_enemyData)
	sta     ptr1+1
	ldy     #<(_enemyData)
	lda     (ptr1),y
	clc
	adc     #$02
	sta     L0689
;
; enemyRight = enemyData[j].x + 14;
;
	ldx     #$00
	lda     L068B
	jsr     aslax2
	sta     ptr1
	txa
	clc
	adc     #>(_enemyData)
	sta     ptr1+1
	ldy     #<(_enemyData)
	lda     (ptr1),y
	clc
	adc     #$0E
	sta     L068A
;
; if ( !( X1_Right_Side < enemyLeft  || 
;
	lda     _X1_Right_Side
	cmp     L0689
	bcc     L07DB
;
; X1_Left_Side >= enemyRight || 
;
	lda     _X1_Left_Side
	cmp     L068A
	bcs     L07DB
;
; Y1_Bottom <  enemyTop || 
;
	lda     _Y1_Bottom
	cmp     L0687
	bcc     L07DB
;
; Y1_Top    >= enemyBottom ) ) {
;
	lda     _Y1_Top
	cmp     L0688
	bcs     L07DB
	lda     #$00
	jmp     L06A9
L07DB:	lda     #$01
L06A9:	jsr     bnega
	beq     L0690
;
; playerEnemyColliding = 1;
;
	lda     #$01
	sta     _playerEnemyColliding
;
; for ( j = 0; j < numEnemies; ++j ) {
;
L0690:	ldx     #$00
	inc     L068B
	jmp     L07DA

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ __fastcall__ spriteCount (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_spriteCount: near

.segment	"CODE"

;
; ++enemySpriteCount;
;
	inc     _enemySpriteCount
;
; if ( enemySpriteCount >= numEnemies ) {
;
	ldx     #$00
	lda     _enemySpriteCount
	cmp     _numEnemies
	bcc     L07DD
;
; enemySpriteCount = 0;
;
	stx     _enemySpriteCount
;
; return enemySpriteCount;
;
L07DD:	lda     _enemySpriteCount
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ setupMap (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_setupMap: near

.segment	"RODATA"

L06B4:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$40

.segment	"CODE"

;
; enemy newEnemy = { 0, 0, 0, PAD_LEFT };
;
	ldy     #$0B
	jsr     subysp
	ldy     #$03
L06B9:	lda     L06B4,y
	sta     (sp),y
	dey
	bpl     L06B9
;
; enemyIndex = 0;
;
	lda     #$00
	ldy     #$09
	sta     (sp),y
;
; mapX = 0;
;
	ldy     #$07
	sta     (sp),y
;
; mapY = 0;
;
	dey
	sta     (sp),y
;
; for ( index = 0; index <= COLLISION_MAP_SIZE; ++index ) {
;
	ldy     #$04
	sta     (sp),y
	iny
	sta     (sp),y
L06C0:	ldy     #$05
	lda     (sp),y
	cmp     #$03
	bne     L06C7
	dey
	lda     (sp),y
	cmp     #$C1
L06C7:	jcs     L06C1
;
; collByte = collisionMap[index];
;
	lda     #<(_collisionMap)
	ldy     #$04
	clc
	adc     (sp),y
	sta     ptr1
	lda     #>(_collisionMap)
	iny
	adc     (sp),y
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	ldy     #$0A
	sta     (sp),y
;
; if ( collByte == TILE_PLAYERSTART ) {
;
	cmp     #$03
	bne     L07E1
;
; player_x = mapX << 3;
;
	ldy     #$07
	lda     (sp),y
	asl     a
	asl     a
	asl     a
	sta     _player_x
;
; player_y = (mapY << 3) - 1;
;
	dey
	lda     (sp),y
	asl     a
	asl     a
	asl     a
	sec
	sbc     #$01
	sta     _player_y
;
; if ( ( collByte == TILE_ENEMY1START_RIGHT ) || ( collByte == TILE_ENEMY1START_LEFT ) ) {
;
	ldy     #$0A
L07E1:	lda     (sp),y
	cmp     #$05
	beq     L07E2
	cmp     #$04
	jne     L06D4
;
; enemyData[enemyIndex] = newEnemy;
;
L07E2:	dey
	ldx     #$00
	lda     (sp),y
	jsr     aslax2
	clc
	adc     #<(_enemyData)
	tay
	txa
	adc     #>(_enemyData)
	tax
	tya
	jsr     pushax
	ldy     #$05
	jsr     ldeaxysp
	ldy     #$00
	jsr     steaxspidx
;
; enemyData[enemyIndex].x = mapX << 3;
;
	ldy     #$09
	ldx     #$00
	lda     (sp),y
	jsr     aslax2
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	ldy     #$07
	lda     (sp),y
	asl     a
	asl     a
	asl     a
	ldy     #$00
	sta     (ptr1),y
;
; enemyData[enemyIndex].y = (mapY << 3) - 1;
;
	ldy     #$09
	ldx     #$00
	lda     (sp),y
	jsr     aslax2
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	ldy     #$06
	lda     (sp),y
	asl     a
	asl     a
	asl     a
	sec
	sbc     #$01
	ldy     #$01
	sta     (ptr1),y
;
; enemyData[enemyIndex].direction = ( collByte == TILE_ENEMY1START_RIGHT ) ? PAD_RIGHT : PAD_LEFT;
;
	ldy     #$09
	ldx     #$00
	lda     (sp),y
	jsr     aslax2
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	iny
	lda     (sp),y
	cmp     #$05
	bne     L07E3
	lda     #$80
	jmp     L07E4
L07E3:	lda     #$40
L07E4:	ldy     #$03
	sta     (ptr1),y
;
; for ( k = 0; k < ENEMY_DATA_SIZE; ++k ) {
;
	lda     #$00
	ldy     #$08
L07DF:	sta     (sp),y
	cmp     #$11
	bcs     L06ED
;
; enemySpriteData[enemyIndex][k] = enemySpriteDataTemplate[k];
;
	iny
	lda     (sp),y
	jsr     pusha0
	lda     #$11
	jsr     tosmula0
	clc
	adc     #<(_enemySpriteData)
	sta     ptr1
	txa
	adc     #>(_enemySpriteData)
	sta     ptr1+1
	ldy     #$08
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L07DE
	inx
L07DE:	jsr     pushax
	ldy     #$0A
	lda     (sp),y
	tay
	lda     _enemySpriteDataTemplate,y
	ldy     #$00
	jsr     staspidx
;
; for ( k = 0; k < ENEMY_DATA_SIZE; ++k ) {
;
	ldy     #$08
	clc
	lda     #$01
	adc     (sp),y
	jmp     L07DF
;
; setSpriteFrame(enemySpriteData[enemyIndex], enemyFrames[0]);
;
L06ED:	iny
	lda     (sp),y
	jsr     pusha0
	lda     #$11
	jsr     tosmula0
	clc
	adc     #<(_enemySpriteData)
	tay
	txa
	adc     #>(_enemySpriteData)
	tax
	tya
	jsr     pushax
	lda     #<(_enemyFrames)
	ldx     #>(_enemyFrames)
	jsr     _setSpriteFrame
;
; ++enemyIndex;
;
	ldy     #$09
	clc
	lda     #$01
	adc     (sp),y
	sta     (sp),y
;
; ++mapX;
;
L06D4:	ldy     #$07
	clc
	lda     #$01
	adc     (sp),y
	sta     (sp),y
;
; if ( mapX >= 32 ) {
;
	cmp     #$20
	bcc     L06C2
;
; mapX = 0;
;
	lda     #$00
	sta     (sp),y
;
; ++mapY;
;
	dey
	clc
	lda     #$01
	adc     (sp),y
	sta     (sp),y
;
; for ( index = 0; index <= COLLISION_MAP_SIZE; ++index ) {
;
L06C2:	ldy     #$04
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	jmp     L06C0
;
; numEnemies = enemyIndex;
;
L06C1:	ldy     #$09
	lda     (sp),y
	sta     _numEnemies
;
; }
;
	ldy     #$0B
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; u8 sprPriority = 0;
;
	jsr     decsp1
	lda     #$00
	jsr     pusha
;
; memcpy(palSprites, paldat, 16);
;
	ldy     #$0F
L070E:	lda     _paldat,y
	sta     _palSprites,y
	dey
	bpl     L070E
;
; memcpy(palBG, paldat, 4);
;
	ldy     #$03
L0713:	lda     _paldat,y
	sta     _palBG,y
	dey
	bpl     L0713
;
; pal_spr(palSprites);
;
	lda     #<(_palSprites)
	ldx     #>(_palSprites)
	jsr     _pal_spr
;
; pal_bg(palBG);
;
	lda     #<(_palBG)
	ldx     #>(_palBG)
	jsr     _pal_bg
;
; vram_adr(NAMETABLE_A); //unpack nametable into VRAM
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(test_nam); 
;
	lda     #<(_test_nam)
	ldx     #>(_test_nam)
	jsr     _vram_unrle
;
; ppu_on_all(); //enable rendering
;
	jsr     _ppu_on_all
;
; player_x = 0;
;
	lda     #$00
	sta     _player_x
;
; player_y = 0;
;
	sta     _player_y
;
; playerDir = PAD_RIGHT;
;
	lda     #$80
	sta     _playerDir
;
; enemy_x = enemyInitX;
;
	lda     _enemyInitX
	sta     _enemy_x
;
; enemy_y = enemyInitY;
;
	lda     _enemyInitY
	sta     _enemy_y
;
; touch = 0; // collision flag
;
	lda     #$00
	sta     _touch
;
; frame = 0; // frame counter
;
	sta     _frame
;
; playerFrame = 0;
;
	sta     _playerFrame
;
; setSpriteFrame(playerSpriteData, playerFrames[playerFrame]);
;
	lda     #<(_playerSpriteData)
	ldx     #>(_playerSpriteData)
	jsr     pushax
	ldx     #$00
	lda     _playerFrame
	jsr     aslax2
	clc
	adc     #<(_playerFrames)
	tay
	txa
	adc     #>(_playerFrames)
	tax
	tya
	jsr     _setSpriteFrame
;
; setupMap();
;
	jsr     _setupMap
;
; ppu_wait_frame(); // wait for next TV frame
;
L0732:	jsr     _ppu_wait_frame
;
; spr = 0;
;
	lda     #$00
	sta     _spr
;
; i = 0;
;
	sta     _i
;
; sprPriority = frame & 0xFE;
;
	lda     _frame
	and     #$FE
	ldy     #$00
	sta     (sp),y
;
; pad = pad_poll(i);
;
	lda     _i
	jsr     _pad_poll
	sta     _pad
;
; if ( pad & PAD_RIGHT ) {
;
	and     #$80
	beq     L07E7
;
; flipSprite(playerSpriteData, 1);
;
	lda     #<(_playerSpriteData)
	ldx     #>(_playerSpriteData)
	jsr     pushax
	lda     #$01
;
; } else if ( pad & PAD_LEFT ) {
;
	jmp     L07E5
L07E7:	lda     _pad
	and     #$40
	beq     L07E8
;
; flipSprite(playerSpriteData, 0);
;
	lda     #<(_playerSpriteData)
	ldx     #>(_playerSpriteData)
	jsr     pushax
	lda     #$00
L07E5:	jsr     _flipSprite
;
; if ( ( frame & 0x0F ) == 0x0F ) {
;
L07E8:	lda     _frame
	and     #$0F
	cmp     #$0F
	bne     L074B
;
; playerFrame ^= 1;
;
	lda     _playerFrame
	eor     #$01
	sta     _playerFrame
;
; setSpriteFrame(playerSpriteData, playerFrames[playerFrame]);
;
	lda     #<(_playerSpriteData)
	ldx     #>(_playerSpriteData)
	jsr     pushax
	ldx     #$00
	lda     _playerFrame
	jsr     aslax2
	clc
	adc     #<(_playerFrames)
	tay
	txa
	adc     #>(_playerFrames)
	tax
	tya
	jsr     _setSpriteFrame
;
; spr = oam_meta_spr(player_x, player_y, spr, playerSpriteData);
;
L074B:	jsr     decsp3
	lda     _player_x
	ldy     #$02
	sta     (sp),y
	lda     _player_y
	dey
	sta     (sp),y
	lda     _spr
	dey
	sta     (sp),y
	lda     #<(_playerSpriteData)
	ldx     #>(_playerSpriteData)
	jsr     _oam_meta_spr
	sta     _spr
;
; for ( i = 0; i < numEnemies; ++i ) {
;
	lda     #$00
	sta     _i
L07E9:	lda     _i
	cmp     _numEnemies
	jcs     L075C
;
; j = spriteCount();
;
	jsr     _spriteCount
	ldy     #$01
	sta     (sp),y
;
; if ( ( frame & 0x0F ) == 0x0F ) {
;
	lda     _frame
	ldx     #$00
	and     #$0F
	cmp     #$0F
	bne     L07EA
;
; enemyData[j].frame ^= 1;
;
	lda     (sp),y
	jsr     aslax2
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	eor     #$01
	sta     (ptr1),y
;
; setSpriteFrame(enemySpriteData[j], enemyFrames[enemyData[j].frame]);
;
	dey
	lda     (sp),y
	jsr     pusha0
	lda     #$11
	jsr     tosmula0
	clc
	adc     #<(_enemySpriteData)
	tay
	txa
	adc     #>(_enemySpriteData)
	tax
	tya
	jsr     pushax
	ldy     #$03
	ldx     #$00
	lda     (sp),y
	jsr     aslax2
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	dey
	ldx     #$00
	lda     (ptr1),y
	jsr     aslax2
	clc
	adc     #<(_enemyFrames)
	tay
	txa
	adc     #>(_enemyFrames)
	tax
	tya
	jsr     _setSpriteFrame
;
; setSpritePriority(enemySpriteData[i], sprPriority);
;
L07EA:	lda     _i
	jsr     pusha0
	lda     #$11
	jsr     tosmula0
	clc
	adc     #<(_enemySpriteData)
	tay
	txa
	adc     #>(_enemySpriteData)
	tax
	tya
	jsr     pushax
	ldy     #$02
	lda     (sp),y
	jsr     _setSpritePriority
;
; sprPriority ^= 1;
;
	ldy     #$00
	lda     (sp),y
	eor     #$01
	sta     (sp),y
;
; spr = oam_meta_spr(enemyData[j].x, enemyData[j].y, spr, enemySpriteData[j]); 
;
	jsr     decsp3
	ldy     #$04
	ldx     #$00
	lda     (sp),y
	jsr     aslax2
	sta     ptr1
	txa
	clc
	adc     #>(_enemyData)
	sta     ptr1+1
	ldy     #<(_enemyData)
	lda     (ptr1),y
	ldy     #$02
	sta     (sp),y
	ldy     #$04
	ldx     #$00
	lda     (sp),y
	jsr     aslax2
	clc
	adc     #<(_enemyData)
	sta     ptr1
	txa
	adc     #>(_enemyData)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     (sp),y
	lda     _spr
	dey
	sta     (sp),y
	ldy     #$04
	lda     (sp),y
	jsr     pusha0
	lda     #$11
	jsr     tosmula0
	clc
	adc     #<(_enemySpriteData)
	tay
	txa
	adc     #>(_enemySpriteData)
	tax
	tya
	jsr     _oam_meta_spr
	sta     _spr
;
; for ( i = 0; i < numEnemies; ++i ) {
;
	inc     _i
	jmp     L07E9
;
; spriteCount();
;
L075C:	jsr     _spriteCount
;
; updateEnemies();
;
	jsr     _updateEnemies
;
; playerDir = pad;
;
	lda     _pad
	sta     _playerDir
;
; if ( pad&PAD_LEFT  && player_x > 0 ) {
;
	lda     _pad
	and     #$40
	beq     L07EE
	lda     _player_x
	beq     L07EE
;
; player_x -= 2;
;
	sec
	sbc     #$02
	sta     _player_x
;
; if ( pad&PAD_RIGHT && player_x < 240 ) {
;
L07EE:	lda     _pad
	and     #$80
	beq     L078B
	lda     _player_x
	cmp     #$F0
	bcs     L078B
;
; player_x += 2;
;
	lda     #$02
	clc
	adc     _player_x
	sta     _player_x
;
; bgHorizCollideCheck(&player_x, &player_y, playerDir);
;
L078B:	jsr     decsp4
	lda     #<(_player_x)
	ldy     #$02
	sta     (sp),y
	iny
	lda     #>(_player_x)
	sta     (sp),y
	lda     #<(_player_y)
	ldy     #$00
	sta     (sp),y
	iny
	lda     #>(_player_y)
	sta     (sp),y
	lda     _playerDir
	jsr     _bgHorizCollideCheck
;
; if ( pad&PAD_UP    && player_y > 0 ) { 
;
	lda     _pad
	and     #$10
	beq     L07F5
	lda     _player_y
	beq     L07F5
;
; player_y -= 2;
;
	sec
	sbc     #$02
	sta     _player_y
;
; if ( pad&PAD_DOWN  && player_y < 220 ) {
;
L07F5:	lda     _pad
	and     #$20
	beq     L079B
	lda     _player_y
	cmp     #$DC
	bcs     L079B
;
; player_y += 2;
;
	lda     #$02
	clc
	adc     _player_y
	sta     _player_y
;
; bgVertCollideCheck(&player_x, &player_y, playerDir);
;
L079B:	jsr     decsp4
	lda     #<(_player_x)
	ldy     #$02
	sta     (sp),y
	iny
	lda     #>(_player_x)
	sta     (sp),y
	lda     #<(_player_y)
	ldy     #$00
	sta     (sp),y
	iny
	lda     #>(_player_y)
	sta     (sp),y
	lda     _playerDir
	jsr     _bgVertCollideCheck
;
; four_Sides(player_x, player_y); 
;
	lda     _player_x
	jsr     pusha
	lda     _player_y
	jsr     _four_Sides
;
; playerEnemyCollideCheck();
;
	jsr     _playerEnemyCollideCheck
;
; if ( playerEnemyColliding ) {
;
	lda     _playerEnemyColliding
	beq     L07A9
;
; setSpritePalette(playerSpriteData, 0x0);
;
	lda     #<(_playerSpriteData)
	ldx     #>(_playerSpriteData)
	jsr     pushax
	lda     #$00
;
; } else {
;
	jmp     L07E6
;
; setSpritePalette(playerSpriteData, 0x2);
;
L07A9:	lda     #<(_playerSpriteData)
	ldx     #>(_playerSpriteData)
	jsr     pushax
	lda     #$02
L07E6:	jsr     _setSpritePalette
;
; ++frame;
;
	inc     _frame
;
; while ( 1 )
;
	jmp     L0732

.endproc

